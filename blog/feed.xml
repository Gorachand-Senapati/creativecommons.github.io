<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">CC technical blog</title>
  <id>urn:uuid:cc6bc3c1-d0ad-365f-b7a6-1fcd73488c56</id>
  <updated>2020-07-31T00:00:00Z</updated>
  <link href="http://opensource.creativecommons.org/" />
  <link href="http://opensource.creativecommons.org/blog/feed.xml" rel="self" />
  <author>
    <name></name>
  </author>
  <generator uri="https://github.com/ajdavis/lektor-atom" version="0.3">Lektor Atom Plugin</generator>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/linked-commons-autocomplete-feature/">
    <title type="text">Linked Commons: Autocomplete Feature</title>
    <id>urn:uuid:0e278e85-748f-3d35-a640-24daab837875</id>
    <updated>2020-07-31T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/linked-commons-autocomplete-feature/" />
    <author>
      <name>subhamX</name>
    </author>
    <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;&lt;p&gt;The following blog intends to explain the very recent feature integrated to the Linked Commons. Be it the giant Google Search or any small website having a form field, everyone wishes to predict what’s on the user’s mind. For every keystroke, a nice search bar always renders some possible options the user could be looking for. The core ideology behind having this feature is — &lt;em&gt;do as much work as possible for the user!&lt;/em&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center; width: 100%;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;autocomplete-feat-in-action.gif&quot; alt=&quot;autocomplete-feature&quot; style=&quot;border: 1px solid black&quot;&gt;
        &lt;figcaption style=&quot;font-weight: 500;&quot;&gt;Autocomplete feature in action&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;&lt;p&gt;One of the newest features integrated last month into Linked Commons is Filtering by node name. Here a user can search for his/her favourite node and explore all its neighbours. Since the list is very big, it was self-evident for us to have a text box (and not a drop-down) where the user is supposed to type the node name.&lt;/p&gt;
&lt;p&gt;Some of the reasons why to have a text box or filtering by node option.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some of the node names are very uncommon and lengthy. There is a high probability of misspelling it.&lt;/li&gt;
&lt;li&gt;Submitting the form and getting a response of “Node doesn’t exist” isn’t a very good user flow, and we want to minimise such incidents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, on a side note giving a search bar to the user and giving no hints is ruthless. We all need recommendations and guess what linked commons got you covered! Now for every keystroke, we load a bunch of node names which you might be looking for. ;)&lt;/p&gt;
&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;&lt;p&gt;The autocomplete feature on a very basic level aims to predict the rest of a word the user is typing. A possible implementation is though the linear traversal of all the nodes in the list. It will be having a &lt;strong&gt;linear time complexity&lt;/strong&gt;. It’s not very good and it’s very obvious to look for a faster and more efficient way. Also, even if for once we neglect the &lt;strong&gt;time complexity&lt;/strong&gt;, looking for the best 10 nodes out of these millions on the client's machine is not at all a good idea; it will cause throttling and will result in performance drops. 
On the other hand, a &lt;strong&gt;trie based solution&lt;/strong&gt; is more efficient for sure but still, we cannot do this indexing on the client machine for the same reasons stated above.
So far, it is now apparent that we implement this feature on the server and also aim for at least something better than linear time complexity.&lt;/p&gt;
&lt;h2 id=&quot;a-non-conventional-solution&quot;&gt;A non-conventional solution&lt;/h2&gt;&lt;p&gt;We could have used Elastic Search, which is very powerful and has a ton of functionalities but since our needs are very small we wanted to look for other simple alternatives. Moreover, we didn't want to complicate our current architecture by adding an additional framework and libraries.&lt;/p&gt;
&lt;p&gt;Taking the above points into consideration we went ahead with the following solution. We store all nodes data into an SQL dB and search for all the nodes whose domain name pattern was matching to the query string. After slicing the query set and other randomization we sent the payload to the client. To make it more robust, we are caching the results in the frontend to avoid multiple calls for the same query. It will surely reduce the load from the server and also give a faster response.&lt;/p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;&lt;p&gt;To make sure our solution works well, we performed load tests, checking that any response time does not exceed 1000 ms. We used locust which is a user load testing tool. We simulated with &lt;strong&gt;1000 users&lt;/strong&gt; and &lt;strong&gt;10 as Hatch rate&lt;/strong&gt;. 
The following test is performed on the local machine to ensure that the server location isn’t affecting the results.&lt;/p&gt;
&lt;p&gt;Here are some aggregated result statistics.&lt;/p&gt;
&lt;table class=&quot;table table-striped&quot;&gt;
&lt;thead class=&quot;thead-dark&quot;&gt;&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Request Count&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 23323     &lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Failure Count&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;  0        &lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Median Response Time&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 360 ms    &lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Average Response Time&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 586.289 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Min Response Time&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 4.03094 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max Response Time&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 4216 ms   &lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Average Content Size&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 528.667 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Requests/s&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 171.754   &lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max Requests/s&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 214       &lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Failures/s&lt;/td&gt;
&lt;td&gt;&lt;strong&gt; 0         &lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Since SQLlite has a serverless design, disk io usually has a significant impact on the performance. The above results were executed on a server with HDD storage. Linked Commons server is equipped with faster disk io. It will certainly improve the performance but will be countered by the network latency and other factors like the number of nodes in the dB. So the above results to some degree resemble the actual performance.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;&lt;p&gt;In the next blog, we will be covering the long awaited data update and the new architecture.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Overall, I enjoyed working on this feature and it was a great learning experience. This feature has been successfully integrated to the development version, do check it out. Now that you have read this blog till the end, I hope that you enjoyed it. For more information please visit our &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz/&quot;&gt;Github repo&lt;/a&gt;. We are looking forward to hearing from you on linked commons. Our &lt;a href=&quot;https://creativecommons.slack.com/channels/cc-dev-cc-catalog-viz&quot;&gt;slack&lt;/a&gt; doors are always open to you, see you there. :)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/data-flow-API-to-DB/">
    <title type="text">Data flow: from API to DB</title>
    <id>urn:uuid:44db39c0-d562-3a62-b5c5-ac4babcbbe40</id>
    <updated>2020-07-22T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/data-flow-API-to-DB/" />
    <author>
      <name>srinidhi</name>
    </author>
    <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;&lt;p&gt;The CC Catalog project  handles the flow of image metadata from the source or
provider and loads it to the database, which is then surfaced to the &lt;a href=&quot;https://ccsearch.creativecommons.org/about&quot;&gt;CC
search&lt;/a&gt; tool. The workflows are set up for each provider to gather
metadata about CC licensed images. These workflows are handled with the help of
Apache Airflow. Airflow is an open source tool that helps us to schedule and
monitor workflows.&lt;/p&gt;
&lt;h2 id=&quot;airflow-intro&quot;&gt;Airflow intro&lt;/h2&gt;&lt;p&gt;Apache Airflow is an open source tool that helps us to schedule tasks and
monitor workflows . It provides an easy to use UI that makes managing tasks
easy.  In Airflow, the tasks we want to schedule are organised in DAGs
(Directed Acyclic Graphs). DAGs consist of a collection of tasks, and a
relationship defined among these tasks, so that they run in an organised
manner. DAGs files are standard python files that are loaded from  the defined
&lt;code&gt;DAG_FOLDER&lt;/code&gt; on a host. Airflow selects all the python files in the
&lt;code&gt;DAG_FOLDER&lt;/code&gt; that have a DAG instance defined globally, and executes them to
create the DAG objects.&lt;/p&gt;
&lt;h2 id=&quot;cc-catalog-workflow&quot;&gt;CC Catalog Workflow&lt;/h2&gt;&lt;p&gt;In the CC catalog, Airflow is set up inside a docker container along with other
services . The loader and provider workflows are inside the &lt;code&gt;dags&lt;/code&gt; directory in
the repo &lt;a href=&quot;https://github.com/creativecommons/cccatalog/tree/dacb48d24c6ae9b532ff108589b9326bde0d37a3/src/cc_catalog_airflow/dags&quot;&gt;dag folder&lt;/a&gt;. Provider workflows are set up to pull metadata
about CC licensed images from the respective providers , the data pulled is
structured into a standardised format and written into a TSV (Tab Separated
Values) file locally. These TSV files are then loaded into S3 and then finally
to PostgreSQL DB by the loader workflow.&lt;/p&gt;
&lt;h2 id=&quot;provider-api-workflow&quot;&gt;Provider API workflow&lt;/h2&gt;&lt;p&gt;The provider workflows are usually scheduled in one of two time frequencies,
daily or monthly.&lt;/p&gt;
&lt;p&gt;Providers such as Flickr or Wikimedia Commons that are filtered using the date
parameter are usually scheduled for daily jobs. These providers have a large
volume of continuously changing data, and so daily updates are required to keep
the data in sync.&lt;/p&gt;
&lt;p&gt;Providers that are scheduled for monthly ingestion are ones with a relativley
low volume of data, or for which filtering by date is not possible. This means
we need to ingest the entire collection at once. Examples are museum providers
like the &lt;a href=&quot;https://collection.sciencemuseumgroup.org.uk/&quot;&gt;Science museum UK&lt;/a&gt; or &lt;a href=&quot;https://www.smk.dk/&quot;&gt;Statens Museum for
Kunst&lt;/a&gt;. We don’t expect museum providers to change data on a daily basis.&lt;/p&gt;
&lt;p&gt;The scheduling of the DAGs by the scheduler daemons depends on a few
parameters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start_date&lt;/code&gt; - it denotes the starting date from which the
task should begin running. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;schedule_interval&lt;/code&gt; - it denotes the interval between subsequent runs, it
can be specified with airflow keyword strings like “@daily”, “@weekly”,
“@monthly”, “@yearly” other than these we can also schedule the interval using
cron expression.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example: Cleveland museum is currently scheduled for a monthly crawl with a
starting date as &lt;code&gt;2020-01-15&lt;/code&gt;. &lt;a href=&quot;https://github.com/creativecommons/cccatalog/blob/dacb48d24c6ae9b532ff108589b9326bde0d37a3/src/cc_catalog_airflow/dags/cleveland_museum_workflow.py&quot;&gt;cleveland_museum_workflow&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;loader-workflow&quot;&gt;Loader workflow&lt;/h2&gt;&lt;p&gt;The data from the provider scripts are not directly loaded into S3. Instead,
they are stored in a TSV file on the local disk, and the tsv_postgres workflow
handles loading of data to S3, and eventually PostgreSQL. The DAG starts by
calling the task to stage the oldest tsv file from the output directory of the
provider scripts to the staging directory. Next, two tasks run in parallel, one
loads the tsv file in the staging directory to S3 , while the other creates the
loading table in the PostgreSQL database. Once the data is loaded to S3 and the
loading table has been created, the data from S3 is loaded to the intermediate
loading table and then finally inserted into the image table. If loading from
S3 fails the data is loaded to PostgreSQL from the locally stored tsv file.
When the data has been successfully transferred to the image table, the
intermediate loading table is dropped and the tsv files in the staging
directory are deleted. If the copying the tsv files to S3 fails or then those
files are moved to the failure directory for future inspection.&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
    &lt;img src=&quot;loader_workflow.png&quot; width=&quot;1000px&quot;/&gt;
    &lt;p&gt; Loader workflow &lt;/p&gt;
&lt;/div&gt;&lt;h2 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h2&gt;&lt;p&gt;I would like to thank Brent Moran for helping me write this blog post.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/what-is-up-ccos/">
    <title type="text">What is up? - CCOS Revamp</title>
    <id>urn:uuid:db2b95cd-c221-3f56-9ffb-8b165676fdbe</id>
    <updated>2020-07-20T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/what-is-up-ccos/" />
    <author>
      <name>dhruvi16</name>
    </author>
    <content type="html">&lt;p&gt;In my previous blog, I demonstrated what my Outreachy project was about. Here I will talk about my progress in the past 7 weeks.&lt;/p&gt;
&lt;h3 id=&quot;the-set-up&quot;&gt;The Set-Up -&lt;/h3&gt;&lt;p&gt;The &lt;a href=&quot;https://opensource.creativecommons.org/&quot;&gt;Creative Commons Open Source&lt;/a&gt; website is built using &lt;a href=&quot;https://www.getlektor.com/&quot;&gt;Lektor&lt;/a&gt;. I was not very familiar with it, so I started by going through the documentation and the official website code. I learned how awesome it is and can also be used by non-coders. I got familiar with the &lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;jinja templates&lt;/a&gt; and working of themes in a Lektor app. For integrating new styles from Vocabulary, I replaced &lt;code&gt;templates/&lt;/code&gt; folder with a &lt;code&gt;theme/&lt;/code&gt; folder. Here is the link to how &lt;a href=&quot;https://www.getlektor.com/docs/templates/&quot;&gt;templates&lt;/a&gt; work in Lektor.&lt;/p&gt;
&lt;p&gt;As the revamping process is gradual, there was a need of setting up a staging environment where we could test the website. Deploying the branch that consists of the ongoing changes was pretty easy, I just followed the official &lt;a href=&quot;https://www.netlify.com/blog/2016/05/25/lektor-on-netlify-a-step-by-step-guide/&quot;&gt;documentation&lt;/a&gt; provided by Netlify and deployed it.&lt;/p&gt;
&lt;h3 id=&quot;adding-new-components-to-vocabulary&quot;&gt;Adding New Components to Vocabulary -&lt;/h3&gt;&lt;p&gt;The &lt;a href=&quot;https://www.figma.com/file/mttcugI1UxvCJRKE5sdpbO/Mockups&quot;&gt;mock-ups&lt;/a&gt; for the new CCOS website extensively use Vocabulary components, styles, and patterns, and it had components that were not available in Vocabulary. So, I worked on building them from scratch. I enjoyed this part a bit too much. And also this was a part of the project, I did not think would take up like 2 weeks but it did. I enjoyed questioning the scope, the design, the experience of the components, and getting satisfactory answers. Maintaining the practices, focusing on details were fun things to do. It felt like I own those components. You can check them out &lt;a href=&quot;https://cc-vocabulary.netlify.app/?path=/docs/vocabulary-introduction--page&quot;&gt;here&lt;/a&gt; and also use them wherever needed.&lt;/p&gt;
&lt;h3 id=&quot;updating-templates-of-the-theme&quot;&gt;Updating Templates of the Theme -&lt;/h3&gt;&lt;p&gt;I started by updating the home page template. I try to make the code cleaner and more readable. Going through the &lt;a href=&quot;https://www.getlektor.com/&quot;&gt;Lektor&lt;/a&gt; documentation, I came across different ways to do so. One of them was &lt;a href=&quot;/blog/entries/what-is-up-ccos/(https://www.getlektor.com/&quot;&gt;flow blocks&lt;/a&gt;), I like how it makes a template more modular and readable so I implemented the home page using flow blocks. This one after one, I started updating every template. For now, I have updated 10 templates and I plan to update the remaining in upcoming weeks.&lt;/p&gt;
&lt;h3 id=&quot;my-experience-so-far&quot;&gt;My Experience so far -&lt;/h3&gt;&lt;p&gt;This has been one heck of a journey for me. I have never collaborated with such a huge open-source organization and so that was something new for me. I have learned a lot of things both technical and non-technical so far. I have become more alert about the code I write, this journey has helped me improve the questions I ask to myself while writing code or thinking about the solution, I got to learn about new technologies such as &lt;a href=&quot;https://www.getlektor.com/&quot;&gt;Lektor&lt;/a&gt;, &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;, &lt;a href=&quot;https://sass-lang.com/documentation/syntax&quot;&gt;SCSS&lt;/a&gt; and many more. I am just very glad to be a part of this.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/linked-commons-whats-new/">
    <title type="text">Linked Commons: What's new?</title>
    <id>urn:uuid:cf56c986-4df1-344a-a15e-e852c66f895d</id>
    <updated>2020-07-16T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/linked-commons-whats-new/" />
    <author>
      <name>subhamX</name>
    </author>
    <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Linked Commons&lt;/strong&gt; is a visualization project which aims to showcase and establish a relationship between millions of data points of licensed content metadata using graphs. Since it is the first blog of this new series, let’s discuss the core ideology of having this project and then about new features. Development of all components mentioned in this blog is complete and has been successfully integrated, so do check out the development version. Happy Reading!&lt;/p&gt;
&lt;h2 id=&quot;motivation-and-why-does-visualization-matter?&quot;&gt;Motivation and why does visualization matter?&lt;/h2&gt;&lt;p&gt;The number of websites using creative commons licensed content is very huge and growing very rapidly. The CC catalog hosts these millions of data points and each node contains information about the URL of the websites and the licenses used. One can surely do rigorous data analysis, but this would only be interpretable by a few people with a technical background.  On the other hand,  by visualizing data, it becomes incredibly easier to identify patterns and trends. As an old saying, a picture is worth a thousand words. That’s the core ideology of the Linked Commons, i.e. to show the millions of licensed content metadata and how these nodes are connected in a visually appealing form on the HTML canvas like a picture.&lt;/p&gt;
&lt;h2 id=&quot;task-1:-code-refactoring&quot;&gt;Task 1: Code Refactoring&lt;/h2&gt;&lt;p&gt;My first task was to refactor the code and migrate it to react. The existing codebase had all core functionalities, but we wanted to make it more modular, improve the design, code readability, and reduce complexity. This will help us maintain this project in the long run. Also, it will be easier for the community to contribute and understand the logic.&lt;/p&gt;
&lt;h2 id=&quot;task-2:-graph-filtering&quot;&gt;Task 2: Graph Filtering&lt;/h2&gt;&lt;h3 id=&quot;need-for-filtering-methods&quot;&gt;Need for Filtering Methods&lt;/h3&gt;&lt;div style=&quot;text-align: center; width: 90%; margin-left: 5%;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;big-graph.png&quot; alt=&quot;Large Graph&quot; style=&quot;border: 1px solid black&quot;&gt;
        &lt;figcaption style=&quot;font-weight: 500;&quot;&gt;Pic showing clustors of a Graph with 9982 nodes 5000 links&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;The aggregate data that cc catalog has is in hundreds of millions. Rendering a graph with these many nodes will be a nightmare for the browser’s rendering and JavaScript engine. Just like we divide any standard textbook into chapters, we thought about adding filtering options that enable the user to retrieve precise information according to certain criteria selected by them. Hence,  we need to have a way in which we can filter the aggregate data into smaller chunks.&lt;/p&gt;
&lt;h3 id=&quot;what-filtering-methods?&quot;&gt;What filtering methods?&lt;/h3&gt;&lt;p&gt;After brainstorming for a while, we converged and agreed to have &lt;strong&gt;filtering based on node name and distance&lt;/strong&gt;. The primary reason behind this was, it is kind of basic that a person would like to look for his/her favourite node and its neighbours. This is not the end for sure, and many more filtering methods will be added, maybe with the support of chaining one after another. This is just a baby step!&lt;/p&gt;
&lt;h3 id=&quot;server-side-filtering-vs-client-side-filtering?&quot;&gt;Server-side Filtering vs Client-Side Filtering?&lt;/h3&gt;&lt;p&gt;Now that we know on what query params the filter should work, we need to decide where to do the filtering. Should we do it on the client machine or do it on our server and pass the processed and filtered data to the client? In any filtering method, we need to traverse the whole graph. The JS engine in the browser is doing rendering stuff, complex calculation, etc. With all these processes, doing a full traversal of the dataset having more than a million nodes is going to take a lot of time and memory. The above claim assumes that we have a moderately dense graph. On the other hand, another strategy to accomplish graph filtering could be to delegate that load to a server, and the client’s browser can ask for a fresh copy of the filtered data whenever needed. As mentioned above the client-side filtering has serious shortcomings and user experience won’t be very good with browser freezing and frame drops. So, that's why we decided to go with the latter option i.e server-side filtering.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;filtering-in-action.gif&quot; alt=&quot;Filtering In Action&quot; style=&quot;border: 1px solid black&quot;&gt;
        &lt;figcaption&gt;Filtering In Action&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;&lt;h2 id=&quot;task-3:-new-design&quot;&gt;Task 3: New Design&lt;/h2&gt;&lt;p&gt;My third task was to upgrade the front-end design of the project. It now has a very clean and refreshing look along with the support for both light and dark theme. Check out our webpage in dark mode and do let us know if it saves your PC energy consumption (As claimed by some websites). Now you all can visit the Linked Commons webpage at mid-night too, no strain to the eyes. ;)&lt;/p&gt;
&lt;div style=&quot;text-align: center; width: 90%; margin-left: 5%;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;new-design-light.png&quot; alt=&quot;Light Theme&quot; style=&quot;border: 1px solid black&quot;&gt;
        &lt;figcaption&gt;Linked Commons - Light Theme&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;&lt;p&gt;In the next two weeks, I will be working on the following features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement suggestions API on the server and integrate it with the frontend&lt;/li&gt;
&lt;li&gt;Update the visualization with a more recent and bigger dataset&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Overall, it was fantastic and rejuvenating experience working on these tasks. Now that you have read this blog till the end, I hope that you enjoyed it. For more information visit our &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz/&quot;&gt;Github repo&lt;/a&gt;. We are looking forward to hearing from you on linked commons. Our &lt;a href=&quot;https://creativecommons.slack.com/channels/cc-dev-cc-catalog-viz&quot;&gt;slack&lt;/a&gt; doors are always open to you, see you there. :)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/legal-database-coding-mid-term/">
    <title type="text">CC Legal Database: Coding and Mid-term status</title>
    <id>urn:uuid:0283bfb3-3e0e-3c6a-a70b-02df13f31235</id>
    <updated>2020-07-08T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/legal-database-coding-mid-term/" />
    <author>
      <name>krysal</name>
    </author>
    <content type="html">&lt;p&gt;We are already in the second half of the time stipulated for the project and it is time to pause for review the initial plan, celebrate the objectives achieved and think about what remains to be done.&lt;/p&gt;
&lt;h2 id=&quot;initial-plan&quot;&gt;Initial plan&lt;/h2&gt;&lt;p&gt;Initially, two weeks were allocated to do the redesign for the new site. I thought there would be plenty of time here, &lt;em&gt;is just design&lt;/em&gt; I said to myself, despite not having done any serious project in Figma before beyond a few sketches. Later we will see I was wrong here. This included creating new Vocabulary components if necessary. Between the second and third weeks, I would create the data models (for Django and therefore for the database as well) and from the fourth week onwards it would start to implement all this in code: make the Homepage, listing, details pages and the others.&lt;/p&gt;
&lt;h2 id=&quot;issues-in-the-way&quot;&gt;Issues in the way&lt;/h2&gt;&lt;p&gt;One task that took longer than expected was to finish the designs, a key point because the other tasks depended on this. Though the initial scheme was ready on time, as it was discussed with the stakeholders new requirements became evident, so more modifications had to be made. For example, on the &lt;a href=&quot;https://labs.creativecommons.org/caselaw/&quot;&gt;current site&lt;/a&gt;, the way to explore cases and scholarship is by country, and in principle, this would stay the same way and I designed with that in mind, but talking to our internal user (which acts as a &lt;em&gt;product owner&lt;/em&gt; here) was better to change this scheme to one for labels or categories that are more related with both entities. Highlighting the case of the Scholarship model, in which the attribute of the country was eliminated because it is not so relevant, and although it seemed somewhat a small thing, this also caused changes in the design of the home page, the listings and how the content of the database will be explored in general. Design for a good user experience is not so easy as a non-designer may think. There were times when there was a lack of ideas but the important thing is to make decisions and move forward, in later iterations it will be improved.&lt;/p&gt;
&lt;p&gt;As in all software development, unexpected things happen and errors will appear no matter how much you plan ahead, for the fourth week I had planned to build a continuous integration system to have a server where anyone can see the progress of my changes, however, there were a few inconveniences that had me googling for a couple of days, publishing a Django project in Heroku can be tricky, specially regarding static files (assets like style sheets and scripts) if they are generated by Heroku at some point in the deployment pipeline, depending on the phase in which it is carried out, they can be lost in the ephemeral file system of Heroku, a process that I will not delve into here but that seems important to me to highlight if anyone else  has similar problems.&lt;/p&gt;
&lt;h2 id=&quot;progress-so-far&quot;&gt;Progress so far&lt;/h2&gt;&lt;p&gt;I have managed to finish the main tasks and I would say that even the initially expected result has been improved. So I can list the following achievements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redesigned the entire website using the Figma Design Library&lt;/li&gt;
&lt;li&gt;Built first pages: Home, listing and details pages for both Cases and Scholarship, and one for the FAQs.&lt;/li&gt;
&lt;li&gt;Create a GitHub Action to lint every PR and check if it follows the project's code style&lt;/li&gt;
&lt;li&gt;Deployment of the Django project on Heroku with a CI process linked to a GitHub repository, see the live development site &lt;a href=&quot;https://cc-caselaw.herokuapp.com/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is said quickly but each task carries its considerable workload. It's been a good result so far, I've learned a lot of things along the way, like basic use of Figma, use of Storybook (related to Vocabulary components), good code security practices, some accessibility details, and more.&lt;/p&gt;
&lt;h2 id=&quot;plan-for-the-second-half-of-the-timeline&quot;&gt;Plan for the second half of the timeline&lt;/h2&gt;&lt;p&gt;There are some tasks due from past weeks, such as build forms for Case and Scholarship submissions, but I am confident that now that the project has reached a stable state I can do it quickly in the next days. Other tasks were moved for later: searching records and filtering by tags moved after forms are created, so I can finish the visual parts of the site first and focus on functional work without shifting between types of tasks.&lt;/p&gt;
&lt;p&gt;The tasks and they order have changed, like I mentioned earlier, requirements were modified (a bit) so some tasks I planned for last weeks are not necessary anymore or are done already out-of-box with Django admin (benefits of choosing a batteries included framework!). In general, I don't think the initial plan was wrong, we just went through the natural evolution of a product software. Mentors have also been very helpful in keeping a reasonable scope and adjusting priorities.&lt;/p&gt;
&lt;p&gt;After main functionalities are done we can start making improvements, as we already identified some nice to have features but not so important at the moment. Stay tuned for more to come.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/integration-vocabulary-ccos/">
    <title type="text">Integration of Vocabulary with CCOS.</title>
    <id>urn:uuid:220be94d-1b9f-3d0a-8f65-fe0449aa3848</id>
    <updated>2020-07-08T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/integration-vocabulary-ccos/" />
    <author>
      <name>dhruvi16</name>
    </author>
    <content type="html">&lt;p&gt;This blog demonstrates the project I am working on during the course of my Outreachy internship. My project involves redesigning and reimplementing one of the web products of the CC network using our new cohesive design library — &lt;a href=&quot;https://cc-vocabulary.netlify.app/?path=/docs/vocabulary-introduction--page&quot;&gt;Vocabulary&lt;/a&gt;. After my internship is completed, the &lt;a href=&quot;https://opensource.creativecommons.org/&quot;&gt;Creative Commons Open Source&lt;/a&gt; website will have a complete revamped interface that will extensively use Vocabulary components.&lt;/p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem -&lt;/h2&gt;&lt;p&gt;There exists a large variety of web products across the Creative Commons network. These products serve different purposes for the network and so do they vary in the way of presenting the existing content. So, to conquer the inconsistency across the different products we have our coherent design system called Vocabulary.&lt;/p&gt;
&lt;p&gt;If we come to the current CC Open Source website, it is quite off-track considering our new design system Vocabulary. The styles and components of the website are not well aligned with the components of the Vocabulary. And thus it lacks harmony and consistency concerning the brand.&lt;/p&gt;
&lt;p&gt;The purpose of a design system gets dissolved if it is not well incorporated with the products and we do have this problem with the CC Open Source website. Hence, there was a need for a redesign of CCOS as per the new Design Library. This project aims to rectify the problems and inconsistencies of the CCOS website and build a completely new website (as per Vocabulary).&lt;/p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution -&lt;/h2&gt;&lt;p&gt;I started with trying out different mock-ups for the new website in Figma. You can see what I tried to make &lt;a href=&quot;https://www.figma.com/file/ka3zs1iYnqJvyLnvAV3cW7/Home-proposals&quot;&gt;here&lt;/a&gt;. And then with the help of our UX designer Francisco, we created all the mock-ups and finalized how the website will look in a couple of weeks, here is the &lt;a href=&quot;https://www.figma.com/file/mttcugI1UxvCJRKE5sdpbO/Mockups?node-id=759%3A516&quot;&gt;link&lt;/a&gt; for that.&lt;/p&gt;
&lt;p&gt;I started my internship with going through the website’s tech stack, the website is made using &lt;a href=&quot;https://www.getlektor.com/&quot;&gt;Lektor&lt;/a&gt;, with which I was not very familiar. I read the official docs, went through projects, tried making demo projects, and took help from mentors wherever I got stuck.&lt;/p&gt;
&lt;p&gt;To keep the project clean I added a theme that only has templates for the project and alters no content (as per aim). While updating templates, some components were not available in the Vocabulary yet, so I worked on adding those components to the library. And then used them in my new templates.&lt;/p&gt;
&lt;p&gt;I have thoroughly enjoyed contributing to this project as I got to learn so much. And I am excited for what’s next to come in the upcoming weeks.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/flickr-sub-provider-retrieval/">
    <title type="text">Flickr Sub-provider Retrieval</title>
    <id>urn:uuid:1fcfc052-0144-3623-9d5f-f16949e32ae1</id>
    <updated>2020-06-24T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/flickr-sub-provider-retrieval/" />
    <author>
      <name>charini</name>
    </author>
    <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;&lt;p&gt;The Creative Commons (CC) licensed images made available via CC Search and CC Catalog API tools are retrieved from
numerous sources (which we refer to as providers) such as Flickr and different museum collections. While the existing
implementation of the CC Catalog tools enables filtering images in various manners such as based on image tags, the
provider, and the license type, it does not facilitate searching for images from particularly valuable internal sources
(referred to as sub-providers). For example, images related to 'NASA' have significant value in the Flickr collection,
since 'NASA' related pictures are extensively used by a large audience especially for educational purposes. The aim of
my first task in the GSoC project is to implement required changes in the API script level and in the existing data in
the database, such that filtering by certain important sub-providers is made possible.&lt;/p&gt;
&lt;p&gt;While there are several providers such as Flickr, Europeana, and Smithsonian from which we require to extract
sub-providers, the consensus was to initially focus on Flickr due to that currently being in production, and since a
substantial amount of images made available via CC Search come from Flickr. Thus, in this initial blog post, I will
discuss how I addressed the requirement of sub-provider retrieval in Flickr by making the necessary changes in the
&lt;a href=&quot;https://github.com/creativecommons/cccatalog&quot;&gt;Creative Commons Catalog&lt;/a&gt; repository.&lt;/p&gt;
&lt;h2 id=&quot;research&quot;&gt;Research&lt;/h2&gt;&lt;p&gt;The primary research involved in the Flickr sub-provider retrieval task was defining which entities to identify as
sub-providers, and identifying how those sub-providers can be retrieved based on the image related information we
retain.&lt;/p&gt;
&lt;h3 id=&quot;definition-of-a-sub-provider&quot;&gt;Definition of a sub-provider&lt;/h3&gt;&lt;p&gt;It was decided that a sub-provider should be a collection of user accounts in Flickr, where this collection corresponded
to a common entity, and the common entity would reflect the sub-provider. For example, since both Flickr user accounts
&lt;em&gt;NASA HQ PHOTO&lt;/em&gt; and &lt;em&gt;NASA Johnson&lt;/em&gt; provide images related to NASA, we would represent the NASA sub-provider by those
two (and other related) user accounts.&lt;/p&gt;
&lt;p&gt;The next challenge was to determine how to identify which collections of user accounts were important to a wider
audience. The number of views per user account was an intuitive measure to rely on for this requirement. My supervisor
Brent Moran executed a query on the existing CC database to obtain the 50 most popular user accounts in Flickr. A
snippet of the query response is as follows:&lt;/p&gt;
&lt;table class=&quot;table table-striped&quot;&gt;
&lt;thead class=&quot;thead-dark&quot;&gt;&lt;tr&gt;
&lt;th&gt;user_account_name&lt;/th&gt;
&lt;th&gt;total_views&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Apollo Image Gallery&lt;/td&gt;
&lt;td&gt;1216297208&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BioDivLibrary&lt;/td&gt;
&lt;td&gt;625528813&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;manhhai&lt;/td&gt;
&lt;td&gt;445714729&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thomas Hawk&lt;/td&gt;
&lt;td&gt;300554527&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sangudo&lt;/td&gt;
&lt;td&gt;258177509&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NASA Goddard Photo and Video&lt;/td&gt;
&lt;td&gt;225143949&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Despite having a significant number of views, some of these user accounts did not appear to be worth being identified
as belonging to a sub-provider due to their lack of educational importance. Thus, we manually curated this list to
retain what we believed to be important to a wider audience.&lt;/p&gt;
&lt;h3 id=&quot;sub-provider-identification&quot;&gt;Sub-provider identification&lt;/h3&gt;&lt;p&gt;In order to identify the sub-provider each image from Flickr belonged to, it was necessary to determine which field in
the stored image data referred to the user account. Among the various information contained in an API response, only a
selected set of fields is stored on the CC end, and it was important to use such stored data for the identification of
sub-providers. We initially decided to rely on the user account name which was reflected by the &lt;em&gt;ownername&lt;/em&gt; field in
the JSON response and stored as the &lt;em&gt;creator&lt;/em&gt; in the CC database. However, we later realised that the names of accounts
could potentially change over time, and therefore was not a reliable field for extracting the sub-provider. Another
field from the JSON response that helped to uniquely identify a user account was the &lt;em&gt;owner&lt;/em&gt; field, which acted like a
unique user ID. Even though the &lt;em&gt;owner&lt;/em&gt; value was not directly stored in the CC database, it was stored as part of the
&lt;em&gt;creator URL&lt;/em&gt; field, and fortunately, all creator URLs from Flickr consisted of a common prefix plus the &lt;em&gt;owner&lt;/em&gt; value
(the user id). Thus, we decided to use the &lt;em&gt;creator URL&lt;/em&gt; value retained in the CC database for identifying sub-providers
in Flickr.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;&lt;p&gt;There are two levels at which sub-provider retrieval needs to be supported, where the first concerns the API scripts
from which we initially pull the data from different providers to keep the CC collections uptodate. The second is the
CC database level where the existing data needs to be updated to ensure that those reflect the sub-providers similar to
the newly added image information.&lt;/p&gt;
&lt;p&gt;The following sections explain how we represented the sub-provider information in the implementation, the changes made
at Flickr API script level and the database update logic to support sub-provider retrieval.&lt;/p&gt;
&lt;h3 id=&quot;representing-the-sub-provider-information&quot;&gt;Representing the sub-provider information&lt;/h3&gt;&lt;p&gt;As previously explained, we define a sub-provider as a collection of user accounts, and it was identified that the
unique user ID returned in the Flickr JSON response (referred to as the &lt;em&gt;owner&lt;/em&gt;) was a reliable field for uniquely
identifying each user account. For the time being, we focused on sub-providers NASA, SpaceX, and the Biodiversity
Heritage Library (BioDivLibrary) based on their considerable importance to the community. Using the top six NASA related
user accounts, the 'Official SpaceX Photos' user account, and the 'BioDivLibrary' user account as filtered by Brent's
query, we identified the corresponding user IDs (content of the &lt;em&gt;owner&lt;/em&gt; field) using the
&lt;strong&gt;flickr.people.findByUsername&lt;/strong&gt; method made available in the Flickr API. The mapping between the sub-provider and the
corresponding user IDs was stored in a dictionary as follows.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FLICKR_SUB_PROVIDERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;nasa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;24662369@N07&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# NASA Goddard Photo and Video&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;35067687@N04&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# NASA HQ PHOTO&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;29988733@N04&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# NASA Johnson&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;28634332@N05&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# NASA&amp;#39;s Marshall Space Flight Center&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;108488366@N07&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# NASAKennedy&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;136485307@N06&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Apollo Image Gallery&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;bio_diversity&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;61021753@N02&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# BioDivLibrary&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;spacex&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;130608600@N05&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Official SpaceX Photos&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since this information was required both at the API script level and the database level to retrieve sub-providers, we
stored it in a common file accessible from both levels.&lt;/p&gt;
&lt;p&gt;The next challenge was to identify how to reflect the sub-provider of each image using the existing database schema.
There are two different fields in the database as &lt;em&gt;provider&lt;/em&gt; and the &lt;em&gt;source&lt;/em&gt;. The &lt;em&gt;provider&lt;/em&gt; reflects the main source
from which the images are retrieved, which happens to be 'Flickr' in this scenario. The &lt;em&gt;source&lt;/em&gt; field reflects an
organisation or entity that has published the photos using 'Flickr' in this instance (or some other site that we
recognise as a &lt;em&gt;provider&lt;/em&gt;).The &lt;em&gt;source&lt;/em&gt; field was previously not utilised and was simply set to the value of the
&lt;em&gt;provider&lt;/em&gt; in the Flickr API script. Based on internal discussions, it was decided that the &lt;em&gt;source&lt;/em&gt; field was to be
used for reflecting the sub-provider, if the corresponding image belonged to any of the user accounts contained in our
dictionary &lt;em&gt;FLICKR_SUB_PROVIDERS&lt;/em&gt;. Otherwise the &lt;em&gt;source&lt;/em&gt; was set to the default &lt;em&gt;provider&lt;/em&gt; value 'Flickr'.&lt;/p&gt;
&lt;h3 id=&quot;sub-provider-retrieval-at-api-script-level&quot;&gt;Sub-provider retrieval at API script level&lt;/h3&gt;&lt;p&gt;Retrieving the sub-provider from the Flickr API script was fairly straightforward. Since the complete JSON response was
available at the API script level, we did not have to worry about retrieving the user ID (&lt;em&gt;owner&lt;/em&gt; value) from the
&lt;em&gt;creator URL&lt;/em&gt; field in our data. Rather, we simply get the owner value from the API response, and try to search for it
in the &lt;em&gt;FLICKR_SUB_PROVIDERS&lt;/em&gt; dictionary as follows.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;owner&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLICKR_SUB_PROVIDERS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLICKR_SUB_PROVIDERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Flickr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the collection of user IDs corresponding to each sub-provider is represented as a set, the time complexity for
each sub-provider is O(1) and therefore the total time complexity is linear in the number of sub-providers (that is O(n)
for n sub-providers). Due to the number of sub-providers of interest being minimal (currently it is 3), this search
logic is quite efficient.&lt;/p&gt;
&lt;p&gt;Once we determine whether the &lt;em&gt;source&lt;/em&gt; field should be set to a sub-provider value or the default ‘Flickr’ value with
the given logic, we set the &lt;em&gt;source&lt;/em&gt; value in the image store likewise.&lt;/p&gt;
&lt;h3 id=&quot;sub-provider-update-at-the-database-level&quot;&gt;Sub-provider update at the database level&lt;/h3&gt;&lt;p&gt;When updating sub-providers at the database level, we need to rely on the creator URL field to obtain the user ID of
each image. The creator URL is of the following form.&lt;/p&gt;
&lt;p&gt;'&lt;a href=&quot;https://www.flickr.com/photos/&quot;&gt;https://www.flickr.com/photos/&lt;/a&gt;' + &lt;em&gt;User ID&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the purpose of automating the process of updating the database to reflect sub-providers, I added the necessary SQL
queries and made it accessible via the Apache Airflow UI. The database update logic is as follows.&lt;/p&gt;
&lt;p&gt;As the first step, I create a temporary table and populate it with the sub-provider values and the corresponding
creator URLs. This is done by iterating through the sub-provider, user ID value pairs in the &lt;em&gt;FLICKR_SUB_PROVIDERS&lt;/em&gt;
dictionary, and concatenating the user ID with the prefix '&lt;a href=&quot;https://www.flickr.com/photos/&quot;&gt;https://www.flickr.com/photos/&lt;/a&gt;' to obtain the creator URL.&lt;/p&gt;
&lt;p&gt;The initial plan was to then perform a join on the CC image table (where all the image related information is stored)
with the temporary table on the condition that the creator URL from the image table matches that of the temporary table.
This query which filters all the rows in the image table where we need to update the sub-provider values, looks as
follows.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUB_PROVIDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WHERE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATOR_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATOR_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, a major concern with this query, as my supervisor Brent Moran pointed out, was that it locked all the rows
which matched the 'WHERE' clause at once. With respect to the magnitude of the Flickr data available in the CC image
table, this meant that the above query would lock millions of rows, thus hindering the execution of other queries on
the image table. To mitigate this issue, we decided to update the SQL query as follows, such that we perform a 'SELECT'
query on the rows to be updated by joining the previously created temporary table with the CC image table (a 'SELECT'
query does not lock the table), and iterate row by row over the query result to set the &lt;em&gt;source&lt;/em&gt; value in the image
table to the sub-provider value.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FOREIGN_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreign_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROVIDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_provider&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATOR_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATOR_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROVIDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Flickr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Let us refer to the result produced from the SELECT query as &amp;#39;selected_records&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreign_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{sub_provider}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WHERE&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROVIDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Flickr&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MD5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FOREIGN_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MD5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{foreign_id}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this functionality available from the Airflow UI, I have added the Airflow DAG
&lt;em&gt;flickr_sub_provider_update_workflow&lt;/em&gt;.
The changes in the source field after updating the image table in the database looks like follows.&lt;/p&gt;
&lt;table class=&quot;table table-striped&quot;&gt;
&lt;thead class=&quot;thead-dark&quot;&gt;&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;id&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;provider&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;source before the update&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;source after the update&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14369&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bio_diversity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14372&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bio_diversity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14375&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bio_diversity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14378&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bio_diversity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14382&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bio_diversity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;40784&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nasa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;47237&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nasa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;47242&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nasa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;47244&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nasa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;47245&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;flickr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nasa&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more information regarding the implementation, please refer to the following PR:
&lt;a href=&quot;https://github.com/creativecommons/cccatalog/pull/420&quot;&gt;https://github.com/creativecommons/cccatalog/pull/420&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h2&gt;&lt;p&gt;I express my gratitude to Brent Moran and Anna Tumadóttir for their assistance with my first task in GSoC 2020 by
helping me to filter the sub-providers of interest and conducting the necessary research.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-search-accessibility-week1-2/">
    <title type="text">CC Search, Setting up vue-i18n and internationalizing homepage</title>
    <id>urn:uuid:b6330fc6-4ba0-3d32-96cf-057eec67072a</id>
    <updated>2020-06-10T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-search-accessibility-week1-2/" />
    <author>
      <name>AyanChoudhary</name>
    </author>
    <content type="html">&lt;p&gt;These are the first two weeks of my internship with CC. I am working on improving the accessibility of cc-search and internationalizing it as well.
We started with first compiling the accessibility reports from accessibility insights, lighthouse and pa11y into a single document and then opening up appropriate issues ont he repo to address them.&lt;/p&gt;
&lt;p&gt;The accessibility issues are listed here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues/996&quot;&gt;Accessibility - Improve labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues/997&quot;&gt;Evaluate keyboard navigation effectiveness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues/998&quot;&gt;Fix color contrast problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues/999&quot;&gt;Improve elements markup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues/1000&quot;&gt;Evaluate any accessibility linter tools&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The decision was made to audit the tab indices along with internationalizing the page.
The accessibility changes will be done after the completion of internationalization as the aria-labels will have to be internationalized as well.&lt;/p&gt;
&lt;p&gt;The first two weeks involved setting up vue-i18n, auditing the tab index for homepage and internationalizing it.
The tab index adit for homepage is displayed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-accessibility-week1-2/audit.png&quot; alt=&quot;audit.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;The internationalization part was pretty straightforward, we just had to export all the strings to the JSON files and load transaltions through the i18n module.
For complex elements of the type &lt;code&gt;string &amp;lt;tag&amp;gt;string&amp;lt;/tag&amp;gt; string&lt;/code&gt; I went for the templating method.
Here we use the v-slot attribute of the i18n functional component to convert the element into a template where the tag occupies a slot in the syntax.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;i18n path=&quot;footer.caption.label&quot; tag=&quot;p&quot; class=&quot;caption&quot;&amp;gt;
    &amp;lt;template v-slot:noted&amp;gt;
        &amp;lt;a href=&quot;https://creativecommons.org/policies#license&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;{{$t('footer.caption.noted')}}&amp;lt;/a&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;template v-slot:attribution&amp;gt;
        &amp;lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;
        {{$t('footer.caption.attribution')}}
        &amp;lt;/a&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;template v-slot:icons&amp;gt;
        &amp;lt;a href=&quot;https://fontawesome.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;has-text-white&quot;&amp;gt;
        {{$t('footer.caption.icons')}}
        &amp;lt;/a&amp;gt;
    &amp;lt;/template&amp;gt;
&amp;lt;/i18n&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final outcome looks pretty good:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-accessibility-week1-2/final.png&quot; alt=&quot;final.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;And voila we are done with the first two weeks. I also internationalized the header and the footer along with the homepage.
You can track the work done for these weeks through these PRs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/1007&quot;&gt;setup internationalization plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/1013&quot;&gt;Internationalize homepage, header and footer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The progress of the project can be tracked on &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend&quot;&gt;cc-search&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CC Search Accessiblity is my GSoC 2020 project under the guidance of &lt;a href=&quot;https://opensource.creativecommons.org/blog/authors/akmadian/&quot;&gt;Ari Madian&lt;/a&gt;, who is the primary mentor for this project, &lt;a href=&quot;https://creativecommons.org/author/annacreativecommons-org/&quot;&gt;Anna Tumadóttir&lt;/a&gt; for helping all along and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/science-museum-implementation/">
    <title type="text">Science Museum provider implementation</title>
    <id>urn:uuid:7960ba6c-0bbb-300e-86d8-4744b9b0ee25</id>
    <updated>2020-06-10T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/science-museum-implementation/" />
    <author>
      <name>srinidhi</name>
    </author>
    <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;&lt;p&gt;CC catalog project is responsible for collecting CC licensed images available in the web,  CC licensed images are hosted by different
sources, these sources that provide the images and its metadata are called providers. Currently, images are collected from providers using two methods
Common Crawl and API based crawl. Common Crawl data is an open repository of web crawled data and we use that data to get the necessary image metadata 
for that provider &lt;a href=&quot;https://commoncrawl.org/the-data/get-started/&quot;&gt;more information&lt;/a&gt;. API crawl is implemented using the API endpoint maintained 
by the providers. The main problem with Common Crawl is that we don't have control over the data they crawl, and this sometimes results poor 
data quality whereas with API based crawl we have access to the information available. API based crawl is better when we need to update image
metadata and reqular intervals.&lt;/p&gt;
&lt;p&gt;As a part of the internship, I will be working on moving providers from Common Crawl to API based crawl as well as integrate new providers
to the API crawl. I will be starting with the Science Museum provider.&lt;/p&gt;
&lt;h2 id=&quot;science-museum&quot;&gt;Science Museum&lt;/h2&gt;&lt;p&gt;Science museum is a provider with around 80,000 CC licensed images, currently Science museum data is ingested from Common Crawl. 
Science museum is one such provider where our data is of poor quality and there is need to improve it. This is done by moving 
Science museum to an API based crawl.&lt;/p&gt;
&lt;h2 id=&quot;api-research&quot;&gt;API research&lt;/h2&gt;&lt;p&gt;We want to index metadata using their open API &lt;a href=&quot;https://collection.sciencemuseumgroup.org.uk/search/has_image/image_license&quot;&gt;endpoint&lt;/a&gt;. 
However, before the implementation we have to ensure that the API provides necessary content and there is a systematic way to get it.
The first step is to take an object from their collection and check certain criterias.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://collection.sciencemuseumgroup.org.uk/api/objects/co8005638&quot;&gt;sample object&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The criteria are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parameters available for the API&lt;/li&gt;
&lt;li&gt;Object landing url (frontend link of the object the image is associated with) &lt;/li&gt;
&lt;li&gt;Image url (the url link of the image)&lt;/li&gt;
&lt;li&gt;CC license associated with the image&lt;/li&gt;
&lt;li&gt;creator, title and other metadata info &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the above checks have been made, we need to find a way to get all the objects, this could be by paging through the records 
or partition using the parameters, etc. Since their API parameter has &lt;code&gt;page[number]&lt;/code&gt; paging would be an appropriate choice with  max size 
as 100 it would require around 800 pages to get all the objects but then since they don't allow paging a large number of results, and 
the max number of pages for Science Museum is 50 pages.This would mean we would get only 5000 objects and around 17000 images.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://collection.sciencemuseumgroup.org.uk/search/image_license?page[size]=100&amp;amp;page[number]=50&quot;&gt;API page-50&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://collection.sciencemuseumgroup.org.uk/search/image_license?page[size]=100&amp;amp;page[number]=51&quot;&gt;API page-51&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So we need to find a way to divide the collection into subsets such that each subset has less than or equal to 5000 objects.
Luckily, the API had another set of parameters &lt;code&gt;date[from]&lt;/code&gt; and &lt;code&gt;date[to]&lt;/code&gt; which represents the time period of the object. 
Querying the API through different time period at the same time ensuring that records in that time period don't exceed 5000 solves the problem, starting
from year 0 to year 2020 by trial and error method suitable year range was chosen.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                            YEAR_RANGE = [
                                                (0, 1500),
                                                (1500, 1750),
                                                (1750, 1825),
                                                (1825, 1850),
                                                (1850, 1875),
                                                (1875, 1900),
                                                (1900, 1915),
                                                (1915, 1940),
                                                (1940, 1965),
                                                (1965, 1990),
                                                (1990, 2020)
                                            ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this we have a method to ingest the desired records, but before writing the script we need to know the different licenses 
provided by the API.  We need to figure out a consistent way to identify which license and version are attached to each object.&lt;br&gt;
To do this, we ran a test script to get counts of objects under different licenses.&lt;/p&gt;
&lt;p&gt;The results are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+-----------------+----------+
| license_version | count(1) |
+-----------------+----------+
| CC-BY-NC-ND 2.0 |      210 |
| CC-BY-NC-ND 4.0 |     2376 |
| CC-BY-NC-SA 2.0 |        1 |
| CC-BY-NC-SA 4.0 |    61694 |
+-----------------+----------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the licenses and their versions are confirmed, we can start the implementation.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;&lt;p&gt;The implementation is quite simple in nature: we loop the through the &lt;code&gt;YEAR_RANGE&lt;/code&gt; and get all the records for that period and 
pass it on to an object data handler method that extracts the necessary details from the record and store it in the &lt;code&gt;ImageStore&lt;/code&gt;
instance. ImageStore is a class that stores image information from the provider, it stores the information in a buffer and inserts to tsv
when the buffer reached threshold limit. Due to overlapping date ranges, the metadata for some objects is collected multiple times.
So, we keep track of the record/object's id in a global variable &lt;code&gt;RECORD_IDS = []&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Within the object data handler method before collecting details we check if the &lt;code&gt;id&lt;/code&gt; already exists in &lt;code&gt;RECORD_IDS&lt;/code&gt;. 
If it exists we move on to the next record.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                            for obj_ in batch_data:
                                                id_ = obj_.get(&quot;id&quot;)
                                                if id_ in RECORD_IDS:
                                                    continue
                                                RECORD_IDS.append(id_)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;id_&lt;/code&gt; is the object id and we cannnot use this value as foreign identifier, the reason behind it is that an object could
have multiple images with it and using object id we cannot determine the image uniquely, so we must use image id that is unique
for each image. Currently image id is taken from &lt;code&gt;multimedia&lt;/code&gt;, multimedia is a field in the json response that lists multiple 
images and their metadata, for each image data in multimedia, foreign id is in &lt;code&gt;admin.uid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The implementation can be found &lt;a href=&quot;https://github.com/creativecommons/cccatalog/blob/master/src/cc_catalog_airflow/dags/provider_api_scripts/science_museum.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;results:&quot;&gt;Results:&lt;/h3&gt;&lt;p&gt;Running the scripts we get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number of records recieved : &lt;code&gt;35584&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Number of images collected : &lt;code&gt;62497&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with current implementation is that records with no date would be missed.&lt;/p&gt;
&lt;p&gt;Science Museum provider is the first provider I worked on as a part of the internship and thank my mentor Brent Moran for the help.&lt;/p&gt;
&lt;h3 id=&quot;additional-details-:&quot;&gt;Additional Details :&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog/issues/302&quot;&gt;research work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog/pull/400&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/resource-gathering/">
    <title type="text">Resource Gathering</title>
    <id>urn:uuid:1b4acbcb-fbab-372c-854f-833a05aafa23</id>
    <updated>2020-06-09T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/resource-gathering/" />
    <author>
      <name>dhruvi16</name>
    </author>
    <content type="html">&lt;p&gt;As an outreachy intern, I am handling the integration of &lt;a href=&quot;https://creativecommons.org/&quot;&gt;Creative Commons&lt;/a&gt; design library — &lt;a href=&quot;https://cc-vocabulary.netlify.app/&quot;&gt;Vocabulary&lt;/a&gt; with one of our web products — &lt;a href=&quot;https://opensource.creativecommons.org/&quot;&gt;CC OS&lt;/a&gt;. I have been working the design library for 3–4 months now and I have enjoyed the experience the library caters and I am trying to achieve the same experience in the Open source website. To understand UX in-depth, I have been reading different resources and document this knowledge through this series of blogs. This in-depth information will help me achieve the desired experience through the library.&lt;/p&gt;
&lt;p&gt;Using a Coursera course, &lt;a href=&quot;https://www.coursera.org/learn/user-experience-design/&quot;&gt;Introduction to user experience&lt;/a&gt;, I will be describing the UX design cycle with a series of articles and this article is about describing the first step of the design cycle which is Resource Gathering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic definitions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;User experience design includes designing interfaces through which a user accomplishes a task. Designing better interfaces which can help the user to perform tasks easily.&lt;/p&gt;
&lt;p&gt;The interface consists of an input and output through which the user interacts with the system. For instance, clicking a photo requires the user to press the button (input) and an image is the desired output. Creating an affordable and usable interface is the main goal of this process. Design is a data-driven process and resource gathering is all about gathering this data.&lt;/p&gt;
&lt;p&gt;The resource gathering process is about figuring out how the task is currently accomplished by the user. There are 4 ways to gather data and below I will describe them all in detail. There are two types of data — Quantitative (numeric) and Qualitative (thematic) and designers prefer to use both types of data as per requirement.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Naturalistic observation&lt;/strong&gt; - This includes observing the user accomplishing the task in the field. This involves the least interaction with the user and the designer watches the user performing the task from distance. The designer notes down qualitative and quantitative information about this activity. This removes the effect of social desirability of the user on the information collected but also the designer’s perception can be reflected in the collected data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Surveys&lt;/strong&gt; - A survey can be interchangeably used with a questionnaire. In a survey, the user answers a set of questions about how he/she performs the tasks currently. The questions can be closed-ended which can provide quantitative data and also open-ended which gives us the qualitative data. This involves some amount of interaction with the user. Surveys can be held in the field or lab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Focus Groups&lt;/strong&gt; - Focus groups are about engaging with a group of 6–10 people and talk about how they perform a task currently. This involves a lot of interaction with the users. This can be performed in a safe environment (lab) where users can open up without hesitation. The design team includes a moderator who can ask relevant questions, a note-taker who can note down the on-going conversation and a media person (optional) who can record video or take photos of the session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interview&lt;/strong&gt; - The interview involves asking questions to the user one-to-one about how they perform the task currently. This involves the highest amount of interaction with the user. Interviews are held in labs. The designer talks to the user about the task and collects both quantitative and qualitative data. This is the most time-taking way of collecting data but it gives the most useful data among all the methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/legal-database-design/">
    <title type="text">CC Legal Database: Design</title>
    <id>urn:uuid:b2a2a092-d722-34fb-bb65-9103c9b4ed48</id>
    <updated>2020-06-09T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/legal-database-design/" />
    <author>
      <name>krysal</name>
    </author>
    <content type="html">&lt;p&gt;Finishing the third week since the project started (for context see this &lt;a href=&quot;/blog/entries/legal-database-a-new-beginning/&quot;&gt;first post&lt;/a&gt;), so the design phase is almost over and a new site look is out of the oven. The focus on these weeks was to draw the mockups for the user-facing parts of the site, integrating styles of CC Vocabulary and to get the data model for the database.&lt;/p&gt;
&lt;h3 id=&quot;visual-styles&quot;&gt;Visual Styles&lt;/h3&gt;&lt;p&gt;The intention was to keep the content that is already present but improve its distribution and access by users. For this, the main menu was changed to provide direct links to listing of Cases and Scholarships. The old &quot;Countries&quot; page was removed and replaced by a more granular division by legal resource, so this data will be shown separately.&lt;/p&gt;
&lt;p&gt;The final look for the home site is as follows.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;cc-caselaw-home.png&quot; alt=&quot;New CC Caselaw Home Mockup&quot; style=&quot;border: 1px solid black&quot;&gt;
        &lt;figcaption&gt;New Home page design with Vocabulary.&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;I made use of as many Vocabulary components as possible, like header, footer and table. This way is easier to keep consistency between CC products and to develop the frontend part of the site because those components are already built and tested, though some will require certain modifications (e.g. card link with a search input), and some others have to be created from scratch, like a pagination component that is actually now required for two sites.&lt;/p&gt;
&lt;h3 id=&quot;data-model&quot;&gt;Data Model&lt;/h3&gt;&lt;p&gt;The second main task I worked on was coding the models on Django, which is in charge of creating the database schema through migrations. For this, I had to review the sources of information (CSV files, sheets, forms) and how they are used. The key point here is to keep constant communication with staff who are more involved in the &lt;em&gt;business case&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Several iterations were required for each task as well as some researching, and while the engineering and design work never seems to end, this makes good foundations to continue and advance.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-upcoming-improvements/">
    <title type="text">Upcoming improvements/features in CC Search Extension</title>
    <id>urn:uuid:cdf59a68-68ac-36b4-85c8-a19bb2848f33</id>
    <updated>2020-06-01T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-upcoming-improvements/" />
    <author>
      <name>makkoncept</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://opensource.creativecommons.org/ccsearch-browser-extension/&quot;&gt;CC Search Extension&lt;/a&gt; is a cross-browser extension, which lets you search for and filter content that is under Creative Commons licenses. It was developed as one of the CC projects during Google Summer of Code program of 2019.&lt;/p&gt;
&lt;h3 id=&quot;the-story-so-far&quot;&gt;The story so far&lt;/h3&gt;&lt;p&gt;It's release on the extension stores of &lt;a href=&quot;https://chrome.google.com/webstore/detail/cc-search-browser-extensi/agohkbfananbebiaphblgcfhcclklfnh&quot;&gt;Chrome&lt;/a&gt;, &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/cc-search-extension/&quot;&gt;Firefox&lt;/a&gt;, and &lt;a href=&quot;https://addons.opera.com/en/extensions/details/cc-search/&quot;&gt;Opera&lt;/a&gt; was accompanied by several announcements on twitter, which were well received by the community and thus the number of weekly users (i.e the number of users that have used the extension at least once during last week) drastically increased. After several weeks, the extension reached 22,000+ weekly users. But, now this number fluctuates between 9,000 - 10,000. So, what happened? Well, the majority of initial influx were the &quot;curious&quot; folks who just wanted to check out this new tool and later thought that this was not something that they might find useful. But, there are also users that are looking for a similar tool and the lack of sufficient features and capabilities of the extension made them stop using it and look for better alternatives.&lt;/p&gt;
&lt;h3 id=&quot;what-s-the-plan&quot;&gt;What's the plan&lt;/h3&gt;&lt;p&gt;The plan is to transform the extension to become competent enough to contribute to the user's workflow and be an important part of their toolkit. This will be done by adding valuable new features in addition to other enhancements and improvements.&lt;/p&gt;
&lt;p&gt;In this section, I will list several improvements and features that will be added to the extension during the upcoming months.&lt;/p&gt;
&lt;h4 id=&quot;new-filters&quot;&gt;New Filters&lt;/h4&gt;&lt;p&gt;The extension, currently supports only 3 filters: &lt;code&gt;license&lt;/code&gt;, &lt;code&gt;sources&lt;/code&gt;, and &lt;code&gt;use case&lt;/code&gt;. The support for new filters like &lt;code&gt;image type&lt;/code&gt;, &lt;code&gt;file type&lt;/code&gt;, &lt;code&gt;aspect ratio&lt;/code&gt;,  and &lt;code&gt;image size&lt;/code&gt; will be added. This will give more options to the users and let them be more specific about the content they want.&lt;/p&gt;
&lt;h4 id=&quot;related-images-and-image-tags&quot;&gt;Related Images and Image tags&lt;/h4&gt;&lt;p&gt;Showing related Images will help users find a variety of images that fit their requirements and also explore the images that would not usally show up on the initial pages of the search result. Whereas, Image tags will let the users incrementally make their queries better and more specific.&lt;/p&gt;
&lt;h4 id=&quot;adding-browse-by-sources-section&quot;&gt;Adding &quot;Browse by Sources&quot; section&lt;/h4&gt;&lt;p&gt;Even though the users can see the number of sources supported by the extension from the drop-down filter, they might not be familiar with many of them and what kind of content they provide. Adding a &quot;Browse by Source&quot; section would make users appreciate the sources available for them to choose from.&lt;/p&gt;
&lt;h4 id=&quot;improving-the-bookmarks-section&quot;&gt;Improving the bookmarks section&lt;/h4&gt;&lt;p&gt;Significant improvements will be made to the bookmarks section. First of all, the bookmarks data will be cached so that unnecessary requests to the Catalog API can be avoided. The bookmarks will be organized by the dates and this will also facilitate adding some type of filter mechanism. In addition to this, pagination in the bookmarks section and support for named bookmark file exports will be added&lt;/p&gt;
&lt;h4 id=&quot;syncing-as-much-data-as-possible&quot;&gt;Syncing as much data as possible&lt;/h4&gt;&lt;p&gt;An effort will be made to sync as much extension data as possible between the user's system. Syncing the user's preference/settings will ensure a familiar experience across systems and syncing the bookmarks data and the previous session search results would make them feel like they are continuing from where they left.&lt;/p&gt;
&lt;h4 id=&quot;integrating-cc-vocabulary&quot;&gt;Integrating CC Vocabulary&lt;/h4&gt;&lt;p&gt;The extension uses a very outdated version of CC Vocabulary. It will be replaced by the latest version for a refreshing new look.&lt;/p&gt;
&lt;h4 id=&quot;adding-support-for-microsoft-edge&quot;&gt;Adding support for Microsoft Edge&lt;/h4&gt;&lt;p&gt;The new Microsoft Edge browser is based on chromium. This paves the way to add support for it thanks to the power and flexibility of the WebExtension API. This will then allow us to also officially release on the &lt;a href=&quot;https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home&quot;&gt;Microsoft Edge Addon Store&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;join-the-discussion&quot;&gt;Join the discussion&lt;/h3&gt;&lt;p&gt;If you have any feedback/suggestions or just want to say hi,  please join the &lt;code&gt;#cc-dev-browser-extension&lt;/code&gt; channel on &lt;a href=&quot;https://opensource.creativecommons.org/community/#slack&quot;&gt;slack&lt;/a&gt;. You can also track the progress on the project's &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;Github&lt;/a&gt; Repository.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/legal-database-a-new-beginning/">
    <title type="text">CC Legal Database: a new beginning</title>
    <id>urn:uuid:0ca867d0-f061-3202-9da4-7e89977781ce</id>
    <updated>2020-05-22T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/legal-database-a-new-beginning/" />
    <author>
      <name>krysal</name>
    </author>
    <content type="html">&lt;p&gt;CC maintains a collection of case law and legal scholarship relevant to legal issues around Creative Commons licenses. The CC Legal Database system gathers and exposes this information for everybody, as anyone can submit information, this aims to help understanding how CC legal tools have been interpreted by courts, and how they operate the larger legal ecosystem.&lt;/p&gt;
&lt;p&gt;The current &lt;a href=&quot;https://labs.creativecommons.org/caselaw/&quot;&gt;site&lt;/a&gt; is a beta version built on Jekyll, a static site generator, using Google forms and spreadsheets as database. This system has served its purpose, but it's time to modernize it since there are several issues we want to fix, mainly related to the automation of review and publication process, as for the visual styles, CC is doing a major redesign of websites with &lt;a href=&quot;https://cc-vocabulary.netlify.com/&quot;&gt;Vocabulary&lt;/a&gt;, the new design system, to unify the user experience.&lt;/p&gt;
&lt;p&gt;The process for collecting the information is decoupled into loose spreadsheets, some Google forms, and its publication is a cumbersome manual process for two teams involved, the Legal Team that have to review the incoming data and edit it if necessary, and the Tech Team which is the one that actually publishes. This is prone to human errors (e.g. missing a column entry for one row) that can be easily avoided as well as save time to both CC teams.&lt;/p&gt;
&lt;p&gt;This project, Reimplement CC’s Legal Database using Django, aims to address all these main issues, automate the reviewing and publication process, empowering CC legal staff to manage all the workflow without the intervention of the tech team, and make use of Vocabulary components and guides to unify styles with the rest of Creative Commons products.&lt;/p&gt;
&lt;h3 id=&quot;design&quot;&gt;Design&lt;/h3&gt;&lt;p&gt;First task in the plan is to design the user-facing parts of the new website on Figma, this tool allows to easily draw on the browser (great for start quickly since no need to install a program in your PC) and even collaborate between peers to edit one document at the same time. CC keeps here the Vocabulary design library, so it facilitates a lot using the already existing components.&lt;/p&gt;
&lt;p&gt;You can find designs and follow the process in this Figma link: &lt;a href=&quot;https://www.figma.com/file/L2sACqzX61N2OMd5lmisop/New-CC-Caselaw-Mockups&quot;&gt;New CC Caselaw Mockups&lt;/a&gt;. A new logo was made by the UX designer Francisco, with this the project start feeling like a consistent product of CC.&lt;/p&gt;
&lt;div style=&quot;text-align: center; margin: 15px 0px&quot;&gt;
&lt;figure&gt;
    &lt;img src=&quot;legal_database.svg&quot; alt=&quot;New Creative Commons Legal Database logo&quot; width=&quot;350px&quot;/&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;!-- ![New Creative Commons Legal Database logo](legal_database.svg) --&gt;

&lt;h3 id=&quot;why-django?&quot;&gt;Why Django?&lt;/h3&gt;&lt;p&gt;Before I briefly mentioned the use of Django, a framework of Python, for the implementation, so I will state some reasons that led to this decision.&lt;/p&gt;
&lt;p&gt;Two options were given for the backend development: WordPress or Django. WordPress is a nice tool to build sites like blogs and e-commerce, it gives a lot of functionalities to end-users (usually not technical) out of the box and can be extended with a wide ecosystem of plugins, but I identified some cons for this particular case. It will bring many not necessary features to the system initially planned and will take considerable work to customize both, the frontend with Vocabulary and the database in the backend. Building a Wordpress theme with Vocabulary was already considered for another project apart, so that should be done first. As for the DB,  deal with Wordpress tables may not be the best developer experience and could be a real mess.&lt;/p&gt;
&lt;p&gt;Looking at Django with Python, we can start in a greenfield ready to customize, like Wordpress, is a mature technology with a large number of libraries to extend its functionalities. For maintenance, the engineering team will be responsible and since Django is already used to back the &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt;, currently the most ambitious products of the organization, then there should be no problem with this point. Given all this it seemed obvious to me to choose Django for this project.&lt;/p&gt;
&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;&lt;p&gt;It has only been a week so we're just starting, so next task to do sooner are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conduct interview with staff to iterate over designs&lt;/li&gt;
&lt;li&gt;Setup the Django project&lt;/li&gt;
&lt;li&gt;Model the legal database&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-you-can-help&quot;&gt;How you can help&lt;/h3&gt;&lt;p&gt;We are still discussing the new image before start coding so these are some options if you want to get involved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suggest improvements to designs/UX or new features joining the discussion on the &lt;a href=&quot;https://creativecommons.slack.com/channels/cc-dev-legal-database&quot;&gt;&lt;code&gt;#cc-dev-legal-database&lt;/code&gt;&lt;/a&gt; Slack channel or on the &lt;a href=&quot;https://github.com/creativecommons/caselaw&quot;&gt;github&lt;/a&gt; project.&lt;/li&gt;
&lt;li&gt;Contribute directly to the CC's Vocabulary design system on &lt;a href=&quot;https://github.com/creativecommons/vocabulary&quot;&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Submit a case or a scholarship related to CC licenses on the &lt;a href=&quot;https://labs.creativecommons.org/caselaw/contribute/&quot;&gt;current site&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CC Legal Database&lt;/strong&gt; is my Outreachy project for this summer, under the guidance of Director of Engineering &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti Godey&lt;/a&gt; and Core Systems Manager &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid Robot Zehta&lt;/a&gt;, they are very supportive and the CC community is notable welcoming.&lt;/p&gt;
&lt;p&gt;This is the first post of a series so stay tuned if you're interested to know more.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/takeaways-from-my-FOSS-journey/">
    <title type="text">Takeaways from my FOSS journey!</title>
    <id>urn:uuid:21536df2-1436-3e06-8262-8e5d2c91e01c</id>
    <updated>2020-05-22T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/takeaways-from-my-FOSS-journey/" />
    <author>
      <name>dhruvi16</name>
    </author>
    <content type="html">&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;cover.jpg&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        &lt;a href=&quot;https://www.flickr.com/photos/60255995@N04/14774214687&quot;&gt;&quot;Sky at night&quot;&lt;/a&gt; by &lt;a href=&quot;https://www.flickr.com/photos/60255995@N04&quot;&gt;Rychu92&lt;/a&gt; is licensed under &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/2.0/?ref=ccsearch&amp;atype=rich&quot;&gt;CC BY-SA 2.0&lt;/a&gt;
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;First let me introduce myself because of course I am not a very famous blogger or writer.&lt;/p&gt;
&lt;p&gt;I am Dhruvi. I am a third-year undergrad student. I am a designer/developer and also a FOSS enthusiast. I started my opensource journey a year ago (that is around Feb ’19) and now here I am starting my Outreachy internship with this blog (not literally of course). I am consistent, curious, and creative, and below I will tell you how these three C’s have helped me through my journey.&lt;/p&gt;
&lt;p&gt;Below are the four things that I think might be the ‘takeaways’ from my experience -&lt;/p&gt;
&lt;h3 id=&quot;now-is-the-time&quot;&gt;NOW is the time -&lt;/h3&gt;&lt;p&gt;There is no better time than now! Let’s accept the fact that most of the students wait for “the time” to start with opensource as most of us want to get into programs like GSoC, Outreachy, and many more. But I figured it is very necessary to know that whether you are interested in opensource or is it only the big internships attracting you. So, to get these answers, you need to explore, and to explore I suggest you start today. I am very fond of asking myself the question ‘Why?’ and to answer those questions I explore, I invest time. So start finding answers to your whys? today.&lt;/p&gt;
&lt;h3 id=&quot;start-slow&quot;&gt;Start SLOW -&lt;/h3&gt;&lt;p&gt;For me the start was a little overwhelming and that made me push it away. And to avoid that I tried starting small and slow. By small and slow, I mean try the easy things first, like getting aware of the logistics. Personally, general practices or set of rules calm me down when I try to get into some uncomfortable zones. And yes opensource was not a very comfortable zone for me in the beginning (I mean what is *wink). To keep myself motivated, I started with familiar things like contributing to familiar projects or familiar good first issues (the easy ones). Completing a task or two gave me a lot of confidence and made me stick around.&lt;/p&gt;
&lt;h3 id=&quot;choose-wisely&quot;&gt;Choose WISELY -&lt;/h3&gt;&lt;p&gt;After playing around for some time and getting familiar with the logistics, I went for a project hunt. I listed my areas of interest and areas which seemed exciting to me. Using those filters I found some amazing projects which were actively being worked on. I got my answers to why would I want to work on these projects? by working on them. I believe if you are interested the motivation will be natural. With some projects, I felt connected and I did not feel the need of pushing myself for contributing to them. My only advice for making a wise choice is that “Don’t push yourself too hard”!&lt;/p&gt;
&lt;h3 id=&quot;speak-through-your-work&quot;&gt;Speak through your WORK -&lt;/h3&gt;&lt;p&gt;When I was sure, I wanted to work on a particular project I started getting familiar with the community (the specifics). I got familiar with the ideas and agendas the community had behind the projects. And fortunately, I got to work with the most amazing and inspiring people who helped me when I was stuck and I plan to keep working with them. I kept doing a few things which I guess might be worth mentioning -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Try to write the most appropriate and relevant code.&lt;/li&gt;
&lt;li&gt;Try to break the solution into small understandable parts.&lt;/li&gt;
&lt;li&gt;Try to take initiatives. Small initiatives like opening issues will also work (Yes! opening relevant and meaningful issues is an initiative.).&lt;/li&gt;
&lt;li&gt;Know when to ask for help from the community (I am still working on this).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I know this was not an article full of resources and tips to get into Outreachy or GSoC but I just wanted to communicate that students should see that opensource is a broader concept. I wanted to share a personal take and help the beginners with my own experience. Thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-search-accessibility-and-internationalization/">
    <title type="text">CC Search, Proposal Drafting and Community Bonding</title>
    <id>urn:uuid:e9ce22b5-b66a-37f1-a59b-aa5419b7d5c5</id>
    <updated>2020-05-22T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-search-accessibility-and-internationalization/" />
    <author>
      <name>AyanChoudhary</name>
    </author>
    <content type="html">&lt;h3 id=&quot;proposal-drafting&quot;&gt;Proposal Drafting&lt;/h3&gt;&lt;p&gt;The majority of my time in March was spent on drafting the proposal for my project &lt;strong&gt;Improve CC Search Accessibility&lt;/strong&gt;.
While drafting my proposal I had two broad topic that I had to focus on: Accessibility and Internationalization.&lt;/p&gt;
&lt;p&gt;So the first thing which I did was go through the various resources available with me such as w3 guidelines for accessibility, dequeuniversity accessibility insights and MDN notes on accessibility.
After I made myself acquainted myself wih all of these, the next challenge was to sort out which of the metrics were relevant and important enough to be detailed in the proposal and also some of the others metrics which made notable appearances.
Finally by including all of these I had the accessibility part of my proposal complete. Next, I had to work out the part for internationalization. Since it was already decided upon that we will be using vue-i18n, I did some research as to how to we can leverage it to gain the best possible result.&lt;/p&gt;
&lt;p&gt;One of the important parts of internationalization happens to be deciding upon the JSON structure which was a highlighted section in my proposal.
The other notable sections included strategies for modification of templates while translating and also how the translations would be carried out without hindering any further development of the platform.&lt;/p&gt;
&lt;h3 id=&quot;community-bonding&quot;&gt;Community Bonding&lt;/h3&gt;&lt;p&gt;Community Bonding involved getting to the mentors and the people whom I will be working with during this internship. Also we decided upon running the audit tests for the cc-search website during this time as it would help identify the key issues we would be facing and also would provide a suitable foundation to start working upon.
The audits were done using Lighthouse, Accessibility Insights and pa11y and they provided useful insights on which parts of the website we should be focusing on such as the contrast issues and the aria-label fixes.&lt;/p&gt;
&lt;p&gt;Coming up next will be the progress on the first 2 weeks of the project.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-outcomes/">
    <title type="text">Improving CC License Chooser: Outcomes</title>
    <id>urn:uuid:bb5e2374-647f-389c-b535-0fb44d4a3608</id>
    <updated>2020-05-21T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-outcomes/" />
    <author>
      <name>obulat</name>
    </author>
    <content type="html">&lt;p&gt;During the three months of my Outreachy internship, I worked on improving the new version of the chooser to make it ready for production. You can view the result at &lt;a href=&quot;https://chooser-beta.creativecommons.org/&quot;&gt;chooser-beta.creativecommons.org&lt;/a&gt;. (Don't forget to leave your feedback!). We've gone through iterations of design, implementation and user experience testing.&lt;/p&gt;
&lt;h3 id=&quot;technical-details&quot;&gt;Technical details&lt;/h3&gt;&lt;p&gt;I implemented a couple of versions of design in line with the insights we've got from UX testing. Francisco Vera created the final design, and I &lt;em&gt;converted  the Figma design into a VueJS app&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I created custom components for the stepper, and used &lt;a href=&quot;https://buefy.org/&quot;&gt;Buefy&lt;/a&gt; components for more common elements, and &lt;a href=&quot;https://fortawesome.com/&quot;&gt;Fortawesome&lt;/a&gt; library for icons. The downsize of this convenience was a huge bundle size. I performed analysis with &lt;code&gt;webpack-bundle-analyzer&lt;/code&gt; and after several rounds of tree shaking, managed to &lt;strong&gt;reduce the size of the bundle almost by half&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The license chooser has to keep data about the license properties that the user selects and display any changes on screen. Previously, all data for selected license was passed to components using props. So, when a user added, say,  a 'NonCommercial' clause to their license, or typed in the link to which the work should be attributed, the data was passed through props to the components that displayed the result. This created chains of props passing that were brittle. To make the process more robust, I &lt;strong&gt;added Vuex store&lt;/strong&gt; to keep the data that is necessary for more than one component.&lt;/p&gt;
&lt;p&gt;To make chooser accessible for all of our wide multilingual community, I &lt;strong&gt;integrated the vue-i18n plugin&lt;/strong&gt;, and made all of the text translatable.  Together with Kriti, we added &lt;strong&gt;Transifex integration&lt;/strong&gt; so that the text translation can be crowdsourced.&lt;/p&gt;
&lt;p&gt;I've also updated the code from using Vue webpack templates to &lt;strong&gt;Vue CLI&lt;/strong&gt;, and added &lt;strong&gt;Github hooks&lt;/strong&gt; to test the code before merging any new pull requests. &lt;strong&gt;Google analytics integration&lt;/strong&gt; will help us continue improving the chooser.&lt;/p&gt;
&lt;p&gt;After all of this work, I was really excited to be the person to deploy the new chooser to github pages. And redeploy it many more times after that :)&lt;/p&gt;
&lt;h3 id=&quot;working-remotely&quot;&gt;Working remotely&lt;/h3&gt;&lt;p&gt;It has been a great experience to work remotely, before the time of global coronavirus lockdowns when everyone has started to work from home.&lt;/p&gt;
&lt;p&gt;What helped me during this time is the weekly meetings we had with other members of CC team. This made me feel a part of the team, plan and implement the work I needed to do, and stay on track.&lt;/p&gt;
&lt;p&gt;Working remotely also let me have a flexible work schedule. While ensuring that I work at least 40 hours per week (the Outreachy internship requirement), I sometimes worked on weekends or early in the morning, when it was more convenient for me.&lt;/p&gt;
&lt;h3 id=&quot;working-together&quot;&gt;Working together&lt;/h3&gt;&lt;p&gt;It's been a pleasure to work with Creative Commons team. My mentors, &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti&lt;/a&gt; and &lt;a href=&quot;https://opensource.creativecommons.org/blog/authors/akmadian/&quot;&gt;Ari&lt;/a&gt;, together with &lt;a href=&quot;https://creativecommons.org/author/annacreativecommons-org/&quot;&gt;Anna&lt;/a&gt;, Francisco Vera and &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno&lt;/a&gt;, were there for me all through the internship, help me feel a part of CC team.&lt;/p&gt;
&lt;p&gt;But the CC community is much wider than that! I've been amazed at the enthusiasm of the users who helped us with the UX testing, and at the speed with which they jumped on the task of translating the website as soon as we published the text on Transifex.&lt;/p&gt;
&lt;h3 id=&quot;what-s-next?&quot;&gt;What's next?&lt;/h3&gt;&lt;p&gt;My internship ended more than two months ago, but I continue to be a part of CC open source team. I also hope this experience will help me go on to a career as a developer.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/why-lektor/">
    <title type="text">Why Lektor?</title>
    <id>urn:uuid:2cec5ffc-29a4-3c29-ac42-e928118f3be7</id>
    <updated>2020-05-15T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/why-lektor/" />
    <author>
      <name>dhruvi16</name>
    </author>
    <content type="html">&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;cover.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        why?why?why? &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;(CC0 1.0)&lt;/a&gt;
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;I wrote this article while prepping for my Outreachy internship. I was trying to find out why Lektor is being used for the project and found out really convincing reasons for the same.&lt;/p&gt;
&lt;p&gt;Let’s start with basic types of website -&lt;/p&gt;
&lt;p&gt;Static website: Here the webpages are pre-loaded to the server and when the request is made, these pages are served to the client as it is. These webpages can use HTML, CSS, and Javascript. By static, it does not mean that these webpages are devoid of user interactivity. These pages can be highly reactive (because of course JS) but yes they are not generated on the server and are static in that manner.&lt;/p&gt;
&lt;p&gt;Dynamic website: Here the webpages are generated by the server. It is connected to a database and all the data is fetched from there. It uses server-side scripting and also client-side scripting (if necessary). It is called dynamic because the webpages are processed by the server.&lt;/p&gt;
&lt;p&gt;So why go static? — Because the vast, vast majority of websites will be read many more times than they will be updated. This is crucial because dynamic content does not come for free. It needs server resources and because program code is running there it needs to be kept up to date to ensure there are no security problems that are left unpatched. Also when a website gets a sudden spike of traffic a static website will stay up for longer on the same server than a dynamic one that needs to execute code.&lt;/p&gt;
&lt;p&gt;There are certain drawbacks of static websites we are going to focus on here and how Lektor helps us to combat those.&lt;/p&gt;
&lt;p&gt;Drawbacks -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Multi-page websites are really hard to manage — Updating the content can be a cumbersome task here.&lt;/li&gt;
&lt;li&gt;Lack of dynamic content.&lt;/li&gt;
&lt;li&gt;Unavailability of the admin side of the website — This makes hard for non-technical people to edit the website.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lektor helps to combat all the shortcomings listed above. It is built using Node.js and Python and is very easy to understand and use.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first drawback has a very common solution that is templates. Lektor has a file structure that consists of — content, models, and templates. This structure helps us to manage multi-page websites without any cumbersome copy-pasting.&lt;/li&gt;
&lt;li&gt;This drawback can be overcome by using external services or in house micro-services. These services can easily be integrated into your Lektor project. This will save time and give efficient results.&lt;/li&gt;
&lt;li&gt;This is the most amazing thing that Lektor does. Combating this shortcoming makes Lektor stand out. Lektor takes from content management systems like WordPress and provides a flexible browser-based admin interface from which you can edit your website’s contents. Unlike traditional CMS solutions, however, it runs entirely on your computer. This means you can give a Lektor website to people that have no understanding of programming and they can still modify the content and update the website.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Due to such capabilities, I find this framework amazing and I am excited about using it. Though there are many points untouched in this blog I would try to write a more in-depth blog when I learn about it more during my internship.&lt;/p&gt;
&lt;p&gt;Credits — This blog is inspired by &lt;a href=&quot;https://2016.ploneconf.org/talks/static-websites-with-lektor.html&quot;&gt;Static websites with Lektor&lt;/a&gt; and also for more details you can check out &lt;a href=&quot;https://www.getlektor.com/&quot;&gt;Lektorpython&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/date-partitioned-data-reingestion/">
    <title type="text">Date-Partitioned Data Reingestion</title>
    <id>urn:uuid:33f5a94f-2510-3c9f-95ad-460fe82c9b1f</id>
    <updated>2020-05-14T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/date-partitioned-data-reingestion/" />
    <author>
      <name>mathemancer</name>
    </author>
    <content type="html">&lt;p&gt;CC Catalog is a project that gathers information about images from around the
internet, and stores the information so that these images can eventually be
indexed in &lt;a href=&quot;https://ccsearch.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt;. A portion of the process is directed by
&lt;a href=&quot;https://airflow.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt;, which is a tool commonly used to organize workflows
and data pipelines.&lt;/p&gt;
&lt;p&gt;In this blog post, we will explore the way in which we keep information we
gather about images up-to-date, using metadata pulled from the Flickr API as an
example case study.&lt;/p&gt;
&lt;h2 id=&quot;apache-airflow-and-the-execution_date-concept&quot;&gt;Apache Airflow, and the &lt;code&gt;execution_date&lt;/code&gt; concept&lt;/h2&gt;&lt;p&gt;Apache Airflow is open source software that loads Directed Acyclic Graphs (DAGs)
defined via python files. The DAG is what defines a given workflow. The nodes
are pieces of jobs that need to be accomplished, and the directed edges of the
graph define dependencies between the various pieces.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://airflow.apache.org/docs/1.10.9/concepts.html#dag-runs&quot;&gt;DAG Run&lt;/a&gt; is an 'execution' of the overall workflow defined by
the DAG, and is associated with an &lt;code&gt;execution_date&lt;/code&gt;.  Contrary to what one might
expect, &lt;code&gt;execution_date&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; mean the date when the workflow is executed,
but rather the date 'perspective' from which the workflow is executed.  This
means one can give a command that instructs Airflow to execute the workflow
defined by a DAG as if the date were 2019-01-01, regardless of the actual date.&lt;/p&gt;
&lt;h2 id=&quot;our-use-of-execution_date&quot;&gt;Our Use of &lt;code&gt;execution_date&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Much of the data contained in CC Catalog is pulled from various APIs on the
internet, and one strategy we use quite regularly is to make a request of the
form:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&quot;please give me all the metadata for photos uploaded to Flickr on 2019-01-01&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Since we're often requesting metadata about user-sourced content on 3rd-party
sites, some sort of &lt;code&gt;date_uploaded&lt;/code&gt; parameter is often available for filtering
results in the API provided by the 3rd-party site.  This allows us to partition
large data-sets into more manageable pieces.  It also leads naturally to the
strategy of requesting metadata for yesterday's photos, each day:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&quot;please give me all the metadata for photos uploaded to Flickr &lt;strong&gt;yesterday&lt;/strong&gt;&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Doing this each day lets us keep the metadata in our catalog synced with the
upstream source (i.e., the Flickr API). This is where the &lt;code&gt;execution_date&lt;/code&gt;
concept comes in. By default, a workflow which is scheduled to run daily uses
the previous day's date as its &lt;code&gt;execution_date&lt;/code&gt;, and so an execution that
happens on the actual date 2020-02-02 will have &lt;code&gt;execution_date&lt;/code&gt; 2020-02-01 by
default. This matches up naturally with the strategy above, so we have a number
of workflows that ingest (meta)data into CC Catalog using this default
&lt;code&gt;execution_date&lt;/code&gt; on a daily basis.&lt;/p&gt;
&lt;h2 id=&quot;challenge:-data-can-go-stale-over-time&quot;&gt;Challenge:  Data can go stale over time&lt;/h2&gt;&lt;p&gt;There are some problems with the strategy outlined above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if a photo changes upstream?&lt;/li&gt;
&lt;li&gt;What if a photo is deleted upstream?&lt;/li&gt;
&lt;li&gt;What about metadata that changes over time (e.g., 'views')?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given we're only ingesting metadata about photos the day after they're uploaded,
we won't be able to capture the relevant data for any of these situations.  So,
we need to reingest the metadata for images on some schedule over time.&lt;/p&gt;
&lt;h2 id=&quot;reingestion-schedule&quot;&gt;Reingestion Schedule&lt;/h2&gt;&lt;p&gt;We would prefer to reingest the metadata for newer images more frequently, and
the metadata for older images less frequently. This is because we assume the
metadata for newer images will be updated at the source in more interesting ways
when the image is newer. For example, assume a picture is viewed 100 times per
month.&lt;/p&gt;
&lt;table class=&quot;table table-striped&quot;&gt;
&lt;thead class=&quot;thead-dark&quot;&gt;&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;month&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;total views&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;% increase&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   1&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;100&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;infinite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   2&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;200&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;100% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   3&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;300&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;50% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   4&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;400&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;33% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   5&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;500&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;25% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   6&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;600&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;20% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   7&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;700&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;17% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   8&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;800&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;14% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;   9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;900&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;13% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;  10&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1000&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;11% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;  11&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1100&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;10% &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;  12&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1200&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;9% &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we see, given consistent monthly views, the 'percent increase' of the total
views metric drops off as the picture ages (In reality, it appears that in most
cases, pictures are mostly viewed when they are new).&lt;/p&gt;
&lt;p&gt;Thus, it makes sense to focus more on keeping the information up-to-date for the
most recently uploaded images.&lt;/p&gt;
&lt;h3 id=&quot;real-numbers-for-flickr&quot;&gt;Real numbers for Flickr&lt;/h3&gt;&lt;p&gt;For Flickr, in the worst case, we can ingest about 100 dates' worth of uploaded
image metadata per day. This was calculated using the year 2016 as an example.
Because 2016 was around the peak for the number of images uploaded to Flickr per
day, the actual number if dates' worth of metadata we can ingest per day is
quite a bit higher, perhaps 150.&lt;/p&gt;
&lt;p&gt;We'll need to choose around 150 dates for each daily run, and reingest the
metadata for all images uploaded on each of those dates.  We want to choose
those dates preferring newer images (for the reasons outlined above), and choose
them so that if we follow the same date-choosing algorithm each daily run, we'll
eventually reingest the metadata for &lt;em&gt;all&lt;/em&gt; images on some predictable schedule.&lt;/p&gt;
&lt;h3 id=&quot;strategy-to-choose-which-dates-to-reingest&quot;&gt;Strategy to choose which dates to reingest&lt;/h3&gt;&lt;p&gt;Assume we'll reingest metadata from some number &lt;code&gt;n&lt;/code&gt; of dates on each daily run.
We set some maximum number of days &lt;code&gt;D&lt;/code&gt; we're willing to wait between reingestion
of the data for a given image, subject to the constraint that we need to have
&lt;code&gt;n * D &amp;gt; T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the total number of dates for which data exists. For
Flickr, there's (at the time of this writing) about 6,000 days for which image
metadata was uploaded. If we set&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n = 150&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;D = 180&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;then we have &lt;code&gt;n * D = 150 * 180 = 27,000 &amp;gt; 6,000&lt;/code&gt;, as desired.  In fact, there
is quite a bit of slack in this calculation. Keep in mind, however, that we add
one date's worth of metadata as each day passes in real time.  Thus, we want to
keep some slack here. One option would be to reingest the metadata for each
image every 90 days, rather than every 180. This would still leave some slack,
and we'd have generally fresher data.  This means that on each day, we'd ingest
metadata for photos uploaded on that date, as well as metadata for photos
uploaded&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;90, 180, 270, 360, ..., 13320, or 13410 days prior to the current date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is better, but 90 days is still quite a long time to wait to reingest
metadata for a recently-uploaded photo. So, it'd be better to use the slack
available to reingest metadata for recently-uploaded photos more often, and back
off smoothly to reingest metadata for the oldest photos only once every 180
days. We ended up using a schedule where we ingest metadata for photos uploaded
on the current &lt;code&gt;execution_date&lt;/code&gt;, as well as metadata for photos uploaded&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1, 2, ..., 6, or 7 days prior;&lt;/li&gt;
&lt;li&gt;14, 21, ..., 84, or 91 days prior;&lt;/li&gt;
&lt;li&gt;106, 121, ..., 376, or 391 days prior;&lt;/li&gt;
&lt;li&gt;421, 451, ..., 1081, or 1111 days prior;&lt;/li&gt;
&lt;li&gt;1201, 1291, ..., 3181, or 3271 days prior; and&lt;/li&gt;
&lt;li&gt;3451, 3631, ..., 10291, or 10471 days prior.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lists can be generated using the following snippet:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_reingestion_day_list_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get_reingestion_day_list_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function creates a list of lists of integers based on input pairs
describing which prior dates to ingest. An approximate interpretation of the
input pairs in this example would be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingest data which is at most a week old daily.&lt;/li&gt;
&lt;li&gt;Ingest data which is between a week and three months old weekly.&lt;/li&gt;
&lt;li&gt;Ingest data which is between three months and a year old biweekly.&lt;/li&gt;
&lt;li&gt;Ingest data which is between one and three years old monthly.&lt;/li&gt;
&lt;li&gt;Ingest data which is between three and nine years old every three
months.&lt;/li&gt;
&lt;li&gt;Ingest data which is between nine and twenty-eight years old every six months.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The astute reader will notice that these lists only define 128 dates (including
the current date) for which metadata should be reingested.  We prefer to be a
bit conservative on the total amount we plan to ingest per day, since things can
happen that put the ingestion workflow DAG out of service for some time on
occasion.&lt;/p&gt;
&lt;p&gt;So, using this strategy, we ensure that all metadata is updated at least every 6
months, with a preference towards metadata about images uploaded recently.
Because this schedule covers about 28.7 years back in time, this strategy should
suffice to reingest all relevant Flickr data for the next 12 years or so (the
current date is 2020).&lt;/p&gt;
&lt;p&gt;For more context around what we've shown here, please take a look at
&lt;a href=&quot;https://github.com/creativecommons/cccatalog/&quot;&gt;the CC Catalog repo&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2020-04-03-nvmee-on-debian-on-aws/">
    <title type="text">NVMEe on Debian on AWS</title>
    <id>urn:uuid:cd3e9db2-b141-3ea1-8cd9-61cd146ec9cd</id>
    <updated>2020-04-03T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2020-04-03-nvmee-on-debian-on-aws/" />
    <author>
      <name>TimidRobot</name>
    </author>
    <content type="html">&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;&lt;p&gt;The current Creative Commons infrastructure buildouts use Debian GNU/Linux AWS
EC2 instances with EBS volumes. Depending on chance (or race conditions), the
mapping of block devices can be different from one host to another or between
reboots.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Occasionally, devices can respond to discovery in a different order in
subsequent instance starts, which causes the device name to change.&lt;/em&gt;
(&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html&quot; title=&quot;Amazon EBS and NVMe on Linux Instances - Amazon Elastic Compute Cloud&quot;&gt;Amazon EBS and NVMe on Linux Instances - Amazon Elastic Compute
Cloud&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;our-solution&quot;&gt;Our Solution&lt;/h2&gt;&lt;p&gt;Modern Amazon Linux AMIs resolve this by providing a &lt;code&gt;udev&lt;/code&gt; rule, but Debian
GNU/Linux does not yet do this. To ensure our systems are configured correctly,
At Creative Commons, we use the device specified during provisioning (ex.
&lt;code&gt;/dev/xvdf&lt;/code&gt;) to identify the correct NVMEe device. We then format it with a
label that can be used mounting during subsequent reboots.&lt;/p&gt;
&lt;p&gt;Thankfully, AWS documents the the device specified during provisioning (ex. &lt;code&gt;/dev/xvdf&lt;/code&gt;):&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;For Nitro-based instances, the block device mappings that are specified in
the Amazon EC2 console when you are attaching an EBS volume or during
AttachVolume or RunInstances API calls are captured in the vendor-specific
data field of the NVMe controller identification.&lt;/em&gt;
(&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html&quot; title=&quot;Amazon EBS and NVMe on Linux Instances - Amazon Elastic Compute Cloud&quot;&gt;Amazon EBS and NVMe on Linux Instances - Amazon Elastic Compute
Cloud&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We use SaltStack (&lt;a href=&quot;https://github.com/creativecommons/sre-salt-prime&quot; title=&quot;creativecommons/sre-salt-prime: Site Reliability Engineering / DevOps SaltStack configuration files&quot;&gt;&lt;code&gt;creativecommons/sre-salt-prime&lt;/code&gt;&lt;/a&gt;) to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the &lt;code&gt;nvme-cli&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;nvme&lt;/code&gt; command to detect which &lt;code&gt;/dev/nvme?n?&lt;/code&gt; contains &lt;em&gt;spec&lt;/em&gt; (ex.
&lt;code&gt;xvdf&lt;/code&gt;) in the NVMe vendor specific data&lt;/li&gt;
&lt;li&gt;Create a symlink (ex. &lt;code&gt;/dev/xvdf -&amp;gt; /dev/nvme1n1&lt;/code&gt;) so that SaltStack can use
&lt;code&gt;/dev/xvdf&lt;/code&gt; for the initial setup&lt;/li&gt;
&lt;li&gt;Perform the intial setup&lt;/li&gt;
&lt;li&gt;Delete the symlink since:&lt;ol&gt;
&lt;li&gt;The initial setup formatted the volume with a label that is used to mount
the filesystem&lt;/li&gt;
&lt;li&gt;There is no guarantee the symlink will be accurate on subsequent reboots
and it might cause confusion&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/creativecommons/sre-salt-prime/blob/master/states/mount/init.sls&quot;&gt;&lt;code&gt;states/mount/init.sls&lt;/code&gt;&lt;/a&gt; state includes a complex shell
command (with Jinja2 variables) that loops through the NVMe devices and finds
the correct one:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; n in /dev/nvme?n?
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; nvme id-ctrl -v &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q &lt;span class=&quot;s1&quot;&gt;&amp;#39;^0000:.*{{ spec_short }}&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        ln -s &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{{&lt;/span&gt; spec_long &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Example variable values:&lt;/p&gt;
&lt;table class=&quot;table table-striped&quot;&gt;
&lt;thead class=&quot;thead-dark&quot;&gt;&lt;tr&gt;
&lt;th&gt;Jinja2 Variable&lt;/th&gt;
&lt;th&gt;Example Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{{ spec_short }}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;xvdf&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{{ spec_long }}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/dev/xvdf&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;related-links&quot;&gt;Related Links&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/Cloud/AmazonEC2Image/Buster&quot; title=&quot;Cloud/AmazonEC2Image/Buster - Debian Wiki&quot;&gt;Cloud/AmazonEC2Image/Buster - Debian Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://packages.debian.org/buster/nvme-cli&quot; title=&quot;Debian -- Details of package nvme-cli in buster&quot;&gt;&lt;code&gt;nvme-cli&lt;/code&gt; package details in Debian buster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Debian buster — Debian Manpages&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://manpages.debian.org/buster/nvme-cli/nvme.1.en.html&quot;&gt;nvme(1) — nvme-cli&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://manpages.debian.org/buster/nvme-cli/nvme-id-ctrl.1.en.html&quot;&gt;nvme-id-ctrl(1) — nvme-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;other-solutions&quot;&gt;Other Solutions&lt;/h2&gt;&lt;p&gt;While doing additional research for this blog post, I found additional
solutions to the same problem. They're all good, but I apprecite the simplicity
of a temporary symlink for setup versus maintaining custom udev rules (maybe I
can help contribute a udev based solution to Debian or Debian's EC2 image). I
can also easily imagine a more complex solution being a better fit if/when our
infrastructure provisioining become more complex.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oogali/ebs-automatic-nvme-mapping&quot; title=&quot;oogali/ebs-automatic-nvme-mapping: Automatic mapping of EBS volumes via NVMe block devices to standard block device paths&quot;&gt;oogali/ebs-automatic-nvme-mapping&lt;/a&gt;: Automatic mapping of EBS volumes via NVMe block devices to standard block device paths&lt;ul&gt;
&lt;li&gt;udev rule that invokes a Bash script to create symlinks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CoreOS&lt;ul&gt;
&lt;li&gt;udev rules that invokes a Bash script to create symlinks&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coreos/init/blob/master/udev/rules.d/90-cloud-storage.rules&quot;&gt;&lt;code&gt;udev/rules.d/90-cloud-storage.rules&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coreos/init/blob/master/udev/bin/cloud_aws_ebs_nvme_id&quot;&gt;&lt;code&gt;udev/bin/cloud_aws_ebs_nvme_id&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/jalaziz/c22c8464cb602bc2b8d0a339b013a9c4&quot;&gt;AWS EBS NVMe udev rules&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;udev rule that invokes a Pyton script to create symlinks&lt;/li&gt;
&lt;li&gt;this is a copy as Amazon only provides access to the source of Amazon Linux
from within an Amazon Linux AMI: &lt;em&gt;The yumdownloader --source command line
tool provided in the Amazon Linux AMI enables viewing of source code inside
of an Amazon EC2.&lt;/em&gt; (&lt;a href=&quot;https://aws.amazon.com/amazon-linux-ami/faqs/&quot; title=&quot;Amazon Linux AMI FAQs&quot;&gt;Amazon Linux AMI FAQs&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-week9-13/">
    <title type="text">CC Vocabulary - My Internship Ended</title>
    <id>urn:uuid:85900455-54f0-35dd-b689-57e5a399b7e5</id>
    <updated>2020-04-02T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-week9-13/" />
    <author>
      <name>conye</name>
    </author>
    <content type="html">&lt;p&gt;This will be my last blog as an Outreachy intern. My watch as an intern has come to an end.  I am glad I chose the Creative Commons community or rather am glad Creative Commons chose me (am not the chosen one). I have gained a lot of valuable knowledge, skills and I am more confident in my abilities.&lt;/p&gt;
&lt;h2 id=&quot;summary-of-my-internship-with-vocabulary&quot;&gt;Summary of  My Internship with Vocabulary&lt;/h2&gt;&lt;p&gt;I have been more involved with the Vocabulary project during my internship and am happy with the work that has been done so far. I made 24 pull requests with 17 merged. My last contribution was adding a &lt;a href=&quot;https://github.com/creativecommons/vocabulary/pull/145&quot;&gt;header component&lt;/a&gt; to the revamped Vocabulary. Here is a summary of my time with Vocabulary.&lt;/p&gt;
&lt;h3 id=&quot;when-i-started-my-internship-vocabulary-comprised-of:&quot;&gt;When I started my Internship, Vocabulary comprised of:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UI components built with Vue &lt;/li&gt;
&lt;li&gt;Styling was written with Stylus&lt;/li&gt;
&lt;li&gt;live style guide built with Styleguidist&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;currently:&quot;&gt;Currently:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UI components built with extending Bulma library components. &lt;/li&gt;
&lt;li&gt;Styling extended with SASS.&lt;/li&gt;
&lt;li&gt;An interactive playground experience built with Storybook that provides a live style guide and documentation.&lt;/li&gt;
&lt;li&gt;A subset Vue-Vocabulary with the same styling but to support platforms built with Vue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use the Vocabulary components, check out its &lt;a href=&quot;https://github.com/creativecommons/vocabulary&quot;&gt;Github repository&lt;/a&gt;. You can also have a playground experience on &lt;a href=&quot;https://cc-vocabulary.netlify.com&quot;&gt;storybook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;my-progress&quot;&gt;My Progress&lt;/h2&gt;&lt;p&gt;Before this internship, I had just switched careers from Network engineering to Software development and this experience came at the time needed.&lt;/p&gt;
&lt;h3 id=&quot;where-i-was-before-the-internship&quot;&gt;Where I was before the Internship&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;No experience working on open source project (or any free open source project)&lt;/li&gt;
&lt;li&gt;My technical skills were basically on the front end (HTML, CSSS and JavaScript with little React) &lt;/li&gt;
&lt;li&gt;No experience working remotely as a Software developer&lt;/li&gt;
&lt;li&gt;Had only written one blog post on medium&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;where-i-am-now&quot;&gt;Where I am now&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;4 months experience working on open source project &lt;/li&gt;
&lt;li&gt;Improved on my previous technical skills, adding new ones (added Vue, Storybook, Webpack, Docker)&lt;/li&gt;
&lt;li&gt;4 months of experience working with a team remotely as a Software developer&lt;/li&gt;
&lt;li&gt;Written additional 6 more blog post; 3 here and 3 for Outreachy&lt;/li&gt;
&lt;li&gt;Improved communication skills &lt;/li&gt;
&lt;li&gt;Improved time management&lt;/li&gt;
&lt;li&gt;Still working to improve where I am now &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;whats-next?&quot;&gt;Whats next?&lt;/h2&gt;&lt;p&gt;I will continue to contribute to CC open source projects especially to the Vocabulary project that I have become a part of. I would love to see the application of Vocabulary to the development of other CC platforms and applications.  I also want to apply the skills that I have acquired to get a full-time software developer position.&lt;/p&gt;
&lt;p&gt;My special appreciation to Outreachy for this opportunity, the entire CC team especially those I worked with, My mentors &lt;a href=&quot;/blog/authors/hugosolar/&quot;&gt;Hugo Solar&lt;/a&gt; and &lt;a href=&quot;/blog/authors/dhruvkb/&quot;&gt;Dhruv Bhanushali&lt;/a&gt; for their guidance, direction, and help whenever I got stuck, also to the Director of Engineering &lt;a href=&quot;/blog/authors/kgodey/&quot;&gt;Kriti Godey&lt;/a&gt; for always checking up on me ensuring I had a wonderful internship experience.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2020-03-05-involucrate-gsoc-outreachy-es/">
    <title type="text">Involúcrate con nuestra comunidad de código abierto a través del  Google Summer of Code y Outreachy</title>
    <id>urn:uuid:e28cf21f-757a-32de-a7b0-5c02f0083c21</id>
    <updated>2020-03-05T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2020-03-05-involucrate-gsoc-outreachy-es/" />
    <author>
      <name>hugosolar</name>
    </author>
    <content type="html">&lt;p&gt;En Creative Commons creemos firmemente en que el código abierto es una gran herramienta para fomentar y desarrollar productos con un enfoque comunitario y, a su vez, la consolidación de una comunidad activa de contribuyentes al  patrimonio común (o, en inglés, &lt;em&gt;Commons&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Con el fin de fomentar la participación de estudiantes en nuestros proyectos de código abierto, CC es parte de los programas que ofrece Google  (&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt;) y también &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt;. En ambos casos, el objetivo es involucrar a estudiantes en el código abierto. Para ello, hacemos un llamado abierto a todos y todas quienes tengan interés en colaborar con nuestro equipo, de postular a los llamados cuanto antes.&lt;/p&gt;
&lt;h4 id=&quot;google-summer-of-code&quot;&gt;Google Summer of Code&lt;/h4&gt;&lt;p&gt;Programa impulsado por Google el cual existe desde el año 2005 el cual ha impulsado a mas de 15.000 estudiantes de mas de 118 paises a involucrarse con diversas organizaciones que abogan por el código abierto.&lt;/p&gt;
&lt;h4 id=&quot;outreachy&quot;&gt;Outreachy&lt;/h4&gt;&lt;p&gt;Este programa impulsa pasantías de personas en organizaciones que trabajan con código abierto. El foco de Outreachy está puesto en comunidades que poseen poca representatividad, que sufren prejuicios sistémicos o discriminación en el area de las tecnologias.&lt;/p&gt;
&lt;p&gt;Las pasantías consisten en el desarrollo de un proyecto el cual debe ser llevado a cabo en un periodo de 3 meses. Este proceso se complementa con una mentoría recibida por el estudiante la cual ayuda a guiar el desarrollo y buen término del mismo.&lt;/p&gt;
&lt;p&gt;En las versiones pasadas de estos programas tuvimos excelentes resultados llevados a cabo por excelentes personas que pusieron toda su dedicación para concretar estos proyectos:&lt;/p&gt;
&lt;h2 id=&quot;gsoc-2019&quot;&gt;GSoC 2019&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/wp-plugin-creativecommons&quot;&gt;Wordpress Plugin&lt;/a&gt; por Ahmad Bilal&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;CC Search Browser extension&lt;/a&gt; por Mayank Nader&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/vue-vocabulary&quot;&gt;CC Vocabulary&lt;/a&gt; por Dhruv Bhanushali&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cc-chooser&quot;&gt;Revamping the CC Chooser&lt;/a&gt; por Ari Madian&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;CC Catalog Data Visualization&lt;/a&gt; por Maria Belen Guaranda&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;outreachy-2019-2020&quot;&gt;Outreachy 2019-2020&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cc-chooser&quot;&gt;Improve License Chooser&lt;/a&gt; por Olga Bulat&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/vue-vocabulary&quot;&gt;Extend the scope and/or use of CC Vocabulary&lt;/a&gt; por Chidiebere Onyegbuchulem&lt;/li&gt;
&lt;li&gt;Revamp CC's Platform Toolkit guide por Ana Paula Rocha&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De esta manera hemos decidido participar de las siguientes rondas de ambos programas, los cuales se encuentran en la fase de “contribución a la comunidad”, por lo tanto, aún estás a tiempo de leer documentación al respecto, tanto de los programas como de la participación en los proyectos de nuestra organización&lt;/p&gt;
&lt;h3 id=&quot;gsoc&quot;&gt;GSoC&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/&quot;&gt;Organizaciones participantes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/how-it-works/&quot;&gt;Como funciona&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://google.github.io/gsocguides/student/&quot;&gt;Guía de estudiante&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;outreachy&quot;&gt;Outreachy&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.outreachy.org/apply/project-selection/&quot;&gt;Organizaciones / proyectos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.outreachy.org/apply/&quot;&gt;Como funciona&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.outreachy.org/docs/internship/&quot;&gt;Guia de estudiante&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cc-open-source&quot;&gt;CC Open Source&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/internships/intern-guide/&quot;&gt;Guia del postulante&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/contributing-code/projects/&quot;&gt;Listado de proyectos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/contributing-code/&quot;&gt;Lineamientos para contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;beneficios&quot;&gt;Beneficios&lt;/h2&gt;&lt;p&gt;Estos programas proveen múltiples beneficios a quienes deseen participar de ellos, por un lado, las organizaciones participantes trabajan en proyectos de código abierto utilizados en todo el mundo y en diversas aplicaciones, convirtiéndose en una oportunidad única de contribuir a proyectos de gran escala que además cuentan con comunidades globales transformando además esta pasantía en una experiencia enriquecedora.&lt;/p&gt;
&lt;p&gt;Por otro lado, técnicamente hablando, también comprende un gran desafío, ya que existe la posibilidad de enfrentarse a la resolución de un problema del mundo real, sin embargo, el hecho de poder enfrentarlo con una mentoría exclusiva provee un gran número de herramientas para el desarrollo y concreción del proyecto, los cuales, sin duda, seran de gran ayuda para el futuro desarrollo de la vida profesional de quien participe.&lt;/p&gt;
&lt;p&gt;Además, estos programas consideran un estipendio por los 3 meses que dura la pasantía. Valores que son variables según la ubicación que quien desea postular.&lt;/p&gt;
&lt;h2 id=&quot;destrezas&quot;&gt;Destrezas&lt;/h2&gt;&lt;p&gt;Con respecto al idioma, para participar en estos programas no se exige un manejo del inglés al 100%, solo basta que puedas comunicarte de manera razonable, ya que, si bien, existen algunos proyectos en los cuales yo soy el mentor ( &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/#wp-plugin&quot;&gt;WP Plugin&lt;/a&gt; e &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/#vocabulary-integration&quot;&gt;Implementar Vocabulary&lt;/a&gt; ) y podemos tener reuniones en español, la comunicación pública y la documentación debe ser en Inglés.&lt;/p&gt;
&lt;p&gt;Con respecto a nuestros proyectos, todos se encuentran en &lt;a href=&quot;https://github.com/creativecommons&quot;&gt;Github&lt;/a&gt; por lo tanto debes saber lo básico de &lt;a href=&quot;https://rogerdudler.github.io/git-guide/index.es.html&quot;&gt;Git&lt;/a&gt;. Te recomiendo consultar la &lt;a href=&quot;https://help.github.com/es&quot;&gt;ayuda de Github&lt;/a&gt; para mayor detalle, sugiero poner atención a la guia sobre como realizar &lt;a href=&quot;https://help.github.com/es/github/collaborating-with-issues-and-pull-requests/about-pull-requests&quot;&gt;Pull Request&lt;/a&gt; ya que es muy necesario para el flujo de trabajo del equipo tecnico de CC y lo será también para tu pasantía.&lt;/p&gt;
&lt;h2 id=&quot;invitacin&quot;&gt;Invitación&lt;/h2&gt;&lt;p&gt;Desde yá los dejamos invitados a participar en estos programas o a participar directamente en nuestra &lt;a href=&quot;https://opensource.creativecommons.org/&quot;&gt;comunidad de código abierto&lt;/a&gt; o visitar nuestro &lt;a href=&quot;https://github.com/creativecommons&quot;&gt;Github&lt;/a&gt;, el cual contiene nuestros proyectos. También pueden unirse a nuestra comunidad global en &lt;a href=&quot;https://slack-signup.creativecommons.org/&quot;&gt;Slack&lt;/a&gt; donde me pueden encontrar como @hugo si tienen alguna duda o comentario.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2020-03-05-participe-gsoc/">
    <title type="text">Participe do Google Summer of Code / Outreachy</title>
    <id>urn:uuid:e5616ac8-3b6a-3afa-85f5-eddcd822577e</id>
    <updated>2020-03-05T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2020-03-05-participe-gsoc/" />
    <author>
      <name>brenoferreira</name>
    </author>
    <content type="html">&lt;p&gt;O Google Summer of Code (GSoC) é uma iniciativa global do Google com o objetivo de incentivar a participação de estudantes com interesse em tecnologia a contribuírem com projetos de software de código aberto. Programa que existe desde 2005, que incentivou mais de 15.000 estudantes de mais de 118 países a se envolverem com várias organizações que defendem o código aberto.&lt;/p&gt;
&lt;p&gt;O Outreachy promove estágios para pessoas em organizações que trabalham com código aberto. O foco da participação no programa está nas comunidades com pouca representação, viés sistêmico ou discriminação na área de tecnologia.&lt;/p&gt;
&lt;p&gt;Os estudantes trabalham com uma organização responsável por algum projeto e durante um período de estágio de 3 meses, e estarão sob tutoria de um(a) mentor(a) que será responsável por ajudar o estudante e guiá-lo(a) a encontrar a melhor maneira de concluir o projeto.&lt;/p&gt;
&lt;p&gt;Em 2020 a Creative Commons está novamente participando do GSoC e Outreachy, e estagiários participando conosco terão a oportunidade de trabalhar em projetos relacionados à cultura de acesso livre de impacto global, dentre eles o nosso principal produto de tecnologia, o CC Search, que é um site de busca de conteúdo livre licenciados com as licenças da CC ou sob domínio público.&lt;/p&gt;
&lt;p&gt;A Creative Commons é uma organização não governamental sem fins lucrativos que criou licenças que permitem a cópia e compartilhamento com menos restrições que o tradicional todos direitos reservados (copyright), as chamadas &lt;a href=&quot;https://creativecommons.org/licenses/?lang=pt_BR&quot;&gt;Licenças Creative Commons&lt;/a&gt;, como CC-BY, CC-BY-SA, etc..&lt;/p&gt;
&lt;p&gt;Muitas das organizações que participam do programa do Google e Outreachy trabalham em projetos de código livre utilizados globalmente em diversas aplicações. É uma oportunidade única de contribuir com um projeto que gera um impacto positivo na comunidade internacional de tecnologia. Além disso, os estudantes terão um mentor exclusivo para ajudar no desenvolvimento do projeto. Não é um daqueles estágios onde os estudantes ficam desamparados nos momentos de dificuldade.&lt;/p&gt;
&lt;p&gt;O estágio é remunerado naturalmente. Os valores pagos aos estagiários pelo Google variam com a localização onde o estudante mora e mais informações podem ser encontradas no &lt;a href=&quot;https://developers.google.com/open-source/gsoc/help/student-stipends&quot;&gt;site do programa&lt;/a&gt;. No caso do Outreachy, os valores estão também na &lt;a href=&quot;https://www.outreachy.org&quot;&gt;página do programa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Caso voce se interesse em participar do GSoC ou Outreachy esse ano, seguem algumas dicas que poderão te ajudar no seu processo de aplicação e submissão de projeto:&lt;/p&gt;
&lt;p&gt;Leia o conteúdo disponível online sobre como o programa funciona. &lt;a href=&quot;https://summerofcode.withgoogle.com/how-it-works] e [Outreachy](https://www.outreachy.org/docs/applicant/&quot;&gt;Google Summer of Code&lt;/a&gt;. Assim voce irá poder entender a proposta do programa, sua estrutura e tirar suas dúvidas; &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/&quot;&gt;nossa lista de projetos&lt;/a&gt; que estamos sugerindo esse ano para os estudantes trabalhar e ver qual projeto está melhor alinhado com seus interesses e habilidades; e &lt;a href=&quot;https://opensource.creativecommons.org/internships/applicant-guide/&quot;&gt;nosso guia para candidatos&lt;/a&gt; para entender o passo a passo de como nós iremos trabalhar com candidatos e estudantes selecionados para participar do programa. Esse conteúdo está todo em inglês.&lt;/p&gt;
&lt;p&gt;Sobre inglês, para ser selecionado para trabalhar conosco, é necessário que voce consiga se comunicar razoavelmente bem em inglês. A Creative Commons é uma organização internacional e voce precisará se comunicar com pessoas da organização e da comunidade que não falam português. Eu, Breno Ferreira, autor desse post, falo portugues então caso voce se interesse pelo &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/#cc-search-accessibility&quot;&gt;projeto que serei responsável&lt;/a&gt;, eu poderei me comunicar em privado em portugues, mas toda comunicação dos estudantes em canais públicos deverá ser em inglês. Voce não precisa ser 100% fluente, mas precisa conseguir entender e se fazer entender no idioma.&lt;/p&gt;
&lt;p&gt;O GSoC é um programa focado em contribuições de código, afinal, chama-se Google Summer of Code. Então, voce precisa ter alguns conhecimentos básicos de algumas ferramentas para uma boa participação no programa.&lt;/p&gt;
&lt;p&gt;Voce precisará saber usar Git e Github. Todos os projetos da Creative Commons estão no Github e o conhecimento básico dessas ferramentas é fundamental. A &lt;a href=&quot;https://help.github.com/pt&quot;&gt;documentação do Github&lt;/a&gt; pode ajudar, principalmente a parte sobre &lt;a href=&quot;https://help.github.com/pt/github/collaborating-with-issues-and-pull-requests/about-pull-requests&quot;&gt;como funcionam os Pull Requests&lt;/a&gt; pois é um recurso bem particular do Github e é normal algumas pessoas não saberem utilizar esse recurso muito importante.&lt;/p&gt;
&lt;p&gt;Na nossa página de &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/&quot;&gt;ideias de projetos&lt;/a&gt; os projetos listam as habilidades recomendadas para quem se interessar (listado em &lt;em&gt;Skills recommended&lt;/em&gt;). Verifique se essas habilidades se alinham com as suas.&lt;/p&gt;
&lt;p&gt;Nessa fase inicial, o ideal é voce começar a fazer algumas contribuições nos projetos que te interessam. Por exemplo, se voce se interessou pelo projeto de Acessibilidade e Internacionalização do CC Search, o repositório no Github relacionado é &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend&quot;&gt;https://github.com/creativecommons/cccatalog-frontend&lt;/a&gt;. De uma olhada na &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues&quot;&gt;lista de issues&lt;/a&gt; que estão marcadas com os labels &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;&quot;Good First Issue&quot;&lt;/a&gt; e &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&quot;&gt;&quot;Help Wanted&quot;&lt;/a&gt;. Essas são as tarefas que nós consideramos as melhores para quem quer começar a contribuir para o projeto. Os nossos principais repositórios tem todos issues marcadas com esses labels. É muito importante também ler a documentação do projeto. Leia o arquivo README no repositório. Nossos projetos também possuem um arquivo CONTRIBUTING.md que contém o código de conduta para quem for contribuir com o projeto, e também um guia sobre como contribuir com aquele projeto em específico. Além disso, é interessante também voce &lt;a href=&quot;https://opensource.creativecommons.org/community/&quot;&gt;participar da comunidade&lt;/a&gt;. Entre no nosso Slack e participe dos canais abertos. As pessoas estão lá interagindo, postando comentarios e tirando dúvidas conosco e outros membros em um ambiente respeitoso e cordial.&lt;/p&gt;
&lt;p&gt;Durante o periodo de submissão de projetos voce irá escrever sua proposta de projeto. É bastante importante que voce compartilhe o rascunho da sua proposta o mais cedo possível conosco para que possamos dar feedback e lhe dizer o que precisa ser melhorado. Se voce só compartilhar sua proposta no final do período de submissão, não teremos a oportunidade de dizer o que está bom e ruim e voce não poderá fazer nenhuma melhoria. Então recomendamos que voce compartilhe seus rascunhos com os mentores cedo e frequentemente.&lt;/p&gt;
&lt;p&gt;Espero que essas dicas lhe ajudem. Caso voce não seja selecionado(a), o GSoC é um programa anual, e ano que vem acontece novamente. E no segundo semestre participaremos também do programa Outreachy, que acontece duas vezes por ano. Caso voce acabe sendo selecionado(a), será um prazer trabalhar com voce durante esses meses.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-4/">
    <title type="text">CC Platform Toolkit Revamp - 4</title>
    <id>urn:uuid:99b50998-4560-3b3f-80bd-b03b892c84ab</id>
    <updated>2020-03-04T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-4/" />
    <author>
      <name>apdsrocha</name>
    </author>
    <content type="html">&lt;p&gt;Phew, how is it possible that we're already in March? Between my last check-in and today, there was a lot of work and effort into revamping the &lt;a href=&quot;https://creativecommons.org/platform/toolkit/&quot;&gt;Platform Toolkit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There were two rounds of user interviews: the first one was done looking only at the wireframe, focusing exclusively on usability and content. This provided a lot of important feedback to adjust the structure and move forward with the UI.  I tried my best to apply the design standards already mapped out by the &lt;a href=&quot;https://github.com/creativecommons/vocabulary/&quot;&gt;Vocabulary&lt;/a&gt; project, so that in the future this wouldn't stand out from other CC materials.&lt;/p&gt;
&lt;p&gt;The second round of user interviews was done with a UI prototype, and was meant to take away some of my doubts regarding a few choices in this project. For instance, would it be best for the user to have the information in a single page, or would that be too much, and best to split in separate pages? There were pros and cons to both scenarios, but in the end we decided to stick with the single-page format because of a particular behavior: one of the ways users search for content is to ctrl+F and look for keywords. That would be drastically less effective with multiple pages.&lt;/p&gt;
&lt;p&gt;After all the feedback (and adjustments) were done, it was time to make things come to life. I built the page from scratch with HTML/CSS/JS, making use of the Vocabulary library - it should be live soon, so yay!&lt;/p&gt;
&lt;p&gt;The last three months have been incredible and this was a wonderful opportunity to tackle a project from start to finish. I feel very grateful for all the time and dedication my mentors put into this project, they guided me every step of the way and made sure I was supported throughout the internship. I plan on staying involved in the CC community, so hopefully soon I will have more to contribute.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-week5-8/">
    <title type="text">CC Vocabulary - Weeks 5-8</title>
    <id>urn:uuid:b30bf3b1-be65-3f4d-a3c5-5ac5c7c9f626</id>
    <updated>2020-02-03T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-week5-8/" />
    <author>
      <name>conye</name>
    </author>
    <content type="html">&lt;p&gt;A lot of time and effort have been put in to re-work Vocabulary since my last post and the changes are still ongoing. To understand why these changes are important, we have to better understand Vocabulary.&lt;/p&gt;
&lt;h2 id=&quot;so-why-all-the-changes?&quot;&gt;So Why All The Changes?&lt;/h2&gt;&lt;p&gt;Vocabulary is CC's new design system. This means its design is meant to affect all of CC's websites, applications, and platforms. It is designed to be independent of any language or framework. Its styling will be used by its subsets like Vue-Vocabulary to maintain consistency. The majority of CC's websites and platforms are built with Wordpress, Lektor, and Vue. This means Vue-Vocabulary will inherit its styling from Vocabulary and the same will follow for other subsets of Vocabulary for Wordpress and Lektor which would possibly be developed soon.&lt;/p&gt;
&lt;h2 id=&quot;the-major-change&quot;&gt;The Major Change&lt;/h2&gt;&lt;p&gt;Vocabulary currently uses stylus to easily write the CSS and Webpack as a build system. Stylus will be changed to SASS (actually SCSS). This is because SASS is easier to maintain and the majority of CC's websites are already built with SASS.&lt;/p&gt;
&lt;h2 id=&quot;my-contributions-in-the-past-four-weeks&quot;&gt;My Contributions in the past four weeks&lt;/h2&gt;&lt;p&gt;In the past four weeks, I have been contributing majorly to the re-work of Vocabulary. Some of my contributions include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding vendor prefixes to compiled CSS using autoprefixer&lt;/li&gt;
&lt;li&gt;Updating build script for output CSS token to include CSS custom properties format&lt;/li&gt;
&lt;li&gt;Restyling some components as specified in the new design&lt;/li&gt;
&lt;li&gt;Minifying and cleaning SVGs with SVGOMG&lt;/li&gt;
&lt;li&gt;Removing some components and features not required in the new design&lt;/li&gt;
&lt;li&gt;Fixing broken links&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There has also been a lot of learning for me too. For example, I have been learning better how Webpack and Docker are used in this project.&lt;/p&gt;
&lt;p&gt;Yeah, I said I would share more in two weeks from my last post but it turned out in four weeks but I will try to make in two weeks for my next post.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-coding/">
    <title type="text">Improving CC License Chooser: Coding</title>
    <id>urn:uuid:bda5e013-2b29-3207-8041-cff3bfab0c22</id>
    <updated>2020-01-24T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-coding/" />
    <author>
      <name>obulat</name>
    </author>
    <content type="html">&lt;p&gt;During the last several weeks I have been busy with coding the redesigned version of the License Chooser.&lt;/p&gt;
&lt;p&gt;When I just started working on coding the License Chooser, it wouldn't compile due to some dependency problems. This became a great opportunity to update the project from a Webpack based Vue.js template to a Vue-cli project, which makes managing dependencies much simpler. I also updated the project to a newer version of Creative Commons Vue Vocabulary for styling.&lt;/p&gt;
&lt;p&gt;For the visual styles, we use Buefy component library (based on Bulma and Vue.js), namely, stepper and tabs components. It has been an interesting journey customizing them to our specific use cases.&lt;/p&gt;
&lt;p&gt;While coding the site, I also tried to extract all the text to a separate file so that it would be easier to integrate it into translation workflow later during my internship.&lt;/p&gt;
&lt;p&gt;After several weeks of work, 2 large PRs merged, we are finally ready to conduct usability tests to better understand how users interact with the License Chooser, and what changes we still need to implement to make it easy both for beginners and for advanced users of Creative Commons Licenses to choose the best license for their needs, and help to use the chosen license.&lt;/p&gt;
&lt;p&gt;A new &lt;a href=&quot;https://chooser-beta.creativecommons.org/&quot;&gt;beta version of the License Chooser&lt;/a&gt; is deployed!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/apache-airflow-testing-with-pytest/">
    <title type="text">Apache Airflow testing with Pytest</title>
    <id>urn:uuid:c59eaf57-778e-3d75-8929-537949d119fd</id>
    <updated>2020-01-23T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/apache-airflow-testing-with-pytest/" />
    <author>
      <name>mathemancer</name>
    </author>
    <content type="html">&lt;p&gt;CC Catalog is a project that gathers information about images from around the
internet, and stores the information so that these images can eventually be
indexed in &lt;a href=&quot;https://ccsearch.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt;. A portion of the process is directed by
&lt;a href=&quot;https://airflow.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt;, which is a tool commonly used to organize workflows
and data pipelines.&lt;/p&gt;
&lt;p&gt;The nature of Airflow leads to some particular challenges when it comes to
testing, and special care must be taken to make tests independent from the
global state of the system where they are run.  This blog post will describe a
few of the challenges we faced when writing tests for Airflow jobs, and some
tricks we used to solve those challenges.&lt;/p&gt;
&lt;h2 id=&quot;brief-description-of-apache-airflow&quot;&gt;Brief description of Apache Airflow&lt;/h2&gt;&lt;p&gt;Apache Airflow is an open source piece of software that loads Directed Acyclic
Graphs (DAGs) defined via python files.  The DAG is what defines a given
workflow.  The nodes are pieces of jobs that need to be accomplished, and the
directed edges of the graph define dependencies between the various pieces.  By
default, the Airflow daemon only looks for DAGs to load from a global location
in the user's home folder: &lt;code&gt;~/airflow/dags/&lt;/code&gt;. When a DAG is 'run', i.e., the
tasks defined by the nodes of the DAG are each performed in the order defined by
the directed edges of the DAG, the Airflow daemon stores information about the
dag run in &lt;code&gt;~/airflow/&lt;/code&gt;.  The daemon also stores general information about what
DAGs exist on the system, and all of their current statuses in that directory.
For more details, please see &lt;a href=&quot;https://airflow.apache.org/docs/stable/&quot;&gt;the documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;challenge:-localize-airflow-to-the-project-directory&quot;&gt;Challenge:  Localize Airflow to the project directory&lt;/h2&gt;&lt;p&gt;Even when installed using &lt;code&gt;pip&lt;/code&gt; within a &lt;a href=&quot;https://github.com/pypa/virtualenv&quot;&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt; environment,
all airflow commands will be run against the default locations in the user's
home directory. In particular, if you want to test a DAG from your project
directory, the method given in the &lt;a href=&quot;https://airflow.apache.org/docs/stable/tutorial.html#testing&quot;&gt;Airflow documentation&lt;/a&gt; is to
copy the dag into the default location &lt;code&gt;~/airflow/dags/&lt;/code&gt;, and use the
command-line &lt;code&gt;airflow&lt;/code&gt; tool to run the tasks defined by the nodes.  The
information about success and failure of the tests will be stored by the Airflow
daemon in the &lt;code&gt;~/airflow/&lt;/code&gt; directory.  We'd rather keep all input and output
from our tests to the project directory instead.  This helps avoid any side
effects which might arise by running tests for different projects, and also
ensures that tests can't affect anything in the default directory, which may be
used for production in many cases.&lt;/p&gt;
&lt;p&gt;The solution is to choose a directory in your project, and set the environment
variable &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt; whenever you run the tests, or use the &lt;code&gt;airflow&lt;/code&gt;
command on the project DAGs. I recommend you add the command&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AIRFLOW_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/your/desired/full/path/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to a script (ours is called &lt;code&gt;env.sh&lt;/code&gt;) that will be run in any shell dealing with
the 'localized' Airflow instance, because forgetting to set the variable for
even one &lt;code&gt;airflow&lt;/code&gt; command will corrupt the DAG states stored in the global
area. Note that setting this variable is necessary even when running in a
&lt;code&gt;virtualenv&lt;/code&gt; environment.&lt;/p&gt;
&lt;p&gt;Now that you have &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt; set, you'll likely want to load some DAGs that
you've written.  This is made easier if you put the files defining them into a
&lt;code&gt;dags&lt;/code&gt; directory in the directory denoted by &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt;.  I.e., it's wise
to structure the project sub-directory dealing with Airflow and Airflow DAGs
similarly to the default location, but in your project directory.  At this
point, you should have some &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt; directory as a subdirectory of your
project directory, and then some &lt;code&gt;$AIRFLOW_HOME/dags&lt;/code&gt; directory, where you keep
any python files defining Airflow DAGs, and their dependencies.  Another
advantage of this structure is it's likely the directory structure you'll use in
production, and replicating simplifies deployment.&lt;/p&gt;
&lt;p&gt;Finally, Airflow will leave a number of files in the &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt; directory
which you are not likely to want to track in source control (e.g., &lt;code&gt;git&lt;/code&gt;).
These files are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$AIRFLOW_HOME/airflow.cfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$AIRFLOW_HOME/airflow.db&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$AIRFLOW_HOME/logs/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$AIRFLOW_HOME/unittests.cfg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add these files to &lt;code&gt;.gitignore&lt;/code&gt; or the equivalent.&lt;/p&gt;
&lt;h2 id=&quot;smoketesting:-can-the-airflow-daemon-load-the-dags?&quot;&gt;Smoketesting:  Can the Airflow daemon load the DAGs?&lt;/h2&gt;&lt;p&gt;Note that we're using &lt;code&gt;pytest&lt;/code&gt; for our unit testing, and so most examples assume
this.&lt;/p&gt;
&lt;p&gt;The most basic test you'll want is to determine whether your DAGs can load
without errors. To do this, you can use the following function:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;airflow.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DagBag&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_dags_load_with_no_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dag_bag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DagBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include_examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dag_bag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;common_api_workflows.py&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dag_bag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We initialize a &lt;code&gt;DagBag&lt;/code&gt; (this loads DAG files). With the &lt;code&gt;process_file&lt;/code&gt; method,
we instruct the Airflow daemon to attempt to load any DAGs defined in the
&lt;code&gt;common_api_workflows.py&lt;/code&gt; file.  We then check to make sure loading the DAGs
didn't produce any errors.&lt;/p&gt;
&lt;h2 id=&quot;hint:-use-functions-to-create-dags.&quot;&gt;Hint: Use functions to create DAGs.&lt;/h2&gt;&lt;p&gt;This will increase testability. You can test the function, bypassing the need to
load the DAG into the &lt;code&gt;DagBag&lt;/code&gt; (except when you're actually testing that it
&lt;em&gt;can&lt;/em&gt; be loaded). This may seem obvious, but none of the Airflow documentation
uses this pattern. Here is an example of a function that creates a simple dag,
and a test of the function:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;airflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;airflow.operators.bash_operator&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BashOperator&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_dag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;script_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dag_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;crontab_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DAG_DEFAULT_ARGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dag_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dag_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;schedule_interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crontab_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;catchup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;start_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BashOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;task_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bash_command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;echo Starting &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; workflow&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;run_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;BashOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;task_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;get_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_images&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bash_command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;python &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; --mode default&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;start_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_task&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_create_dag_creates_correct_dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_dag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;test_source&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;test_script_location&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;test_dag_id&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test_source_starting&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;get_test_source_images&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upstream_task_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downstream_task_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run_task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upstream_task_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downstream_task_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we assume that &lt;code&gt;DAG_DEFAULT_ARGS&lt;/code&gt; is defined earlier in the file.  See the
Airflow documentation for details about default DAG arguments. Now, this
function is testable (great!) but it doesn't acutally make the DAG it creates
known to the Airflow daemon. To do that, we have to create the created dag into
the global scope of the module defined by the file, which can be done with the
following snippet:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dag_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_dag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;script_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dag_id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, it's assumed that &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;script_location&lt;/code&gt;, and &lt;code&gt;dag_id&lt;/code&gt; are defined
earlier in the python file.&lt;/p&gt;
&lt;p&gt;We hope that these hints are helpful to the reader.  For more, and for the
context around the snippets shown here, please take a look at
&lt;a href=&quot;https://github.com/creativecommons/cccatalog/tree/c4b80600eb5695cc294e1791ba90bdc3a408b7b9/src/cc_catalog_airflow&quot;&gt;the repo&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-3/">
    <title type="text">CC Platform Toolkit Revamp - 3</title>
    <id>urn:uuid:297bf32e-1761-3ec6-967a-4cb76007305c</id>
    <updated>2020-01-22T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-3/" />
    <author>
      <name>apdsrocha</name>
    </author>
    <content type="html">&lt;p&gt;Last time I checked-in, I was working on revisiting the current &lt;a href=&quot;https://creativecommons.org/platform/toolkit/&quot;&gt;Platform Toolkit&lt;/a&gt; and making a first draft suggesting changes in both content and structure.&lt;/p&gt;
&lt;p&gt;It was a lot of work, but I'm finally happy with the wire-frame that came out after all the research and experimentation. The original material went through quite a few modifications, with text rewrites and changes in the order and organization of the content. But now comes the important part: making sure that these changes make sense to the users. My vision is already a little skewed, since I've been immersed in this project for the past 7 weeks. From now on, the process of validating this material needs fresh eyes. That way, improvements can be made based on user feedback, and reflect the best possible version when it the time comes to implement.&lt;/p&gt;
&lt;p&gt;For the next two weeks my schedule is focusing on two different activities: I'll be going over a round of user interviews where I intend to show my wireframe and present a few tasks. The idea is to see how both content and usability perform in this new format. In parallel, I've also began taking these wire-framed components and sketching them out in a more refined UI format by experimenting with color, type, and so on. I really wanted to get an early start on this task—even if it's subject to change as the research gives me further insights—because I feel making the visual part come together will be the hardest part for me.&lt;/p&gt;
&lt;p&gt;Thankfully, I have very supportive mentors and help all-around from the CC staff and community. I'm really happy with how this project is coming together and I hope in two weeks I can come back here and report on great progress!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-my-first-four-weeks/">
    <title type="text">CC Vocabulary - My First Four Weeks</title>
    <id>urn:uuid:f0b37b2b-043a-3606-b848-2299619bb41c</id>
    <updated>2020-01-14T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-my-first-four-weeks/" />
    <author>
      <name>conye</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://cc-vocabulary.netlify.com/&quot;&gt;Vocabulary&lt;/a&gt; is Creative Commons's web design system; an extension of 
&lt;a href=&quot;https://creativecommons.org/wp-content/uploads/2019/10/Creative-Commons-Style-Guide-2019.pdf&quot;&gt;CC Style Guide&lt;/a&gt; 
for the web. This project was originally started by my mentors &lt;a href=&quot;https://opensource.creativecommons.org/blog/authors/dhruvkb&quot;&gt;Dhruv Bhanushali&lt;/a&gt; 
and &lt;a href=&quot;https://opensource.creativecommons.org/blog/authors/hugosolar&quot;&gt;Hugo Solar&lt;/a&gt; to unify all of CC websites and applications. 
Vocabulary has been undergoing a lot of changes lately. As part of my Outreachy internship, 
I will be contributing to extending its scope and usage.&lt;/p&gt;
&lt;h2 id=&quot;my-progress-so-far...&quot;&gt;My Progress so far...&lt;/h2&gt;&lt;p&gt;Before my first contribution, Vocabulary comprised of reusable UI components built with Vue.js and a live styleguide built with Styleguidist. 
My first task was to create an interactive playground experience with Storybook which would eventually replace that built with Styleguidist. 
Storybook was chosen for obvious reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It provides a workbench environment for your components in isolation where you can play around with, customize and test as you develop.&lt;/li&gt;
&lt;li&gt;It provides Storybook Docs to generate design system documentation, customize, and share best practices with your team. 
Styleguidist majorly creates a UI documentation site that can be done better with Storybook Docs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My first three weeks were more of struggling and learning. Coming from a React background, I had to reconfigure my brain to understand Vue 
and Vue storybook. I did a lot of reading of documentation and articles, testing locally and asking for help when stuck. I eventually completed 
the task and created a pull request. A live version of the interactive playground can be seen 
&lt;a href=&quot;https://cc-vue-vocabulary.netlify.com/storybook/?path=/story/vocabulary-welcome--welcome&quot;&gt;here&lt;/a&gt;. 
Please feel free to play around with it and give a feedback.&lt;/p&gt;
&lt;p&gt;The following week, I worked on updating some Vue Vocabulary components with the CC Vocabulary design library.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next...&quot;&gt;What's Next...&lt;/h2&gt;&lt;p&gt;This week, I will be working on extending the usage of vocabulary to other CC websites that are not built with Vue. 
What I worked on previously was &lt;a href=&quot;https://cc-vue-vocabulary.netlify.com/&quot;&gt;Vue-Vocabulary&lt;/a&gt; for CC websites and 
platforms that support Vue. The goal is to use the already developed stylesheets in Vocabulary to build the 
same functional components with vanilla JavaScript.&lt;/p&gt;
&lt;p&gt;Well, all said, the past weeks have been great. I will be sharing more in two weeks.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-weeks-1-2-design/">
    <title type="text">Improving CC License Chooser Weeks 1-2: Design</title>
    <id>urn:uuid:24a0bec2-ab5d-3990-9d96-1c8d52fe24f1</id>
    <updated>2020-01-06T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-weeks-1-2-design/" />
    <author>
      <name>obulat</name>
    </author>
    <content type="html">&lt;p&gt;Creative Commons License Chooser has been helping creators to choose the most appropriate license for their work for a long time. As anything on the web, it needs updating. One of my mentors, &lt;a href=&quot;https://opensource.creativecommons.org/blog/authors/akmadian/&quot;&gt;Ari Madian&lt;/a&gt;, has created the new version of this chooser as part of his 2019 GSoC Project. As a 2019-2020 Outreachy intern, I will be working on making it production-ready. The goals of my internship include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improving usability of the Chooser and making it easier for licensors to understand the process of selecting the most appropriate license.&lt;/li&gt;
&lt;li&gt;Setting up and automating internalization.&lt;/li&gt;
&lt;li&gt;Extracting License Chooser as a standalone npm package to make integrating Creative Commons licensing in other websites easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the first two weeks of my internship I mainly worked on redesigning the license selection process based on the usability testing feedback. We decided to set up license selection as a step-by-step process of answering yes/no questions guiding a novice or somewhat experienced user to the CC license that best suits their needs.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;here-is-the-first-draft:&quot;&gt;&lt;strong&gt;Here is the first draft:&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/blog/entries/improving-cc-license-chooser-weeks-1-2-design/draft-1.png&quot; alt=&quot;draft-1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Features of this draft that stayed in current version:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A card to show the information about currently selected license is prominent on the page.&lt;/li&gt;
&lt;li&gt;Four yes/no questions that help narrow the license choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;What was changed in final version:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The openness scale (which is drawn incorrectly, by the way) took up too much space on the first screen, not adding as much to the process.&lt;/li&gt;
&lt;li&gt;Toggles as an answer to yes/no questions are confusing for some users.&lt;/li&gt;
&lt;li&gt;Separate Personalization step was moved together with other steps.&lt;/li&gt;
&lt;li&gt;License attribution information was merged with the selected license card, because the card is supposed to contain all the information about selected license, including author/work url/ source url, if they are available.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;draft-2&quot;&gt;&lt;strong&gt;Draft 2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;As a result of continuous communication with my mentors, I this draft to be discussed at our weekly meeting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/improving-cc-license-chooser-weeks-1-2-design/draft-2.png&quot; alt=&quot;draft-2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Features that stayed in the current version:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two cards: one for the step-by-step process and the other for presenting license information.&lt;/li&gt;
&lt;li&gt;All the information about selected license in the second card.&lt;/li&gt;
&lt;li&gt;Personalization step as the last and optional step of choosing the license.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Features that were suggested during the meeting:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;License selection dropdown with all available licenses on the selected license card. This is for experienced users who know what license they want to choose and only need to add details, or copy the attribution text or html.&lt;/li&gt;
&lt;li&gt;A link to a page with more information on how to use the license when sharing on the selected license card: for users who need help with that.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;currently-final-draft-:&quot;&gt;&lt;strong&gt;Currently Final Draft :)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/blog/entries/improving-cc-license-chooser-weeks-1-2-design/draft-3.png&quot; alt=&quot;draft-3.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;license-chooser-stepper-card&quot;&gt;&lt;strong&gt;License Chooser Stepper Card&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Stepper Card shows five steps to selecting a license, one for each feature of CC licenses and an optional personalization step. The stepper icons show current selection status: selected/unselected features and current feature being displayed. Clicking on an icon opens the corresponding step.&lt;/li&gt;
&lt;li&gt;Each license feature has a yes/no question. A user clicks on a yes or no button to answer, and can immediately see what changed in the license, and the text beneath the buttons shows what current selection of the feature actually means. Default answer for each step besides the first one (attribution - 'BY') is 'no', so if a user simply clicks 'next' on each step, or clicks on the last step icon at the top, they get CC BY 4.0 license.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;selected-license-card&quot;&gt;&lt;strong&gt;Selected License Card&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Current selection dropdown is for experienced users who can quickly select a license that they know they want to use. It also updates when a feature in the license selection process is changed.&lt;/li&gt;
&lt;li&gt;Selected license information displays information about the license and its clauses, as well as its icons. The wording of this part will probably change the most after discussion with the community and legal team.&lt;/li&gt;
&lt;li&gt;Attribution information for the license, with a choice between rich text or html code. These are displayed in tabs to save on space. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I created the wireframes in Figma, and I tried to integrate CC Vocabulary elements as much as possible.&lt;/p&gt;
&lt;p&gt;Next steps for my project will include coding to update the license chooser Vue.js project, and iterating over the design based on community feedback.&lt;/p&gt;
&lt;p&gt;You can follow my work at &lt;a href=&quot;https://github.com/creativecommons/cc-chooser&quot;&gt;https://github.com/creativecommons/cc-chooser&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-2/">
    <title type="text">CC Platform Toolkit Revamp - 2</title>
    <id>urn:uuid:dba4dc6a-e8b6-3f06-9b03-2d58dd440755</id>
    <updated>2020-01-06T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-2/" />
    <author>
      <name>apdsrocha</name>
    </author>
    <content type="html">&lt;p&gt;Time is really flying! I can hardly believe this is already week 5 as of my internship with CC (I'm part of the Outreachy program for the 2019-2020 round). I've been having a wonderful time working on this project (I'm helping revamp the &lt;a href=&quot;https://creativecommons.org/platform/toolkit/&quot;&gt;Platform Toolkit&lt;/a&gt;) and I'm excited to report on what's been going on for the past couple of weeks.&lt;/p&gt;
&lt;p&gt;Since the holidays got a bit in the way of user testing existing platform implementations, my mentors and I slightly altered the schedule. These past weeks have been dedicated to reworking the content that is currently online (revisiting writing and format) and suggesting an entirely new structure. I've been documenting that process &lt;a href=&quot;https://drive.google.com/open?id=1g7_76zFmgtqq7khb_aBS-l2Wx8tScMgR1NPBO0vOdkM&quot;&gt;here&lt;/a&gt; as I tackle each section.&lt;/p&gt;
&lt;p&gt;What I really loved about this process is the fact that I'm able to see the platform toolkit through a holistic lens: I'm thinking about how the user is currently interacting with this content, how the information could be made more palatable, how that can be achieved visually, and finally, how to do it in a way that won't be impossible to implement.&lt;/p&gt;
&lt;p&gt;I'm excited about the questions and answers that have been coming up during this process. Even though I'm far from delivering a final version, I believe this first rough draft already brings important improvements. My focus has been on diminishing cognitive load. That means taking very dense content and delivering the same amount of information with an approach that steps away from full copy and comes closer to a UI format. I've been learning a lot with each step of this project and I'm eager to make a positive contribution by the end of the internship. Soon enough I'll be checking in again soon to give a new follow up!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/freesound-intro/">
    <title type="text">An Introduction to Freesound</title>
    <id>urn:uuid:9d8021b4-7645-3213-a8ff-ced7633a4488</id>
    <updated>2019-12-19T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/freesound-intro/" />
    <author>
      <name>ffont</name>
    </author>
    <content type="html">&lt;h3 id=&quot;about-freesound&quot;&gt;About Freesound&lt;/h3&gt;&lt;p&gt;To the best of our knowledge, &lt;a href=&quot;https://freesound.org&quot;&gt;Freesound&lt;/a&gt; is the biggest website for sharing Creative Commons audio clips in the &lt;em&gt;observable universe&lt;/em&gt;. It was started in 2005 as a research effort of the &lt;a href=&quot;https://www.upf.edu/web/mtg/&quot;&gt;Music Technology Group&lt;/a&gt; in &lt;a href=&quot;https://upf.edu&quot;&gt;Universitat Pompeu Fabra&lt;/a&gt;, Barcelona. The initial goal was to gather a collection of audio clips that could be shared among researchers to carry out computational analysis of sounds and learn about them. Creative Commons licenses had been introduced to the world only a couple of years before, and it seemed a perfect fit for the goals of the Freesound platform. Currently Freesound hosts more than &lt;strong&gt;430k audio clips&lt;/strong&gt; uploaded by more than &lt;strong&gt;20k contributors&lt;/strong&gt;. Freesound sounds have been &lt;strong&gt;downloaded more than 145M times&lt;/strong&gt; by &lt;strong&gt;9M users&lt;/strong&gt; all over the world. It contains all sorts of sounds, from field recordings to music instrument samples, foley, speech and music loops; but not &lt;em&gt;songs&lt;/em&gt; in the traditional sense of &lt;em&gt;finished music compositions&lt;/em&gt;. The aim of Freesound is to provide audio &lt;em&gt;building blocks&lt;/em&gt; to be transformed and combined into other sounds, and reused elsewhere. Here are some nice examples of the variety of sounds to be found in Freesound:&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/264287/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/261328/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/392090/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/447776/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/161478/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/416984/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;Freesound has been featured in the Creative Commons blog several times in the past: &lt;a href=&quot;https://creativecommons.org/2005/04/12/overinspaincreatinganonlinecollaborativedatabaseofsounds/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2005/10/01/freesound/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2006/07/08/freesoundviaccmixter20kfreesounds/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2007/01/17/freesound-sample-in-children-of-men/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2008/03/13/freesound-20/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2008/09/29/freesoundorg/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/2011/09/12/celebrating-freesound-2-0-retiring-sampling-licenses/&quot;&gt;here&lt;/a&gt;. Also you'll find plenty of information about Freesound, statistics and the like in the &lt;a href=&quot;https://blog.freesound.org&quot;&gt;Freesound Blog&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;freesound_logo.png&quot; width=1000px/&gt;&lt;/p&gt;&lt;h3 id=&quot;the-freesound-api&quot;&gt;The Freesound API&lt;/h3&gt;&lt;p&gt;In 2011 a web API endpoint was added to Freesound and since then it has been evolving and incorporating new functionalities together with the site. The current version of the API, &lt;strong&gt;Freesound APIv2&lt;/strong&gt;, can be used by 3rd party developers and researchers to programatically search sounds in Freesound, filter results (including CC license), download audio analysis and the sounds themselves. It can also be used to upload new sounds, describe, rate and comment existing ones. In summary, it provides an alternative interface to that of the web browser so that &lt;strong&gt;Freesound content can be easily integrated in all sorts of projects&lt;/strong&gt; outside Freesound itself.&lt;/p&gt;
&lt;p&gt;The Freesound API is a RESTful API that can be used similarly to other web APIs. To facilitate access to the API, we provide clients in &lt;a href=&quot;/blog/entries/freesound-intro/(https://github.com/mtg/freesound-python&quot;&gt;Python&lt;/a&gt;), &lt;a href=&quot;https://github.com/g-roma/freesound.js&quot;&gt;Javascript&lt;/a&gt; and &lt;a href=&quot;https://github.com/mtg/freesound-juce&quot;&gt;Juce (C++)&lt;/a&gt; frameworks, but there are also &lt;a href=&quot;https://freesound.org/docs/api/client_libs.html&quot;&gt;community-developed clients&lt;/a&gt; for other programming languages including Max/MSP, Perl, Supercollider, Objective-C, Scala and QT (C++). As an example, using the Python Freesound API client a search for &lt;em&gt;dog&lt;/em&gt; sounds would look like this:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;freesound&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freesound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FreesoundClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;Your API key obtained from https://freesound.org/apiv2/apply&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;token&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The query could be further refined and, for instance, include only dog sounds which are shorter than 5 seconds, with a high average rating, and in CC0 license like this:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;duration:[0.0 TO 15.0] avg_rating:[4.5 TO 5.0] license:&amp;quot;Creative Commons 0&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Search results can also be easily downloaded:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrieve_preview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/direcotry/to/save/the/file/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the features that make the Freesound API unique is the ability to retrieve and filter sounds using &lt;em&gt;audio features&lt;/em&gt; extracted with a &lt;strong&gt;computational analysis of the sounds uploaded to Freesound&lt;/strong&gt;. For that purpose we use a powerful open source audio analysis library called &lt;a href=&quot;https://essentia.upf.edu/&quot;&gt;Essentia&lt;/a&gt; that is also developed at the Music Technology Group. This allows the implementation of features like audio similarity search (i.e. searching for sounds given another sound as a &lt;em&gt;target&lt;/em&gt;), or advanced exploration interfaces in which audio clips are displayed in a space according to some automtically estimated acoustic properties (see the &lt;em&gt;Freesound Explorer&lt;/em&gt; example below).&lt;/p&gt;
&lt;p&gt;The Freesound API is a very powerful tool to facilitate the reuse of Freesound content. You can find more information about the API and its features in the &lt;a href=&quot;https://freesound.org/docs/api/&quot;&gt;Freesound API documentation&lt;/a&gt;. The Freesound API is currently being used by companies like Acoustica, AudioGaming, Google, Mozilla, Soundly, Spotify, Waves Audio, Wolfram, and others.&lt;/p&gt;
&lt;h3 id=&quot;spreading-cc-content-in-the-world&quot;&gt;Spreading CC content in the world&lt;/h3&gt;&lt;p&gt;The audio content hosted in Freesound has a second life outside the website. It is very hard to track all the projects in which Freesound content is used, but with 50k unique visits per day, the accumulated millions and millions of download records and the integration with 3rd party applications, it becomes clear that &lt;strong&gt;Freesound is spreading Creative Commons audio virtually everywhere&lt;/strong&gt;. Some users choose to use the Freesound forums to &lt;a href=&quot;https://freesound.org/forum/your-work-made-with-freesounds/&quot;&gt;explain the work they do using Freesound sounds&lt;/a&gt;, including music, videogames, animations, movies, theater plays, education, etc. Unfortunately this is just a small minority of users. To try to keep track of some of the applications, research proejcts and other initiatives that use Freesound content, the &lt;a href=&quot;https://labs.freesound.org&quot;&gt;Freesound Labs&lt;/a&gt; platform was introduced back in 2015. Currently it lists more than 40 projects and over 50 research papers using Freesound data. Some of these projects include &lt;strong&gt;CTAG's Strämpler&lt;/strong&gt;, an eurorack sample streaming and sound synthesis module; &lt;strong&gt;Spotify's Sountrap&lt;/strong&gt;, an online DAW with direct integration of Freesound search; &lt;strong&gt;Le Sound's AudioTexture&lt;/strong&gt;, a granular synthetizer that transforms Freesound clips; and &lt;strong&gt;Freesound Explorer&lt;/strong&gt;, a visual interface for exploring Freesound in a 2-dimensional space and create music at the same time.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;strampler.png&quot; width=500px/&gt;&lt;br&gt;
&lt;a href=&quot;https://www.creative-technologies.de/ctag-strampler-a-eurorack-sample-streaming-and-sound-synthesis-module/&quot;&gt;Strämpler&lt;/a&gt; (see &lt;a href=&quot;https://www.youtube.com/watch?v=zmj8tKPHV8g&quot;&gt;video here&lt;/a&gt;)&lt;/p&gt;&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;soundtrap.png&quot; width=500px/&gt;&lt;br&gt;
&lt;a href=&quot;https://www.soundtrap.com&quot;&gt;Soundtrap&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;audiotexturefree.png&quot; width=500px/&gt;&lt;br&gt;
&lt;a href=&quot;https://lesound.io/product/audiotexture-free/&quot;&gt;Audio Texture&lt;/a&gt; (see &lt;a href=&quot;https://www.youtube.com/watch?v=pv1ozaJ3K2o&quot;&gt;video here&lt;/a&gt;)&lt;/p&gt;&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;freesound_explorer2.png&quot; width=500px/&gt;&lt;br&gt;
&lt;a href=&quot;http://labs.freesound.org/fse/&quot;&gt;Freesound Explorer&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;under-the-hood&quot;&gt;Under the hood&lt;/h3&gt;&lt;p&gt;Both the Freesound website and API run on a modern technology stack which was built with high load and scalability in mind. Below is a diagram with the main blocks of the architecture. The main website consists of a &lt;a href=&quot;https://www.djangoproject.com&quot;&gt;Django&lt;/a&gt; application and HTML/CSS/JS frontend connected to a &lt;a href=&quot;https://www.postgresql.org&quot;&gt;PostgreSQL&lt;/a&gt; database. This implements sound browsing and basic social interaction features (forum, sound comments, sound ratings, private messaging, etc.). Text indexing is supported by an Apache &lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt; server including text descriptions and tags, which allows for sophisticated sound text queries using the Solr query syntax. A distributed architecture is used for processing incoming sounds, producing compressed previews and waveform/spectrogram images (using Python's &lt;a href=&quot;https://pillow.readthedocs.io/en/stable/&quot;&gt;Pillow&lt;/a&gt; package), as well as for audio feature extraction. Feature extraction and the similarity search service are supported with the abovementioned Essentia library. Finally, Freesound uses &lt;a href=&quot;https://www.nginx.com&quot;&gt;NGINX&lt;/a&gt; webserver to serve the Django app and static content in the appservers, and &lt;a href=&quot;http://www.haproxy.org&quot;&gt;HAProxy&lt;/a&gt; loadbalancers to balance the load of incoming requests across the appservers.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;diagram.png&quot; width=600px/&gt;&lt;/p&gt;&lt;p&gt;The code of the Freesound website is &lt;strong&gt;open source&lt;/strong&gt;, and all development happens in our &lt;a href=&quot;https://github.com/mtg/freesound/&quot;&gt;public source code repository&lt;/a&gt;. External contributions are welcome so if you want to participate don't hesitate to get in touch with us. Of course if you're not interested in devleopment but still want to contribute to Freesound you can upload sounds or &lt;a href=&quot;https://freesound.org/donations/donate/&quot;&gt;consider making a donation&lt;/a&gt; :)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp/">
    <title type="text">CC Platform Toolkit Revamp</title>
    <id>urn:uuid:076e809b-c084-3977-8ca5-7bbd76064c50</id>
    <updated>2019-12-16T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp/" />
    <author>
      <name>apdsrocha</name>
    </author>
    <content type="html">&lt;p&gt;I've just finished my second week as an intern for CC (part of the Outreachy program 2019-2020 round), helping revamp the &lt;a href=&quot;https://creativecommons.org/platform/toolkit/&quot;&gt;Platform Toolkit&lt;/a&gt; and it's been a great learning experience so far.&lt;/p&gt;
&lt;p&gt;Before we get into what I've been doing, I wanted to quickly explain why I think this is such a cool project - maybe you'll think it's cool too and want to collaborate as well at some point :) See, the better this toolkit is, the more we increase our chances of having really great, user-friendly implementations in partner platforms. Providing a helpful toolkit is one of the ways we can guide users towards finding better information, understanding licenses, and making better use of content -- not to mention that getting this right ensures we reach a ton of people.&lt;/p&gt;
&lt;p&gt;So in order to start, we began by taking a step back and  studying in detail how platforms are addressing licenses today. These first weeks I went through a lot of user flows, seeing what works, and what were possible points to address and improve. The greatest challenge so far was trying to break down what were good UX/UI practices that could benefit any platform -- regardless of the type of content or current layout. Once I analyzed the material through this point of view, it was easier to filter the kind of information that must be addressed in our new version of the toolkit. This first study also gave me a lot of material to begin thinking about our next step: user research. It's important to find out how much of this process is intuitive to users and what flies under the radar -- having more answers is crucial so that we can be assertive when making suggestions.&lt;/p&gt;
&lt;p&gt;I'll keep checking in every two weeks with updates on how this project is going. Trust me, there's still a lot of really exciting tasks to be done in the following months :)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/aws_grant/">
    <title type="text">Creative Commons Awarded AWS Imagine Grant</title>
    <id>urn:uuid:4d147a26-5b4d-3f51-a551-0df926143964</id>
    <updated>2019-12-12T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/aws_grant/" />
    <author>
      <name>aldenpage</name>
    </author>
    <content type="html">&lt;p&gt;Creative Commons was recently awarded a $125,000 AWS Imagine grant, which will cover infrastructure costs associated with some of the key features we intend to add to CC Search in 2020. In particular, some of the key outcomes we hope to have achieved at the end of the year are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Machine-generated tags using cutting edge computer vision technology produced by Amazon Rekognition. In addition to surfacing metadata-sparse images in our catalog, we may be able to offer features like filtering by artistic medium (painting, photo, pencil sketch, etc).&lt;/li&gt;
&lt;li&gt;Produce CC-hosted thumbnails for every image instead of relying on third-party images, which are often suffer from unreliable availability, are resistant to embedding, or are otherwise too low quality for our purposes.&lt;/li&gt;
&lt;li&gt;Acquire knowledge of other features of images, such as their resolution or filesize. Since we often scrape links to images without any further processing, we rely on the data upstream providers give us, which is often missing this information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because cutting-edge computer vision typically requires specialized hardware and expertise, outsourcing this task to AWS ends up being economical in comparison to implementing it ourselves. Nonetheless, due to the volume of images we need to classify, this will take up a significant amount of the grant budget; we intend to hand-pick which data sources get tagged in order to make the best use of the resources available to us.&lt;/p&gt;
&lt;p&gt;When we’re discussing computer vision, generating thumbnails and collecting resolution sounds  comparatively mundane, but it is actually a significant technical challenge that will require a serious investment in infrastructure as well. For one thing, in order to feed images to Rekognition, we need to have a copy of the image in the first place, which you may be surprised to find that we currently do not! All of our content is hosted by the original third party sources and embedded in the search results page. Sometimes, we will sneakily proxy images through our own infrastructure (in cases where the source does not offer HTTPS or an appropriately sized thumbnail), but in most instances, we have to place complete trust in what the source makes available to us. This has lead to problems with availability. Nobody likes it when the images in their search results are inexplicably broken because a third-party datacenter is having issues. Using the funds from the grant, we will at the very least be able to generate thumbnails just before they are served to the user, and possibly even bulk thumbnail our catalog of 325 million images. That’s a huge task - there may very well be petabytes of image data to scrape.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In order to thumbnail and label our entire catalog, we are going to need to build some additional infrastructure. For the thumbnailing component, we intend to use Scrapy Cluster (composed of an MSK queue, an Elasticache instance, some utility EC2 instances for controlling the cluster and communicating between components, and a large cluster of EC2 instances running web scrapers) to build a distributed system for rapidly downloading and resizing images. A controller instance will feed image URLs into the job queue. Once the destination image URLs have been fed to the cluster, Scrapy Cluster dispatches the URLs to a scalable group of crawler bots, which fetch the image, collect some metadata (such as dimensions), resize the images, and then upload the thumbnails to S3 while pushing the new image metadata back to our image database on RDS. We will then be able to start serving up the thumbnails to our end users. While we initially plan to only use this cluster for producing thumbnails, we expect it could be valuable for discovering and indexing additional CC licensed content in the future. See below for a visualization of the distributed scraping and thumbnailing system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scraping and thumbnailing system:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/aws_grant/scraping_cluster.png&quot; alt=&quot;Image scraping and thumbnailing system&quot;&gt;&lt;/p&gt;
&lt;p&gt;Image recognition pipeline:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/aws_grant/object_recognition.jpg&quot; alt=&quot;Object recognition pipeline&quot;&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/building-distributed-indexer/">
    <title type="text">Building a Distributed Indexer for a Search Engine</title>
    <id>urn:uuid:707d616c-8953-3a17-925b-02567a4c9516</id>
    <updated>2019-12-11T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/building-distributed-indexer/" />
    <author>
      <name>aldenpage</name>
    </author>
    <content type="html">&lt;p&gt;With &lt;a href=&quot;https://search.creativecommons.org&quot;&gt;CC Search&lt;/a&gt;, we want to make it possible to search all of the estimated 1.6 billion Creative Commons works on the internet. In order to make it possible for thousands of people to search billions of records in a reasonable period of time, we have to build a big inverted index (a data structure similar to the index in the back of a textbook), which allows very fast lookups of documents related to the user’s search query. To populate this index, we have to build a large database of Creative Commons works and then replicate it to our search index, which is powered by Elasticsearch.&lt;/p&gt;
&lt;p&gt;It turns out that, once your search index contains more than just a few million documents, maintaining the index is a non-trivial problem. Some of the concerns we had for our implementation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How often do we update the index as new Creative Commons licensed works are discovered? What if we need to make a change to every single document in the index, such as when we modify our search algorithm?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can we rebuild the entire index quickly?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can we rebuild the index without users noticing degraded search performance or, worse yet, not being able to serve results while reindexing?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can we make this a completely automated process and avoid further operations tedium?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is no off-the-shelf solution for this, particularly when performance is of concern; anybody in the business of writing a large search engine is going to have to write a custom indexer at some point.&lt;/p&gt;
&lt;p&gt;In the end, given the size of our dataset was in the range of a few hundred gigabytes, it turned out that bulk reindexing every week would be good enough for our purposes; our current upstream data sources don’t update much more frequently than that anyway. We wrote a program that automated the procedure of refreshing our database with the latest upstream data and pushing it to Elasticsearch, all completely online and without negative impact to production performance. A single server was responsible for moving all of our image data around to the appropriate data stores and juggling temporary tables and indices to hide the indexing process from the end user. I wrote a little bit about the design of this piece in &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/searching-300-million/&quot;&gt;a previous blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/building-distributed-indexer/one_server_indexing.png&quot; alt=&quot;Ingestion Server architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;At this point, we could reindex all 325 million images in about 1.5 days. That’s not exactly fast, but it could be scheduled to run over the weekend in a “set and forget” manner. That was good enough for about a year.&lt;/p&gt;
&lt;p&gt;However, in practice, we need to refresh our data more than once a week. For instance, if something went wrong with the indexing job (as often does while new search features are being tested on real data), we would have to start the process all over again, which means that the cost of even a small bug in indexing logic can dramatically lengthen the time it takes to deliver a new feature. More importantly, we wanted to iterate on our search algorithm, which meant we had to reindex our data quite frequently. We hoped to avoid this by performing tests on mock data or smaller subsets of the real data, but this ends up being only weakly correlated with search quality in the complete production dataset (in my experience, search result quality is inseparable from the quality of the underlying data). It became clear that indexing performance was slowing down the software development lifecycle, and further optimization was needed.&lt;/p&gt;
&lt;p&gt;Our single-node indexer had a throughput of about 2,500 records per second, which is far below Elasticsearch’s advertised indexing rates (although there are &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-indexing-speed.html&quot;&gt;numerous factors unique to each workload&lt;/a&gt; that affect indexing speed). Further profiling revealed that in our case we were likely bottlenecked by our Python code rather than I/O to the cluster: writing to the search index was reasonably fast (7,000 per second), but the indexer spent a ton of CPU time on deserializing records pulled in from database chunks, accounting for 2/3rds of the indexing process. A possible solution would be rewriting the indexer in a faster language, but there are a lot of drawbacks to this approach in that rewrites are costly, the likely performance improvement is not foreseeable, and we had already sunk plenty of time into writing the logic in Python. Instead, we decided to distribute the existing process across multiple machines, which would allow us to reuse existing code and scale up to an arbitrary number of nodes as our indexing performance requirements inevitably increase with the size of our data set.&lt;/p&gt;
&lt;p&gt;A few weeks of coding later, we had a solution in place that increased throughput to 15,000 records per second, or a 6-fold increase in performance, by splitting the work across 6 nodes. Indexing responsibilities are offloaded from Ingestion Server, which instead acts as a central point for coordinating the multiple indexing workers through a simple RPC API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/building-distributed-indexer/indexing1.jpg&quot; alt=&quot;Partitioning the data&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/building-distributed-indexer/indexing2.jpg&quot; alt=&quot;Simultaneous indexing&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/building-distributed-indexer/indexing3.jpg&quot; alt=&quot;Notification and promotion&quot;&gt;&lt;/p&gt;
&lt;p&gt;There appears to be ample room for us to increase the node count before we become I/O bound by the database or Elasticsearch. I’m assuming doubling our node count would approximately halve our indexing time. Eventually, if our search index becomes as big as we anticipate it will, we are going to have to make the indexer workers better utilize the underlying hardware somehow, perhaps by rewriting the “hot” parts in a lower level language than Python, but that seems to be a distant concern as of today. Additionally, since workers only run when indexing is in progress, the cost of maintaining these additional nodes is low; it costs about $10 in cloud time to perform a full reindex of all 325MM images.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2019-11-25-empowering-collaboration/">
    <title type="text">Empowering Collaboration in the Commons</title>
    <id>urn:uuid:c9d7d6f2-545c-3adb-95b7-c51cdee22ed4</id>
    <updated>2019-11-25T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2019-11-25-empowering-collaboration/" />
    <author>
      <name>TimidRobot</name>
    </author>
    <content type="html">&lt;p&gt;In the past few months I have been privileged to attend &lt;a href=&quot;https://wikimania.wikimedia.org/wiki/2019:Program&quot;&gt;Wikimania
2019&lt;/a&gt; and the Google Summer of Code &lt;a href=&quot;https://sites.google.com/view/gsoc-mentorsummit2019/home&quot;&gt;2019 Mentor
Summit&lt;/a&gt;. At these events I was overwhelmed with the amount of
care and effort people are putting into their projects and communities.&lt;/p&gt;
&lt;p&gt;At Wikimania 2019, I was impressed with how much overlap there is between the
Creative Commons and Wikimedia communities. Both communities are actively
engaged in expanding the content and participation in the commons--in the
collection and communities empowered by open content. I have a lot of hope in
what existing and future collaborations will allow. At the conference, I got to
see just the tip of the iceberg representing volunteers’ work across the globe.
I hope we at Creative Commons can continue to keep the demands of our daily
workloads in perspective and increase collaboration with the global effort.&lt;/p&gt;
&lt;p&gt;At the GSoC 2019 Mentor Summit I was able to attend a good number of sessions
on increasing and maintaining participation. Based on the session discussions
and the work already being done by other organizations, I expect we’ll pursue
the following strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Improved support for first timers--people who are engaging with code
repositories for the first time&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve tagging of issues&lt;/li&gt;
&lt;li&gt;Dedicated documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improve support for GSoC and Outreachy program applicants&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide application templates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Participate in social media networks to actively recruit groups who are
underrepresented in FOSS (free and open source software)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Collect anonymous demographic data &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A couple of organization examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Public Lab: &lt;a href=&quot;https://code.publiclab.org/&quot;&gt;Community toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Software Foundation: &lt;a href=&quot;https://python-gsoc.org/index.html&quot;&gt;Python GSoC – Home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you to the community and the work you’re doing &amp;lt;3&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/ssr-ccsearch/">
    <title type="text">Server Side Rendering with Vue.JS on CC Search</title>
    <id>urn:uuid:1dcdb6c2-1f17-364b-8ec0-9454ba69a338</id>
    <updated>2019-11-01T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/ssr-ccsearch/" />
    <author>
      <name>brenoferreira</name>
    </author>
    <content type="html">&lt;p&gt;The frontend of CC Search is built with Vue.JS, which is a Javascript library for managing and rendering DOM elements in the browser, similar to React and Angular. But, as it is usually the case with applications built with those libraries, the application was rendered completely on the users' browser. It means that when users loaded CC Search, the server would send a blank HTML page and some Javascript files that would be downloaded by the user. Only once those JS assets were loaded and parsed, would the rendering begin.&lt;/p&gt;
&lt;p&gt;While easier to implement initially, when we needed to ship the initial versions of CC Search faster to validate our ideas, this approach has some significant disadvantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Performance: The page initially loaded doesn't contain any visual elements. The user still has to download a few KBs of JS, which have to be parsed and interpreted by the browser before anything is rendered. On faster connections and devices, this performance hit can be negligible, but on slower and older devices and slow mobile networks, this can degrade performance significantly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Empty HTML page: When the initial HTML sent by the server is empty, meaning no visual elements, any internet bots that parse a page HTML wouldn't work properly, that is: SEO, social media websites (when users share a link to CC Search on Twitter or Facebook, those nice previews wouldn't work), the Web Archive, etc..&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So on July 26th we deployed our first release of CC Search with Server Side Rendering. You can see the work that went into it on this &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411&quot;&gt;Pull Request on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My goal with this blog post will be to explain some of the challenges that we faced while both coding the SSR support on the VueJS codebase and also the operations side with deployment and maintenance.&lt;/p&gt;
&lt;p&gt;If you are interested in learning how to do SSR with VueJS, I highly recommend reading its &lt;a href=&quot;https://ssr.vuejs.org/&quot;&gt;documentation first&lt;/a&gt;, as it provides a really helpful and comprehensive getting started guide.&lt;/p&gt;
&lt;h2 id=&quot;initial-coding-challenges&quot;&gt;Initial coding challenges&lt;/h2&gt;&lt;p&gt;Browser specific APIs&lt;/p&gt;
&lt;p&gt;A few modules and components of CC Search have dependencies on browser specific APIs, such as the &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects. This causes a problem with SSR because on the server, the Vue application is running on a Node.JS environment where those APIs don't exist. Therefore we need to do a couple of things to remove all possible calls to these APIs on the server. We adopted a few different strategies depending on each case.&lt;/p&gt;
&lt;p&gt;On some cases, a simple check for undefined values is sufficient, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const queryParams = !(typeof window === 'undefined') ? window.location.search : '';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;link to change diff &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-e3b1ca4ad5a207c170c97a435b3d1ff3L15&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There were also cases of components that accessed browser APIs directly on, for example, &lt;code&gt;computed&lt;/code&gt; values. Since those values are eagerly evaluated during render of a component, it would break on server rendering.&lt;/p&gt;
&lt;p&gt;The solution adopted was to set those values on the &lt;code&gt;mounted&lt;/code&gt; lifecycle method, which runs exclusively on the browser, not on the server. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mounted() {
  // for SSR, sets the value with window.location, which is only available on client
  this.shareURL = window.location.href;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;link to change diff &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-f987cb63f02cb3471ab3cfae238746f7R37&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But there was a more complicated case in which we had dependencies to visual components which in turn depended on these browser APIs to render. One in particular was the image search result grid, which is a responsive grid layout that fits all images nicely on whatever screen size the users have.&lt;/p&gt;
&lt;p&gt;One of the cases, we had a dependency tree that looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- BrowsePage
  - SearchGrid
    - GridLayoutComponent // specific component with browser API render dependency
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few other page components also depended on this &lt;code&gt;GridLayoutComponent&lt;/code&gt; component. Our solution was to split the higher level components into server and client versions. The browser version would render the search grid, and the server version wouldn't.&lt;/p&gt;
&lt;p&gt;You can an example of this case with the client version of the component &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/commits/d3e05c01262d4fbc5bed1eceb1c256fc8da9ea80#diff-15c47fe052b8e07589e6cd5c7ce126fe&quot;&gt;here&lt;/a&gt; and the server version &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/commits/d3e05c01262d4fbc5bed1eceb1c256fc8da9ea80#diff-9bfa3295d81a84c0fee1b5af98992561&quot;&gt;here&lt;/a&gt;. We used a mixin to provide the component interaction logic &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/commits/d3e05c01262d4fbc5bed1eceb1c256fc8da9ea80#diff-b4102772ceac63ff8d35545a2d003200&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since we had different components, we also needed different routers that mapped to the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-96a7306e1ed8bbbc4982aac42b5ef8df&quot;&gt;server&lt;/a&gt; and &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-9b23694ae94e6ff902037f3d79772bae&quot;&gt;client&lt;/a&gt; components.&lt;/p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;&lt;p&gt;One thing we did, and still do, is build the assets for both server and client rendering. One reason is that we need both anyways, because on the client we need to do something called &lt;a href=&quot;https://ssr.vuejs.org/guide/hydration.html&quot;&gt;client side hydration&lt;/a&gt;, and also because if there's a problem on the server renderer that breaks our production environment, we can easily revert back to the old way of serving an empty HTML page and do client side rendering and keep CC Search up. We had to do that on the first few days after the initial deployment when we identified a few problems. I'll cover some of them below.&lt;/p&gt;
&lt;h2 id=&quot;optimizations&quot;&gt;Optimizations&lt;/h2&gt;&lt;h3 id=&quot;micro-cache&quot;&gt;Micro cache&lt;/h3&gt;&lt;p&gt;Soon after we deployed the initial release of SSR, we noticed that our Node servers were sometimes crashing, for memory exhaustion reasons, or sometimes taking too long to respond due to GC running. It seems that rendering Vue apps has a &lt;a href=&quot;https://ssr.vuejs.org/guide/caching.html#page-level-caching&quot;&gt;high memory footprint from components and their Virtual DOM Nodes&lt;/a&gt;. Because of that, we decided to adopt a micro-caching of every server response, as you can see &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/475/commits/aa5ee97101d38443416ef19a954dff63031e293a&quot;&gt;here&lt;/a&gt;. Important caveat: no CC Search page has user specific content. They all serve the same content, no matter which user requests it. So that makes it trivial to cache the responses, since the response never changes for individual users. If that were the case, we either wouldn't be able to cache the response or only cache some request responses but not others.&lt;/p&gt;
&lt;p&gt;After implementing this cache, we saw that the memory consumption dropped dramatically and response times were now constant of a few milliseconds. Node wasn't crashing because it ran out of memory and GC wasn't being triggered as much lowering response times.&lt;/p&gt;
&lt;h3 id=&quot;not-loading-data-twice&quot;&gt;Not loading data twice&lt;/h3&gt;&lt;p&gt;Another optimization was to not repeat requests, which were made on the server, again on the client.
One example is the &lt;a href=&quot;https://ccsearch.creativecommons.org/photos/df2e7f75-7fe9-457b-a58f-edc1833a1ed8&quot;&gt;image details page&lt;/a&gt;. The image can be loaded both on the server and the client, but we don't want the user to request the image data if it was already loaded on the server.&lt;/p&gt;
&lt;p&gt;We did this by using the &lt;code&gt;serverPrefetch&lt;/code&gt; method to load the data on the server, but on the client, in the &lt;code&gt;mounted&lt;/code&gt; method, we check if the data isn't already available before making the request. You can see how that works &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-e33cf6c2e6f63a3ac958ac500eeabcaaR87&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;future-improvements&quot;&gt;Future improvements&lt;/h2&gt;&lt;p&gt;As said before, we have a dependency on a component that uses browser APIs which doesn't work on the server side. That dependency is &lt;a href=&quot;https://github.com/shershen08/vue-masonry&quot;&gt;Masonry Layout&lt;/a&gt;. And because of that, we had to split components and router into server and client versions.&lt;/p&gt;
&lt;p&gt;To remove that complexity, we will probably try to use a pure-CSS approach to generate the responsive grid, as described in &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues/489&quot;&gt;this issue on Github&lt;/a&gt;. If that doesn't work, we'll use something like &lt;a href=&quot;https://github.com/egoist/vue-client-only&quot;&gt;vue-client-only&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2019-09-25-ccgn-redesign/">
    <title type="text">Revamping the Creative Commons Global Network website</title>
    <id>urn:uuid:f7cf9cf1-939f-397e-981f-87ad4e9c50d5</id>
    <updated>2019-09-25T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2019-09-25-ccgn-redesign/" />
    <author>
      <name>hugosolar</name>
    </author>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://network.creativecommons.org&quot;&gt;CC Global Network&lt;/a&gt; website is the face of our global community; it is the home for a community of advocates, activists, scholars, artists, and users working to strengthen the Commons worldwide.
One of our organizational goals regarding the global network is to “create value for members, toward impact at global scale” and that’s why we plan on redesigning the Global Network website.&lt;/p&gt;
&lt;h2 id=&quot;increase-value-for-members&quot;&gt;Increase value for members&lt;/h2&gt;&lt;p&gt;When we think of a website focused on members and their possible needs, we have to think about how different users interact with the website. We established three differents users/personas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Not logged in users:&lt;/em&gt; users looking for global network general information or how to begin the sign up process&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Logged in but not approved yet&lt;/em&gt;: users looking for information about their membership approval status&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Logged in and approved members&lt;/em&gt;: users utilizing the site’s search function and contacting other members&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keeping this in mind, three differents homepages were designed according to each identified profile.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/blog-ccgn-home.png&quot; alt=&quot;CCGN differents homepages&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;improved-user-search&quot;&gt;Improved user search&lt;/h2&gt;&lt;p&gt;We listened to the community feedback and developed a major revamp of the member section. We improved the member list and the search section by adding useful filters to help identify specific people or groups of people based on a range of factors, such as nationality or language.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/user-search.png&quot; alt=&quot;User search filters&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;member-profiles&quot;&gt;Member profiles&lt;/h2&gt;&lt;p&gt;Member profiles were redesigned to take advantage of the current metadata of users so we can show the information in a better way. In addition, the profile shows more/less information if you are/aren’t approved as a member.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/member-profile.png&quot; alt=&quot;Member profile&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;chapters-section&quot;&gt;Chapters section&lt;/h2&gt;&lt;p&gt;Giving more visibility for the local chapters’ infrastructure, this entire section was redesigned considering the network’s global reach and the necessity of easily searching for details and specific chapters. The new interface supports switching between the map and the sortable list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/chapters-map.png&quot; alt=&quot;Map from chapters around the world&quot;&gt;
&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/chapters-list.png&quot; alt=&quot;Chapters list with details&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;keeping-forward-the-global-network-website&quot;&gt;Keeping forward the global network website&lt;/h2&gt;&lt;p&gt;This is certainly not the end of our revamp of the CC Global Network website, we're always working on giving the members a better experience by fixing bugs and updating the interface. If you have any feedback, feature request, or bug report please feel free to &lt;a href=&quot;https://github.com/creativecommons/commoners/issues&quot;&gt;open an issue&lt;/a&gt; in the &lt;a href=&quot;https://github.com/creativecommons/commoners&quot;&gt;Commoners repository&lt;/a&gt; on Github or reach out to us on Slack.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2019-09-11-google-docs-plugin/">
    <title type="text">Creative Commons Google Docs Add-on</title>
    <id>urn:uuid:ba029f48-4750-335c-b171-9d4a4f73f956</id>
    <updated>2019-09-11T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2019-09-11-google-docs-plugin/" />
    <author>
      <name>brandonopened</name>
    </author>
    <content type="html">&lt;p&gt;A few years ago I published a &lt;a href=&quot;https://gsuite.google.com/marketplace/app/creative_commons_license_chooser/803008856330&quot;&gt;Google Docs Add-on that allowed users to insert a Creative Commons license image and link into their Google doc&lt;/a&gt;. Since then it’s been used thousands of times and I’ve gotten some great feedback from teachers about how nice it is to teach their students about digital literacy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-11-google-docs-plugin/image1.png&quot; alt=&quot;Plugin screenshot 1&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why&lt;/h3&gt;&lt;p&gt;I created the add-on after inspiration from students in one of the classes I teach at &lt;a href=&quot;http://www.fresno.edu/&quot;&gt;Fresno Pacific University’s Graduate School of Education&lt;/a&gt;. I was teaching a course on digital literacy, and open licenses and fair use was a large portion of the course.&lt;/p&gt;
&lt;p&gt;To get started, I used the &lt;a href=&quot;https://developers.google.com/apps-script/overview&quot;&gt;templates Google provided about building an addon&lt;/a&gt;, took a look at the html etc on the Creative Commons License Chooser page itself, and eventually got something working! It took a couple of days off and on and mostly was me remembering javascriptI admit I had to pay a guy on Upwork to help clean up the code before I published it because sometimes the chooser would keep selecting hundreds of license images… of course, this was also before I was a bona fide contributor to the open source project I Product Manage, &lt;a href=&quot;http://www.github.com/opensalt/opensalt&quot;&gt;OpenSALT&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My hope is that folks are able to normalize the idea of putting a Creative Commons license on their public documents, as well as when &lt;a href=&quot;https://support.google.com/youtube/answer/2797468?hl=en&quot;&gt;uploading creative content to Youtube&lt;/a&gt; etc. Teachers in particular would be served by publishing a license so that if their work shows up unauthorized on &lt;a href=&quot;https://www.edweek.org/ew/articles/2018/12/19/on-teachers-pay-teachers-some-sellers-are.html&quot;&gt;Teachers Pay Teachers without attribution or for commercial purposes&lt;/a&gt;, they have a legal avenue to pursue it to be taken down. Even &lt;a href=&quot;https://creativecommons.org/2015/05/06/medium-embraces-cc-licenses/&quot;&gt;Medium has an option to publish documents with a CC license&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My nine year teaching career in Fresno Unified School District plus my career in Edtech (OpenEd.com, ACT) have opened my eyes to the need for a more open Web. Creative Commons licenses allow ‘free’ to not just be free, but able to conform to the five &lt;a href=&quot;https://opencontent.org/definition/&quot;&gt;R’s of open content&lt;/a&gt;(retained, reused, revised, remixed, and redistributed) and enable greater opportunities for innovation and equity.&lt;/p&gt;
&lt;h3 id=&quot;what&quot;&gt;What&lt;/h3&gt;&lt;p&gt;This month I’ve finally updated it from the old Google Docs add-on store to the Gsuite Marketplace and updated some links. I’ve also updated the &lt;a href=&quot;https://github.com/brandonopened/creativecommons_gdocs&quot;&gt;Github sit&lt;/a&gt;e as the main website for the app and hope to implement some changes based on the work in&lt;a href=&quot;https://github.com/creativecommons/cc-license-chooser&quot;&gt; this Github repo&lt;/a&gt; with an updated license chooser process etc. The add-on has been installed thousands of times and usually has couple of hundred uses a month based on statistics.&lt;/p&gt;
&lt;p&gt;I hope in the future to use an API call to support different languages, and perhaps embed RDF into the Google doc if that is possible to make the license machine-searchable. This is a fun project that is useful and helping teach me more about coding and best practices for open source software.&lt;/p&gt;
&lt;h3 id=&quot;how&quot;&gt;How&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;In Google Docs, select “Get Add-ons” &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-11-google-docs-plugin/image2.png&quot; alt=&quot;How-to screenshot 1&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Input Creative Commons and press enter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-11-google-docs-plugin/image3.png&quot; alt=&quot;How-to screenshot 2&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install and use!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-11-google-docs-plugin/image4.png&quot; alt=&quot;How-to screenshot 3&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;video-tutorial&quot;&gt;Video tutorial&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://youtu.be/sQZFlNXEVZ4&quot;&gt;A video tutorial is available here&lt;/a&gt; or by clicking on the image below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=sQZFlNXEVZ4
&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/sQZFlNXEVZ4/0.jpg&quot; 
alt=&quot;Video tutorial&quot; border=&quot;10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/improving-ranking/">
    <title type="text">Some thoughts on improving the relevance of images in CC Search</title>
    <id>urn:uuid:79bf7360-f0e9-3023-8ec4-827550e3502e</id>
    <updated>2019-09-06T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/improving-ranking/" />
    <author>
      <name>aldenpage</name>
    </author>
    <content type="html">&lt;p&gt;Like other image search services, CC Search matches queries with keywords in descriptive metadata derived from the source page of the image, including user-generated tags, the title of the image, the name of the author, and, if provided, a description of the image. Our search engine is able to sift through our collection of 325 million images to find positive matches.&lt;/p&gt;
&lt;p&gt;Finding images that match the user’s keywords is easy. The much more difficult problem is ranking the results in a meaningful way. Most search queries will have thousands or millions of potential matches. The user is only going to look at maybe the first few hundred results at most. Because of that, it’s important to make sure the best images are presented first. How do we determine which images are “the best”?&lt;/p&gt;
&lt;p&gt;With nothing except descriptive metadata, we have few options for ranking images. The basic premise behind the current ranking algorithm is that the more that the user’s keywords appear in the metadata, the more likely that the image is relevant to the user’s work. There are plenty of ways to fine-tune this approach by adjusting the impact of each metadata field, how these fields are interpreted during indexing and querying, and which matching algorithms are chosen for each field, but ultimately, the ranking is still based off of a very limited amount of information. These fields tell us that an image is a plausible result for a search, but does nothing to tell us about the quality of the image. The end result is that our ranking algorithm will treat a blurry amateur photo on someone’s Flickr photo stream the same as a work by a master painter, as long as the keywords match. In an environment where we could hand-curate every work in our database, this would be acceptable; in the real world, where a lot of low-effort stuff gets uploaded to the internet, we need to find a way to separate the wheat from the chaff.&lt;/p&gt;
&lt;p&gt;How can we figure out which images are “significant”? That’s a fuzzy qualitative measure that we won’t be able to teach a computer to judge. Instead, we have to find some metrics that can act as a proxy for significance. Popularity and provenance seem like two promising indicators.&lt;/p&gt;
&lt;p&gt;What makes an image popular? Other search engines have solved this problem using PageRank, which uses the number of links to a page across the internet as an indicator that a result is high-quality. In our case, PageRank might not be as applicable, as our images tend to be sourced from a small number of trusted domains; instead of ranking entire websites, we need to rank individual images. Still, the basic idea of using popularity as a ranking factor sounds like a good idea. How can we use that for our case? What other factors can we use to determine whether an image should be given preferential treatment over others? Here’s a few possible ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How popular is this image on its original platform? For images from social sites, how many people are following the author? Has anybody added the image to their favorites, or does it have a particularly large number of views? Has it been “liked” a lot by its users? For images from Wikimedia Commons, how many articles reference the image?&lt;/li&gt;
&lt;li&gt;Is the image from a high-quality curated collection like the MET Museum, or from a social media website where the quality is more variable?&lt;/li&gt;
&lt;li&gt;Using computer vision technology, can we determine anything else about the image? Is it a painting or a drawing? Is the image an overly compressed 50x50 JPG? Can we detect that it’s blurry? &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these metrics can be hooked up to our search engine and used as factors in ranking images. I expect that this will go a long way in boosting the most interesting CC images to the top and generally increase the quality of our search results.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-thelinkedcommons/">
    <title type="text">The Linked Commons graph: the final vis</title>
    <id>urn:uuid:05bd2f86-63f9-3669-ac70-1032a147354b</id>
    <updated>2019-09-03T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-thelinkedcommons/" />
    <author>
      <name>soccerdroid</name>
    </author>
    <content type="html">&lt;p&gt;This is a continuation of my last blog post about the data processing part 3 of the CC-data catalog visualization project. I recommend you to read that &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-3/&quot;&gt;last post&lt;/a&gt; for a better understanding of what I'll explain here.&lt;/p&gt;
&lt;p&gt;Hello! In this last post, I am going to talk you about the final visualization. First, I would like to talk about the data and share my recommendations.&lt;/p&gt;
&lt;h3 id=&quot;creating-a-data-driven-graph&quot;&gt;Creating a data-driven graph&lt;/h3&gt;&lt;p&gt;+250 million licensed content is a very big number. That is the amount of data I had to visualize for this GSoC project. The graph is very sensitive to the amount of data. Let's talk about sensitivity as the property that a visualization has to look well-structured or tightly clustered like a hairball. The graph is less sensitive to the data if there are a few hundred or thousand nodes but as the amount of data increases it starts to look more and more like a hairball. Take a look at the following examples:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;20k_graph.png&quot; alt=&quot;Graph with 20k nodes&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The Linked Commons gaph with 20k nodes and links. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;100k_graph.png&quot; alt=&quot;Graph with 100k nodes&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The Linked Commons gaph with 100k nodes and links.&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Moreover, any visualization library starts to render the elements slower, and at one point, it freezes. For the 100k nodes graph, the visualization took ages to appear and had the same clustered appearance. This was my major concern. That's why I decided to choose the top 500 domains from the processed data, as well as all the other domains those 500 nodes are connected to. This is also more user-friendly, because having the entire dataset will make the navigation through the graph very dizzy. Even with this smaller dataset, we could get valuable insights from the graph. We were able to find communities like the following:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;community_graph_cc.png&quot; alt=&quot;Libraries community&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Educational community, including libraries and universities.&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Insights like this are valuable for Creative Commons, because they can help with outreach efforts, targeted communications and for the CC Search team to choose which domains to include in the CC Search tool.&lt;/p&gt;
&lt;p&gt;The final graph is interactive. Users can pan, zoom in and out, hover over a node to see its neighbors and neighbors of neighbors, and click on a node to display a pie chart.&lt;/p&gt;
&lt;h3 id=&quot;pie-chart-visualization&quot;&gt;Pie chart visualization&lt;/h3&gt;&lt;p&gt;The pie charts are built using the &lt;a href=&quot;https://www.highcharts.com/&quot;&gt;Highcarts library&lt;/a&gt;. The purpose of this chart is to show  to the public how each domain uses CC licenses. I spoke about this in my blog post: &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-visualization/&quot;&gt;Visualize CC Catalog data&lt;/a&gt;. Here is an image to illustrate the above:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;pie_chart.png&quot; alt=&quot;cc_licenses dictionary&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Pie chart of ask.openstack.org &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;There are some nodes that we do not have information about their CC licenses (and they probably do not have licensed content). For these nodes, a message saying &quot;The CC License information of &lt;em&gt;domain_name&lt;/em&gt; is not available&quot; is displayed instead of the pie chart. We did not wanted to disable the pie chart for them, because we wanted to be consistent with the nodes behavior. Making some nodes not clickable would confuse everyone, and it would also make more complicate the implementation of the visualization.&lt;/p&gt;
&lt;h3 id=&quot;tweaking-the-graph&quot;&gt;Tweaking the graph&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/vasturiano/force-graph&quot;&gt;Force-graph&lt;/a&gt; has a nice API that offers a lot of possibilites for customizing the visualization. The building of the graph is data-driven, and we can use the data in order to alter the appearance of nodes and edges.&lt;/p&gt;
&lt;p&gt;I implemented the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The node size is proportional to the number of CC licensed content in each domain. &lt;/li&gt;
&lt;li&gt;When the user hovers over a node, a label with the domain name is displayed. This might sound redundant when you can see the node perfectly. But the graph is very big, and you will like to see it in a low zoom level in order to have a picture of the shape of the entire graph. This is when this functionality is useful, because you don't have to zoom in in order to see the name of a node. &lt;/li&gt;
&lt;li&gt;The force of a link between two nodes (&lt;em&gt;node A&lt;/em&gt; and &lt;em&gt;node B&lt;/em&gt;) is given by the number of links &lt;em&gt;node A&lt;/em&gt; has that references &lt;em&gt;node B&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;When you hover over a node, you can also see the links to its neighbors highlighted, as well as the links to the neighbors of the neighbors. This feature make it pretty easy for you to find communities, and see how strongly connected a node is in the graph. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the final visualization, using a sample data from one month of the Common Crawl data:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;graph.png&quot; alt=&quot;Force-directed graph with the real data&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Force-directed graph, &quot;The Linked Commons&quot;. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;highlights.png&quot; alt=&quot;Force-directed graph with the real data&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Force-directed graph, &quot;The Linked Commons&quot;. Neighbors of domain &lt;i&gt;svgsilh&lt;/i&gt; hihglighted. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;You can check the whole project source code in the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz/tree/master/GSoC2019&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;final-comments-and-future-work&quot;&gt;Final comments and future work&lt;/h3&gt;&lt;p&gt;This was my first experience with big data visualization, and I really enjoyed it!&lt;/p&gt;
&lt;p&gt;There are features that could be implemented in the future in order to reduce the amount of data rendered in the graph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A user might just want to check if a specific domain has licensed content, and how does it use it. An enhancement could be then to add a search bar and offer to the user the possibility to search for a node, given a domain name and/or URL.&lt;/li&gt;
&lt;li&gt;Given the suffix of the URLs of the &lt;em&gt;provider_domains&lt;/em&gt;, we could try to find the country of origin, and so filter domains by country.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;check-out-the-live-demo&quot;&gt;Check out the live demo!&lt;/h3&gt;&lt;p&gt;[2D version] (&lt;a href=&quot;http://ec2-3-80-82-250.compute-1.amazonaws.com/&quot;&gt;http://ec2-3-80-82-250.compute-1.amazonaws.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;[3D version] (&lt;a href=&quot;http://ec2-3-80-82-250.compute-1.amazonaws.com/visualization_3d.html&quot;&gt;http://ec2-3-80-82-250.compute-1.amazonaws.com/visualization_3d.html&lt;/a&gt;)&lt;br&gt;
*Yes, with my mentor Sophine, we thought it could be a great idea to try with a 3D version of the graph :) . You can interact with the graph in the same way as with the 2d version.&lt;/p&gt;
&lt;p&gt;CC Data Catalog Visualization is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;, who has been greatly helpful and considerate since the GSoC application period. Also, my backup mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
&lt;p&gt;I had a great time working with Creative Commons. I hope you like the final product as much as I do. Thank you for following the development of this project.&lt;/p&gt;
&lt;p&gt;Have a nice week!&lt;/p&gt;
&lt;p&gt;Maria&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/introducing-cc-search-extension/">
    <title type="text">Introducing CC Search Extension</title>
    <id>urn:uuid:1d9e2dcd-6ee5-3ee2-a330-7acf4858af05</id>
    <updated>2019-09-03T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/introducing-cc-search-extension/" />
    <author>
      <name>makkoncept</name>
    </author>
    <content type="html">&lt;p&gt;The past three months of Google summer of code has been an amazing learning experience to say the least. I am thrilled to announce that &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;my GSoC project&lt;/a&gt; was successfully completed and we were able to achieve more than we aimed for!&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;light-dark-mode.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        CC Search Browser Extension
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;&lt;p&gt;The three extension stores of the browsers we were building support for have approved the extension 🎉&lt;/p&gt;
&lt;p&gt;Install the extension on your favorite browser from the following links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/cc-search-extension/&quot;&gt;Firefox Addon Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/cc-search/agohkbfananbebiaphblgcfhcclklfnh&quot;&gt;Google Chrome store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://addons.opera.com/en/extensions/details/cc-search/&quot;&gt;Opera Addon Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Checkout &lt;a href=&quot;/blog/entries/introducing-cc-search-extension/#join-the-community&quot;&gt;Join the community&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;&lt;p&gt;At inception, we thought that the extension would become a complementary plugin to the amazing &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt; but now I can say with confidence that the extension has the potential to sketch an identity of itself.
In this section, I will go through all the major features(exclusive of any technical jargon) of the extension.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Search and filter CC Licensed content&lt;/strong&gt;&lt;br&gt;
This feature is at the core and the extension does a good job. The searching and filtering is powered by &lt;a href=&quot;https://github.com/creativecommons/cccatalog-api&quot;&gt;CC Catalog API&lt;/a&gt; which exposes various endpoints to get search results and apply filters for providers, licenses, and use-case. This makes sure that you will find exactly what are you looking for.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;minimal-ui.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Bunch of features. Minimal interface.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;One-click easy attribution:&lt;/strong&gt;&lt;br&gt;
Attributing the owner of the image is as easy as it can get with one-click attribution. You can copy either the Rich-text or HTML version of the attribution to your clipboard by one-click.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;search-images-attribution.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Search CC License Images. Easy one-click attribution, image info, and share options.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Download images (and attribution):&lt;/strong&gt;&lt;br&gt;
Download the image to use it in your works from the extension itself. You also have the option to download the attribution as a text file along with the image. This can be helpful when you want to download multiple images in a single session.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bookmark images:&lt;/strong&gt;&lt;br&gt;
Hovering over the image thumbnails and clicking the bookmark icon will save the images. This is perfect for shortlisting the images that you might find usefull in the future. You can view and remove your bookmarks from the bookmarks section.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;bookmarks.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        View saved images in Bookmark Section. Export and import bookmarks from the &quot;Bookmarks&quot; tab in the options page.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export and import bookmarks.&lt;/strong&gt;&lt;br&gt;
As a user, you might want to easily archive and/or transfer your bookmarks. The extension goes one step ahead and gives you the feature of exporting and importing bookmarks.  This makes sure that the solution to archiving and transfer of bookmarks is uncomplicated and straightforward.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sync your custom setting and bookmarks across devices.&lt;/strong&gt;&lt;br&gt;
The extension uses the in-build feature of chrome and firefox to sync your custom settings and bookmarks.  So you can be sure to have a familiar user experience across your devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Options-UI for custom settings.&lt;/strong&gt;&lt;br&gt;
The extension also has an options page where you can set default filters and settings. The options page helps in decluttering and making sure that the main popup of the extension remains minimal and holds only the most necessary information. This page will host most of the future features too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;custom-filters.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Add custom defaults from the options page.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dark Mode.&lt;/strong&gt;&lt;br&gt;
Because everyone loves dark mode! Save battery and go easy on your eyes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;opera-light.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Light mode.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;opera-dark.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Dark Mode. Looks more cool if the browser is also in dark mode!
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;about-page.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        About page of the extension.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;h3 id=&quot;join-the-community&quot;&gt;Join The Community&lt;/h3&gt;&lt;p&gt;We hope that you will give this a shot and maybe use it as your daily driver to search for images. There is so much more that we can do to improve and expand this project. Your help in form of &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/blob/master/INSTRUCTIONS.md#reporting-bugs&quot;&gt;bug reports&lt;/a&gt;, &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/blob/master/INSTRUCTIONS.md#feature-requests&quot;&gt;feature requests&lt;/a&gt;, &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/blob/master/INSTRUCTIONS.md#contributing-code&quot;&gt;code contribution&lt;/a&gt; will be of great importance in shaping the future of the extension.&lt;/p&gt;
&lt;p&gt;You can check out the &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;project on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Come and say hi to us on &lt;a href=&quot;https://opensource.creativecommons.org/community/#slack&quot;&gt;slack&lt;/a&gt; and tell about your experience with CC Search extension. The slack channel is &lt;code&gt;#gsoc-browser-ext&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special Thanks&lt;/em&gt;:  &lt;a href=&quot;https://creativecommons.org/author/aldencreativecommons-org/&quot;&gt;Alden&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-final-phase/">
    <title type="text">Creative Commons WordPress Plugin Final Phase</title>
    <id>urn:uuid:bd8f5195-c23f-3aab-8233-2d4cfe53580c</id>
    <updated>2019-08-23T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-final-phase/" />
    <author>
      <name>ahmadbilaldev</name>
    </author>
    <content type="html">&lt;p&gt;For the context, I am working with my mentor &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid Robot&lt;/a&gt; on Creative Commons WordPress Plugin in GSoC 2019. It is basically an attribution tool, allowing users to attribute their content and include a CC license on their WordPress website.&lt;/p&gt;
&lt;p&gt;GSoC is about to end, and I am excited that we have the plugin ready with all the possible attribution features.
 We had a stable version of the plugin up and running in the last phase. This allowed us to use it and
look for possible improvements and increments. We managed to get a handful of suggestions and feedback
from some users, which turned out quite applicable. First, let's take a quick look at the releases in
this phase and their changelogs.&lt;/p&gt;
&lt;h3 id=&quot;releases&quot;&gt;Releases&lt;/h3&gt;&lt;h4 id=&quot;v2019.7.2&quot;&gt;v2019.7.2&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Bug fixes.&lt;/li&gt;
&lt;li&gt;New license selection settings.&lt;/li&gt;
&lt;li&gt;Old license chooser removed and plugin linked to the &lt;a href=&quot;https://creativecommons.org/choose/&quot;&gt;current chooser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Plugin settings page redesigned for better user experience.&lt;/li&gt;
&lt;li&gt;New feature to add additional text after the license.&lt;/li&gt;
&lt;li&gt;Gutenberg blocks for CC licenses redesigned.&lt;/li&gt;
&lt;li&gt;Added customization settings for Gutenberg blocks for backend and front end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;v2019.8.1&quot;&gt;v2019.8.1&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Re-wrote license widget for the plugin. Added option to display the default license
as a widget or in the footer.&lt;/li&gt;
&lt;li&gt;Refactored and improved code quality.&lt;/li&gt;
&lt;li&gt;Submitted plugin to WordPress.org for review.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;v2019.8.2&quot;&gt;v2019.8.2&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;All necessary Default/Site license settings added.&lt;/li&gt;
&lt;li&gt;Plugin settings page design completed.&lt;/li&gt;
&lt;li&gt;Rich-text components added to previously static Gutenberg blocks converted to allow attribution of any content.&lt;/li&gt;
&lt;li&gt;Gutenberg blocks redesigned to include settings.&lt;/li&gt;
&lt;li&gt;Security improvements.&lt;/li&gt;
&lt;li&gt;i18n improvements.&lt;/li&gt;
&lt;li&gt;Minor bug fixes and refinements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;blocks&quot;&gt;Blocks&lt;/h3&gt;&lt;p&gt;The CC blocks are now editable with a bunch of options. We integrated rich-text in each block, which
 renders a rich content-editable input, providing users with the option to format the content.
 This makes sure that the requirements of describing the title, author and the source
 while using a CC licensed content can be met..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-wp-plugin-final-phase/cc-block.png&quot; alt=&quot;CC License Block&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;re-designed-settings&quot;&gt;Re-designed Settings&lt;/h3&gt;&lt;p&gt;The redesigned plugin settings are straightforward and have every required field. We have added widget as a display
option, which is much better than previous footer implementation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-wp-plugin-final-phase/settings-1.png&quot; alt=&quot;Plugin Settings&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Selecting a license is simple and quick with a link to the chooser&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-wp-plugin-final-phase/settings-2.png&quot; alt=&quot;Plugin Settings&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;What's next&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Implement GitHub Actions or similar for automated deployment on release from GitHub to WordPress SVN directory.&lt;/li&gt;
&lt;li&gt;Integrate WPGulp workflow and improve i18n.&lt;/li&gt;
&lt;li&gt;Improve documentation with a visual walk-around of every feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading. For more, see the &lt;a href=&quot;https://github.com/creativecommons/wp-plugin-creativecommons&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any feedback or suggestions, let us know in the discussion on &lt;code&gt;#cc-dev-wordpress&lt;/code&gt; Slack channel. Looking forward!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-chooser-lastweek/">
    <title type="text">GSoC cc-chooser Final Post</title>
    <id>urn:uuid:4a9b45fd-e1a7-3613-bfba-21928b8ee42c</id>
    <updated>2019-08-22T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-chooser-lastweek/" />
    <author>
      <name>akmadian</name>
    </author>
    <content type="html">&lt;p&gt;Summer of Code is drawing to a close, and so is my work on the chooser project (well, sort of, I'll continue to help build and support the project for some time). These have easily been some of the best months of my life for a number of reasons. I remember vividly getting my first Slack message from my mentor, Breno, and being in utter disbelief that I was chosen. I have been fortunate enough to have this project be my own, complete with a whole Git repo just for this project!&lt;/p&gt;
&lt;p&gt;My work started with an empty GitHub repository, and bunch of planning: layout, wireframes, usability testing, etc. It wasn't until week 3 when I could start on actually building the site. To reflect on this time, I thought it would be cool to take a look back at the most significant PRs of the last three months.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My first PR with anything of substance was &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/9&quot;&gt;#9 - Refactor Modal System&lt;/a&gt;. This changed the site's modal system from using a cooler approach to one not quite as flashy, but the old method was lacking some critical features.&lt;/li&gt;
&lt;li&gt;Then came &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/10&quot;&gt;#10 - Add Chooser Functionality&lt;/a&gt;. This was a pretty big deal, as this brought the functionality behind the main point of the page: the License Chooser.&lt;/li&gt;
&lt;li&gt;Next up, &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/11&quot;&gt;#11&lt;/a&gt;: a big change to page layout. This changed the layout of the help section itself, and the layout of the page as a whole.&lt;/li&gt;
&lt;li&gt;Another big design change: &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/14&quot;&gt;#14&lt;/a&gt;. This PR changed the method of displaying the chosen license from the legacy look that was essentially just copied over from the legacy chooser, to a newer, more modern, and more informative card.&lt;/li&gt;
&lt;li&gt;Then, &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/23&quot;&gt;#23 - Add HTML Generator Functionality&lt;/a&gt;. This added functionality to the HTML Generator, previously just a collection of dummy controls and fields.&lt;/li&gt;
&lt;li&gt;Currently still open, &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/18&quot;&gt;#18&lt;/a&gt;. This PR changes the look and functionality of the chooser controls. Previously they were just some standard switches. Now, they are (in my opinion) more modern, and more informative, although maybe more difficult for the average user to grasp.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, and most recently, &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/24&quot;&gt;#24 - Refactor Site to Vue Components&lt;/a&gt;. This is a complete rewrite of the entire site to shift from a standard HTML5/ CSS/ JS toolset to Vue.js.&lt;/p&gt;
&lt;p&gt;For all of these merged PRs, there is still work to be done: more usability testing, ensuring that all content on the page meets the proper legal requirments, localization, adding CSS for mobile and tablet breakpoints, and deployment!&lt;/p&gt;
&lt;p&gt;I plan to have #24 done and merged by Monday, August 26, and I hope to continue my work on the chooser project either in my free time, or by moving into a mentor type role.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/vocabulary-so-long/">
    <title type="text">CC Vocabulary: Care for dessert?</title>
    <id>urn:uuid:fadb492f-cfe1-309e-bb0e-18854ec25020</id>
    <updated>2019-08-19T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/vocabulary-so-long/" />
    <author>
      <name>dhruvkb</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;&quot;Three months?!&quot;&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;&quot;Can't be that soon, right?&quot;&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;&quot;Right?!&quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Damn.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hi, it's me again. It's been long since I last sat down to write. I haven't been
punctual with my posts and my only hope of redemption is that my punctuality
with code makes up for it somehow.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;graph.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        All that green makes 
        &lt;a href=&quot;https://github.com/dhruvkb&quot;&gt;me&lt;/a&gt; very happy.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;With GSoC deadlines drawing to a close, it makes sense to have a post describing
the fruits of this quarter-year of labour. Let's start with two big news pieces.&lt;/p&gt;
&lt;p&gt;If this feels like a self-congratulatory piece patting myself on the back, I 
apologise. It's also my GSoC final submission work product report.&lt;/p&gt;
&lt;h3 id=&quot;vocabulary-is-ready-for-consumption&quot;&gt;🎉 Vocabulary is ready for consumption!&lt;/h3&gt;&lt;p&gt;It's been that way for almost a couple of weeks, actually. I just wasn't able to
take time out for a blog post.&lt;/p&gt;
&lt;p&gt;The rate at which Vocabulary components have received compatibility-breaking
changes has continuously gone down week after week. Code has been refactored,
&lt;em&gt;yes&lt;/em&gt;. Stylesheets have been cleaned up, &lt;em&gt;yes&lt;/em&gt;. Documentation has been updated
and at times even rewritten, &lt;em&gt;yes&lt;/em&gt;. But in terms of functionality, the
components are stable and solid enough to act as a foundation for the apps to
come. The external API for the components has matured considerably.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;scott.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;&quot;It's every parent's dream.&quot;&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;It's been about twelve weeks since the first commit to CC Vocabulary way back in
May. As with everything else in software, Vocabulary has moved fast. Under the
mentorship of &lt;a href=&quot;/blog/authors/hugosolar/&quot;&gt;Hugo Solar&lt;/a&gt; and over the course of
&lt;strong&gt;300+ commits&lt;/strong&gt; and &lt;strong&gt;17+ alpha releases&lt;/strong&gt;, Vocabulary has gone from 1
component that just said &lt;em&gt;&quot;Hello World!&quot;&lt;/em&gt; to &lt;strong&gt;over 33 components&lt;/strong&gt; that are
capable of replacing over half the entire codebase of the frontend for CC
Search. Talk about kids growing fast!&lt;/p&gt;
&lt;p&gt;You get all the components a typical web application needs, and then some. It's
got the standards like &lt;code&gt;InputField&lt;/code&gt; and &lt;code&gt;Button&lt;/code&gt;, some unconventional ones like
&lt;code&gt;Definition&lt;/code&gt; and &lt;code&gt;Quote&lt;/code&gt;, and some components that only our own tailored design
library could afford like &lt;code&gt;Header&lt;/code&gt; and &lt;code&gt;Footer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's a list and &lt;a href=&quot;https://creativecommons.github.io/cc-vocabulary&quot;&gt;there's&lt;/a&gt; 
a living styleguide.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Elements&lt;/summary&gt;
  &lt;div&gt;
    &lt;ul&gt;
      &lt;li&gt;Heading&lt;/li&gt;
      &lt;li&gt;Paragraph&lt;/li&gt;
      &lt;li&gt;ImageView&lt;/li&gt;
      &lt;li&gt;Button&lt;/li&gt;
      &lt;li&gt;ChoiceField&lt;/li&gt;
      &lt;li&gt;InputField&lt;/li&gt;
      &lt;li&gt;SelectField&lt;/li&gt;
      &lt;li&gt;SwitchField&lt;/li&gt;
      &lt;li&gt;Rating&lt;/li&gt;
      &lt;li&gt;ProgressBar&lt;/li&gt;
      &lt;li&gt;Statistic&lt;/li&gt;
      &lt;li&gt;LicenseIconography&lt;/li&gt;
      &lt;li&gt;Shield&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div style=&quot;text-align: center;&quot;&gt;
      &lt;figure&gt;
        &lt;img src=&quot;button.png&quot;/&gt;
        &lt;figcaption&gt;
          &lt;em&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/em&gt;
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Layouts&lt;/summary&gt;
  &lt;div&gt;
    &lt;ul&gt;
      &lt;li&gt;Container&lt;/li&gt;
      &lt;li&gt;Section&lt;/li&gt;
      &lt;li&gt;Grid
        &lt;ul&gt;&lt;li&gt;GridCell&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Tabbed
        &lt;ul&gt;&lt;li&gt;TabbedPane&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Table
        &lt;ul&gt;&lt;li&gt;TableCell&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div style=&quot;text-align: center;&quot;&gt;
      &lt;figure&gt;
        &lt;img src=&quot;tabbed.png&quot;/&gt;
        &lt;figcaption&gt;
          &lt;em&gt;&lt;code&gt;Tabbed&lt;/code&gt;&lt;/em&gt;
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Patterns&lt;/summary&gt;
  &lt;div&gt;
    &lt;ul&gt;
      &lt;li&gt;Card&lt;/li&gt;
      &lt;li&gt;Definition&lt;/li&gt;
      &lt;li&gt;Header&lt;/li&gt;
      &lt;li&gt;Footer&lt;/li&gt;
      &lt;li&gt;LicenseBadge&lt;/li&gt;
      &lt;li&gt;BrandImagery&lt;/li&gt;
      &lt;li&gt;Quote&lt;/li&gt;
      &lt;li&gt;Locale&lt;/li&gt;
      &lt;li&gt;NavigationLink
        &lt;ul&gt;&lt;li&gt;NavigationLink&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Trail
        &lt;ul&gt;&lt;li&gt;TrailCrumb&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div style=&quot;text-align: center;&quot;&gt;
      &lt;figure&gt;
        &lt;img src=&quot;card.png&quot;/&gt;
        &lt;figcaption&gt;
          &lt;em&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/em&gt;
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;Button
&lt;/details&gt;&lt;p&gt;Vocabulary also offers some Stylus mixins, token collection in Stylus, SASS and 
JSON and some handy utils too. That's about it.&lt;/p&gt;
&lt;p&gt;I know what you are thinking and &lt;em&gt;yes, all of that, including
the designs and revisions, was accomplished in two months and a half&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;quality&quot;&gt;Quality&lt;/h4&gt;&lt;p&gt;The code follows the &lt;a href=&quot;https://standardjs.com/&quot;&gt;Standard code style&lt;/a&gt; and the &lt;a href=&quot;https://vuejs.org/v2/style-guide/&quot;&gt;Vue
official style guide&lt;/a&gt;. In addition,
Vocabulary has &lt;a href=&quot;https://opensource.creativecommons.org/cc-vocabulary/#/Vocabulary/Code%20style&quot;&gt;its own style
guide&lt;/a&gt;
that has rules right down to the order of rules in the CSS. This ensures that
code is sensibly written, easily understandable and as little in debt as
possible.&lt;/p&gt;
&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;&lt;p&gt;CC Vocabulary can be installed via &lt;code&gt;npm&lt;/code&gt; and used with a build process...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install @creativecommons/vocabulary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...or used directly in the browser inside &lt;code&gt;script&lt;/code&gt; tags.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;
        src=&quot;https://unpkg.com/@creativecommons/vocabulary&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even JS is optional (may break in some cases, horrifying so).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot;
      type=&quot;text/css&quot;
      href=&quot;https://unpkg.com/@creativecommons/vocabulary/vocabulary.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;demo&quot;&gt;Demo&lt;/h4&gt;&lt;p&gt;Of course I'm not going to hype you up and leave you hanging! Here's a pen to
show you what's possible. Actually, since the pen uses the UMD version, what it
shows is the lower end of what's possible.&lt;/p&gt;
&lt;p&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;dark&quot; data-default-tab=&quot;result&quot; data-user=&quot;dhruvkb&quot; data-slug-hash=&quot;dxRJYV&quot; data-preview=&quot;true&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;CC Vocabulary UMD demo&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/dhruvkb/pen/dxRJYV/&quot;&gt;
  CC Vocabulary UMD demo&lt;/a&gt; by Dhruv Bhanushali (&lt;a href=&quot;https://codepen.io/dhruvkb&quot;&gt;@dhruvkb&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;script async src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;h4 id=&quot;contributions-invited&quot;&gt;Contributions invited&lt;/h4&gt;&lt;p&gt;Also to make the repository friendlier to incoming developers a number of issues
have been dug out, reported and labelled. This provides incomers, like myself
three months ago, a channel to familiarise themselves with the codebase well
before Outreachy and the next Summer of Code.&lt;/p&gt;
&lt;h4 id=&quot;gsoc-work-product&quot;&gt;GSoC work product&lt;/h4&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;contributions.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;That's over half a million changes!&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Repository:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/&quot;&gt;https://github.com/creativecommons/cc-vocabulary/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Commits:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/commits/master&quot;&gt;https://github.com/creativecommons/cc-vocabulary/commits/master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Issues:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/issues&quot;&gt;https://github.com/creativecommons/cc-vocabulary/issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contributors:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/graphs/contributors&quot;&gt;https://github.com/creativecommons/cc-vocabulary/graphs/contributors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The proposal listed a number of components to be developed as a part of the 
program. Over twice that number of components have been implemented.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In other news...&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;search-is-largely-integrated-with-vocabulary&quot;&gt;🎉 Search is largely integrated with Vocabulary!&lt;/h3&gt;&lt;p&gt;This was the subordinate goal of my Summer of Code proposal. Surprisingly
enough, once the components were ready it was only a matter of finding code in
CC Search's frontend and swapping it out with Vocabulary components. &lt;em&gt;Oh, the
tests have pained me so.&lt;/em&gt; Literally every single test broke down and had to be
manually updated.&lt;/p&gt;
&lt;p&gt;The end result of the toil under the guidance and review of &lt;a href=&quot;http://localhost:5000/blog/authors/brenoferreira/&quot;&gt;Breno
Ferreira&lt;/a&gt; is a search
experience that &lt;strong&gt;feels polished&lt;/strong&gt; and &lt;strong&gt;looks beautiful&lt;/strong&gt; and &lt;strong&gt;works
elegantly&lt;/strong&gt;. It also enables another &lt;strong&gt;half a billion&lt;/strong&gt; people to use the
platform and sets the groundwork to take that number higher.&lt;/p&gt;
&lt;p&gt;The bundle size is lower and code manageability is higher thanks to decoupling
of low level components from the high level experience. Can you ask for more?
How about more consistent icons?&lt;/p&gt;
&lt;p&gt;The least I can do is attach screenshots of the new CC Search to give you a 
sneak peek into what Creative Commons apps, starting with Search of course, will
look like in the future. These are screenshots, &lt;em&gt;not mockups&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;sneak-peek&quot;&gt;Sneak peek&lt;/h4&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;homepage.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;A very minor change to the homepage...&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
    &lt;img src=&quot;homepage_hi.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;...is a door to a new world of possibilities.&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;Yes, CC Search has largely also been translated to Hindi, making it accessible
to the Internet-savvy chunk of the half a billion people who speak the language
in the country with the second-largest Internet enabled populace (first if you
factor in democracy and freedom).&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;about.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;Statistics were never this beautiful...&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
    &lt;img src=&quot;collections.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;...and neither were collections.&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;These pages too have been internationalised.&lt;/p&gt;
&lt;p&gt;Did you spot the new icons? I made a choice to adopt Font Awesome for Vocabulary
as it is a modern, scalable and lightweight alternative to finding a cohesive
set of icons from the trove of the Noun Project and bundling them ourselves.
Plus Font Awesome provides Vue components! What's not to like.&lt;/p&gt;
&lt;h4 id=&quot;status&quot;&gt;Status&lt;/h4&gt;&lt;p&gt;I'm not sure if there is enough time in the GSoC period for the integration PR
to be reviewed and merged but I'm not going anywhere and neither are you. You
can follow the integration as it happens
&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/413&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're enthusiastic you can clone the branch and run the setup on your 
machine. Experience it for yourself, how about that?&lt;/p&gt;
&lt;h4 id=&quot;gsoc-work-product&quot;&gt;GSoC work product&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Repository:&lt;/strong&gt; &lt;a href=&quot;https://github.com/dhruvkb/cccatalog-frontend/&quot;&gt;https://github.com/dhruvkb/cccatalog-frontend/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PR&lt;/strong&gt;: &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/413/&quot;&gt;https://github.com/creativecommons/cccatalog-frontend/pull/413/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Commits:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/413/commits&quot;&gt;https://github.com/creativecommons/cccatalog-frontend/pull/413/commits&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The proposal aimed to replace a lot of indigenous components with Vocabulary
counterparts. Internationalisation and a consistent icon system are just me
going above and beyond.&lt;/p&gt;
&lt;h3 id=&quot;tl;dr?&quot;&gt;😴 TL;DR?&lt;/h3&gt;&lt;p&gt;Summarising, &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary&quot;&gt;CC Vocabulary&lt;/a&gt;
is now mature and &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/413&quot;&gt;is getting
married&lt;/a&gt; to &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary&quot;&gt;CC
Search&lt;/a&gt;. GSoC was a successful
matchmaker.&lt;/p&gt;
&lt;h3 id=&quot;postremo&quot;&gt;❤️ Postremo&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&quot;I think... I feel good about it.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GSoC has been a thoroughly refreshing, enriching and educating experience.
Without a shred of doubt I am taking away a lot from this exercise (notably, the
knowledge of the existence of CSS custom properties). My only hope is that I
have given back a comparable amount of output to the community that gave an
outsider like me a chance to work on something this impactful in the long-term.&lt;/p&gt;
&lt;p&gt;I can't wait to continue my journey post-GSoC and see what the core team and
the next batch of interns creates for, and using, Vocabulary.&lt;/p&gt;
&lt;p&gt;GSoC may be over, but &lt;strong&gt;CC and I have a long way to go&lt;/strong&gt;.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;letterheart.svg&quot; width=&quot;32&quot;/&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;~Signing off, for now~&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-3/">
    <title type="text">Visualize CC Catalog data - data processing part 3</title>
    <id>urn:uuid:f6fc50e8-e571-36b1-8c3d-b8fc1f513c5f</id>
    <updated>2019-08-12T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-3/" />
    <author>
      <name>soccerdroid</name>
    </author>
    <content type="html">&lt;p&gt;This is a continuation of my last blog post about the data processing part 2 of the CC-data catalog visualization project. I recommend you to read that &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-2/&quot;&gt;last post&lt;/a&gt; for a better understanding of what I'll explain here.&lt;/p&gt;
&lt;p&gt;Hello! In this post I am going to talk you about the extraction of unique nodes, and links, and the visualization of the force-directed graph with the processed data.&lt;/p&gt;
&lt;h3 id=&quot;nodes-and-links-generation&quot;&gt;Nodes and links generation&lt;/h3&gt;&lt;p&gt;The nodes and links will be visualized using &lt;a href=&quot;https://github.com/vasturiano/force-graph&quot;&gt;force-graph&lt;/a&gt;. I spoke about this library in my blog post: &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-visualization/&quot;&gt;Visualize CC Catalog data&lt;/a&gt;. My first step is to use the data to generate the json file that it needs. Force-graph needs to be passed a single json file with two lists: one containing information about the nodes, and the other containing the links. They are both arrays of dictionaries. I have huge input files (and over 100 million unique domains in total). So in Pandas I need to build a DataFrame of a tsv input file using chunks. The challenge I am facing now is to generate a list of unique nodes. Here is why this is a challenge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In order to build the nodes list, I need to think aboutwhat are the source and target nodes.&lt;/li&gt;
&lt;li&gt;Take into account a source node can also be a target node.&lt;/li&gt;
&lt;li&gt;I can delete duplicate entries per column, but as I process the data in chunks, my scope is limited to the chunk size.&lt;/li&gt;
&lt;li&gt;A domain can be repeated not only within a chunk, but in different chunks too.&lt;/li&gt;
&lt;li&gt;Source and target must have licensed content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So as you can see, dealing with duplications is not that trivial when you have a lot of data. Next what I tried was to analyze smaller files, in order to be able to keep the data in memory in a single DataFrame. So for each TSV file I had before, now I have several small TSV files. This may extend the data analysis, but it can smooth the coding complexity.&lt;/p&gt;
&lt;p&gt;I first started by formatting the data into source and target columns to generate the unique nodes for the graph. I iterate through each row of the current DataFrame I have (the one with provider_domain, cc_licences,links column, etc), and by reading the &lt;em&gt;links&lt;/em&gt; column, I load the json of each row. For each key in the json, I create a new row with provider_domain as source, they key as target, and the value of the key as a &lt;em&gt;value&lt;/em&gt;  feature. I append that new row to a new DataFrame. I build a new row each time I read a line, so I have a DataFrame with all the links of a single provider_domain. When I finish iterating over the rows, I convert the DataFrames to list and save the output. That is how I get a new DataFrame containing all the existing links of the graph, with source, target and value columns. Yeah!&lt;/p&gt;
&lt;p&gt;The visualization I get is the following:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;graph.png&quot; alt=&quot;Force-directed graph with the real data&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Force-directed graph with the real data. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;graph-2.png&quot; alt=&quot;Force-directed graph with the real data&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Force-directed graph with the real data. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;coming-soon&quot;&gt;Coming soon&lt;/h3&gt;&lt;p&gt;As you could visualize before, there are a lot of lonely nodes (nodes with no neighbors). My thoughts are to filter out the provider_domains that do not have a minimum quantity of licensed content. I will try with different values, starting form 100 to 1000, and see how the graph changes. I believe a lot of those nodes do not have a relevant amount of licensed content, so with this filter rule they will be removed.
The other tasks left to do are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visualization of the pie chart&lt;/li&gt;
&lt;li&gt;Development or modification of pruning/filtering rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can follow the project development in the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CC Data Catalog Visualization is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;, who has been greatly helpful and considerate since the GSoC application period. Also, my backup mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
&lt;p&gt;Have a nice week!&lt;/p&gt;
&lt;p&gt;Maria&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-week9-10/">
    <title type="text">CC Browser Extension Week 9, 10</title>
    <id>urn:uuid:48a56854-464e-306f-bf36-7e316a0e496e</id>
    <updated>2019-08-12T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-week9-10/" />
    <author>
      <name>makkoncept</name>
    </author>
    <content type="html">&lt;p&gt;For the context, I am working on my GSoC project that is to make a browser-extension to search CC Licensed content in the public domain by interacting with CC Catalog API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Previous Blogs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-browser-extension-a-gsoc-project/&quot;&gt;CC Browser Extension - A GSoC Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-browser-extension-week5-6/&quot;&gt;CC Browser Extension Week 5, 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-browser-extension-week7-8/&quot;&gt;CC Browser Extension Week 7, 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;work-done&quot;&gt;Work Done&lt;/h3&gt;&lt;p&gt;These weeks were spent on adding bookmarking feature to the extension and writing some unit tests.&lt;/p&gt;
&lt;p&gt;On clicking the bookmark icon, that appears when the image thumbnail is hovered on, the image will be bookmarked. Under the hood, the unique image identifier is saved in the local storage of the extension. The images ids are enough to get all the required image and attribution data needed using the &lt;code&gt;/image/{identifier}&lt;/code&gt; endpoint of &lt;a href=&quot;/blog/entries/cc-browser-extension-week9-10/[https://github.com/creativecommons/cccatalog-api](https://github.com/creativecommons/cccatalog-api&quot;&gt;CC Catalog API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bookmarked images persist even when the extension session terminates. User can view, inspect, delete the bookmarked images in the &lt;em&gt;'Bookmarks'&lt;/em&gt; section. There is also a button to delete all the bookmarks at once.&lt;/p&gt;
&lt;p&gt;To let the users organize and share bookmarks, importing and exporting feature is also added. The buttons to export and import the bookmarks are in the options page. Simple &lt;code&gt;json&lt;/code&gt; files are used for this feature.&lt;/p&gt;
&lt;p&gt;The rest of the time was spent on writing tests for the extension. One positive side-effect of this was cleaner and modular code. Finally, the CircleCi config file was modified to let the tests to run in CI pipeline.&lt;/p&gt;
&lt;h3 id=&quot;coming-up&quot;&gt;Coming Up&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Write more tests.&lt;/li&gt;
&lt;li&gt;Test and fix bugs.&lt;/li&gt;
&lt;li&gt;Modifying webpack config to spit out code for production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check out the project on &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;Github&lt;/a&gt; and join the discussion on &lt;code&gt;#gsoc-browser-ext&lt;/code&gt; channel on &lt;a href=&quot;https://opensource.creativecommons.org/community/#slack&quot;&gt;slack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special Thanks&lt;/em&gt;:  &lt;a href=&quot;https://creativecommons.org/author/aldencreativecommons-org/&quot;&gt;Alden&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/saltstack-host-classification/">
    <title type="text">Host Classification with SaltStack</title>
    <id>urn:uuid:7f23aa93-d5a3-354d-8363-13dc2487fe78</id>
    <updated>2019-07-31T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/saltstack-host-classification/" />
    <author>
      <name>TimidRobot</name>
    </author>
    <content type="html">&lt;p&gt;Within infrastructure as code, as with all programming, there is a goal to
reduce redundancy as much as possible. With configuration management,
duplicated configurations can quickly lead to confusion and unexpected states.
One of the key ways to reduce configuration duplication is robust host
classification.&lt;/p&gt;
&lt;h3 id=&quot;minion-classification&quot;&gt;Minion Classification&lt;/h3&gt;&lt;p&gt;As this post is about SaltStack, the terms &quot;minion classification&quot; for &quot;host
classification&quot; and &quot;minion&quot; for &quot;host&quot; are used. With Puppet, &quot;node
classification&quot; and &quot;node&quot; would be used.&lt;/p&gt;
&lt;p&gt;Minion classification consists of rules that determine what a minion is and
which states (or configurations) should be applied to it. Good minion
classification removes or minimizes the necessity of explicitly assigning
configurations to a minion. Our goal is for the computer to do as much of the
work as possible.&lt;/p&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;&lt;p&gt;Minions are added and configured from the primary salt server (called the
salt-master) with the following Minion ID schema: &lt;strong&gt;&lt;code&gt;HST__POD__LOC&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;HST&lt;/code&gt;&lt;/strong&gt; is the hostname or role. It indications what services are running
on the host or the role that it serves.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;POD&lt;/code&gt;&lt;/strong&gt; is the pod or group. It indicates the logical grouping of the
host.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LOC&lt;/code&gt;&lt;/strong&gt; is the location. It indicates where the host is.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wordpress__prod__us-east-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wordpress__stage__us-east-2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Minion ID parts are matched against the following list. SaltStack pillar
data, like Apache2, uses a last declared wins model. The following list is
organized from least-specific to most-specific:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1_LOC&lt;/code&gt; (location)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2_POD&lt;/code&gt; (pod/group)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3_HST&lt;/code&gt; (host/role)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4_POD__LOC&lt;/code&gt; (pod/group and location)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5_HST__POD&lt;/code&gt; (host/role and pod/group)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using our Minion ID examples above, this allows configuration data to be
specified for both shared data (ex. WordPress security settings that should be
applied to all WordPress hosts/roles) and specific data (ex. Let's Encrypt
TLS/SSL settings).&lt;/p&gt;
&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The only grain which can be safely used is &lt;code&gt;grains['id']&lt;/code&gt; which contains the
Minion ID.&lt;/em&gt; (&lt;a href=&quot;https://docs.saltstack.com/en/latest/faq.html#is-targeting-using-grain-data-secure&quot;&gt;FAQ Q.21&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;It is important to rely &lt;em&gt;only&lt;/em&gt; on the Minion ID as all other grains can be
manipulated by the client. This means a compromised client could change its
grains to collect secrets if a dedicated grain (ex. &lt;code&gt;role&lt;/code&gt;) was used for minion
classification.&lt;/p&gt;
&lt;h3 id=&quot;imperfect-work-in-progress&quot;&gt;Imperfect Work in Progress&lt;/h3&gt;&lt;p&gt;This implementation has proven to be robust and helpful. However, there is
still room for improvement. For example, I will probably refactor &lt;code&gt;HST&lt;/code&gt; to
&lt;code&gt;ROLE&lt;/code&gt; and &lt;code&gt;POD&lt;/code&gt; to &lt;code&gt;GRP&lt;/code&gt; for added clarity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback and development is welcomed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/creativecommons/sre-salt-prime&quot;&gt;creativecommons/sre-salt-prime&lt;/a&gt; repository is open
source.&lt;/p&gt;
&lt;p&gt;This host classification is also documented within it: &lt;a href=&quot;https://github.com/creativecommons/sre-salt-prime/blob/master/docs/Host_Classification.md&quot;&gt;sre-salt-prime/Host_Classification.md at master&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-2/">
    <title type="text">Visualize CC Catalog data - data processing part 2</title>
    <id>urn:uuid:4766028d-0afd-3efb-8e6b-bd3bc0f5cc00</id>
    <updated>2019-07-26T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-2/" />
    <author>
      <name>soccerdroid</name>
    </author>
    <content type="html">&lt;p&gt;This is a continuation of my last blog post about the data processing part of the CC-data catalog visualization project. I recommend you to read that &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing/&quot;&gt;last post&lt;/a&gt; for a better understanding of what I'll explain here.&lt;/p&gt;
&lt;h3 id=&quot;the-data&quot;&gt;The data&lt;/h3&gt;&lt;p&gt;Every dataset needs cleasing and pre processing operations before their analysis. In order to implement validations, I have to know first with what kind of inconsistencies I would deal with. Here are some interesting insights about the dataset:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are several cases where the provider_domain has not referenced a correct cc_license path. We might say then, that not everybody has a clear understading of how to give CC license attributions correctly.&lt;/li&gt;
&lt;li&gt;I found a case where the links json was malformed. It had a huge paragraph as key (instead of a domain). I wasn't expecting something like that hehe.&lt;/li&gt;
&lt;li&gt;There are both types of entries, a provider domain with a small image quantity and a lot of links, and with a huge amount of images but few links. Some of the domains with a lot of images belong to online shops or news websites.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside from the above, I have had to face with almost empty lines(meaning just a single column had information), columns bad separated (not a single but more than one tab between the columns), and some other usual problems of a real and non perfect dataset. I have made validations to catch these inconsistencies.&lt;/p&gt;
&lt;h3 id=&quot;data-aggregation&quot;&gt;Data aggregation&lt;/h3&gt;&lt;p&gt;It is needed to aggregate the data by provider_domain, in order to get the complete information of every node. Aggregating the images column is simple, as I only have to sum the values in that column. Now the links column is a little bit tricky to be aggregated. We have to remember that this field contains dictionaries, with domains as keys and the times they have been referenced to as values. So for aggregating this column, I need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an empty dictionary&lt;/li&gt;
&lt;li&gt;Loop through every key and save it&lt;/li&gt;
&lt;li&gt;If I face with a key that is already in the dictionary, just sum the value that I currently hold to the existing value in the dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, I have to extract creativecommons from the final links dictionary, and put the value into another column, called _Licences_qty_. This is because the quantity of links to &lt;a href=&quot;/blog/entries/cc-datacatalog-data-processing-2/creativecommons.org&quot;&gt;creativecommons.org&lt;/a&gt; can tell us how many licenses the provider_domains uses.&lt;/p&gt;
&lt;p&gt;We also need to aggregate the licences column. The goal is to have a data structure that contains the licenses types the provider_domain uses, and to know how many licenses per each license type the provider_domain has.
To achieve this, I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an empty dictionary of licences&lt;/li&gt;
&lt;li&gt;For each license, create a tuple (license_name,version), which will be a key in the dictionary&lt;/li&gt;
&lt;li&gt;Check if the key exists in the dictionary. If it doesn't, the key is added, with an initial value of 1, to the dictionary.&lt;/li&gt;
&lt;li&gt;If the key exists, increment the value in 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end, we will have rows like the following:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;row.png&quot; alt=&quot;Example row of the processed dataset&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Example row, with data aggregated. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;considerations-and-future-challenges&quot;&gt;Considerations and future challenges&lt;/h3&gt;&lt;p&gt;I mentioned before that there are provider domains with a lot of images and a few links, and vice versa. As I still have to prune and filter data, I can develop a rule to exclude the domains that are not relevant to the graph. This relevance can be determined by the quantity of images and/or links. My thought with the rules are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exclude domains that have a lot of images but few links (less than 20 links).&lt;/li&gt;
&lt;li&gt;Exclude domains that have few images(less than 100) and few links (less than 20)&lt;/li&gt;
&lt;li&gt;Exclude domains that have no links (is not a targeted node).&lt;/li&gt;
&lt;li&gt;Exclude domains that are social networks (Facebook, Instagram, Twitter), as they might not give relevant insights. Most of the references to these SN's are found because the provider domain gives the user the option to share a content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thresholds for the quantity of images and links are my intuitions from having seen the data and manually checking some provider domains. If it is possible I could validate it with some data analysis (checking average, maximum and minimum values of the columns).&lt;/p&gt;
&lt;h3 id=&quot;coming-soon&quot;&gt;Coming soon&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Extraction of unique nodes, and links.&lt;/li&gt;
&lt;li&gt;Visualization with the data. &lt;/li&gt;
&lt;li&gt;Development or modification of pruning/filtering rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can follow the project development in the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CC Data Catalog Visualization is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;, who has been greatly helpful and considerate since the GSoC application period. Also, my backup mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
&lt;p&gt;Have a nice week!&lt;/p&gt;
&lt;p&gt;Maria&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2019-07-24-cc-search-wp-plugin/">
    <title type="text">Easy search and use of CC-licensed images for WordPress</title>
    <id>urn:uuid:ab122e6c-a0e8-39cc-a0de-b0d5f2c444cc</id>
    <updated>2019-07-24T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2019-07-24-cc-search-wp-plugin/" />
    <author>
      <name>lenasterg</name>
    </author>
    <content type="html">&lt;h4 id=&quot;inspiration-and-idea-for-the-wordpress-plugin&quot;&gt;Inspiration and idea for the WordPress plugin&lt;/h4&gt;&lt;p&gt;Back in May, I read a blog post about the new Creative Commons search tool CC Search. My colleagues in CTI &lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;#footnote-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; and I were fascinated by its searching power.
Inspired by this new CC tool, we began thinking, how we could use it, into the Greek School Network’s&lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;#footnote-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; blogging platform &lt;a href=&quot;https://blogs.sch.gr&quot;&gt;https://blogs.sch.gr&lt;/a&gt;&lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;#footnote-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; - a WordPress multisite installation, free for all Greek teachers, students, and Greek school units.&lt;/p&gt;
&lt;p&gt;We decided to make a WordPress plugin, which would “harvest” the images from the Creative Commons Catalog API, in a similar way &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt; does, but without the need for the user to leave the WordPress post editor. The plugin should allow the execution of “search, select and import image and CC license data” into the post, while the author was still in WordPress edit page.&lt;/p&gt;
&lt;h4 id=&quot;our-wordpress-plugin&quot;&gt;Our WordPress plugin&lt;/h4&gt;&lt;p&gt;After a while, our plugin was ready. Its temporary name is “WP CC Search plugin”. It is a WordPress plugin for searching millions of CC-licensed images while the user is still in the post edit page. He/she can select a CC licensed image and insert it into the post content or set as post-featured image very quickly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/01.png&quot; alt=&quot;Plugin screenshot 1&quot;&gt;&lt;/p&gt;
&lt;p&gt;The plugin’s features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Works in WordPress editor and add a button above the content text area and into the “Add Media” pop-up window.&lt;/li&gt;
&lt;li&gt;Via a pop-up window, allows searching through millions of images using Creative Commons Catalog API power.&lt;/li&gt;
&lt;li&gt;Allows filtering by a provider&lt;/li&gt;
&lt;li&gt;Paginated results&lt;/li&gt;
&lt;li&gt;Quick insert original image or thumbnail with a link to the image URL&lt;/li&gt;
&lt;li&gt;Use image as a featured image for the blog post&lt;/li&gt;
&lt;li&gt;WPML compatible&lt;/li&gt;
&lt;li&gt;Multisite compatible&lt;/li&gt;
&lt;li&gt;Translation ready (it’s already translated in Greek)&lt;/li&gt;
&lt;li&gt;Tested up to WordPress 5.2 with Classic Editor plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As intended, we already use the plugin in &lt;a href=&quot;https://blogs.sch.gr&quot;&gt;https://blogs.sch.gr&lt;/a&gt;, which hosts more than 50.000 blogs. The plugin is available to all its blogs and users since middle May, who has been using it without any issues reported yet.&lt;/p&gt;
&lt;h4 id=&quot;how-it-works&quot;&gt;How it works&lt;/h4&gt;&lt;p&gt;The plugin needs the WordPress &lt;a href=&quot;https://wordpress.org/plugins/classic-editor/&quot;&gt;Classic Editor&lt;/a&gt; plugin in order to work for WP 5+.&lt;/p&gt;
&lt;p&gt;After the plugin’s activation, when the user writes a post, an &lt;strong&gt;“Image with CC licence”&lt;/strong&gt; button is added above the post editor area and as an option into the “Add Media” pop-up window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/02.png&quot; alt=&quot;Plugin screenshot 2&quot;&gt;&lt;/p&gt;
&lt;p&gt;By pressing the button, a pop-up window allows the user to search using Latin characters for an image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/03.png&quot; alt=&quot;Plugin screenshot 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;The user can browse the returned images, preview an image and its license and adjust the image settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use of thumbnail or original image&lt;/li&gt;
&lt;li&gt;set the image link (if any)&lt;/li&gt;
&lt;li&gt;insert the image into the post or as the featured image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/04.png&quot; alt=&quot;Plugin screenshot 4&quot;&gt;&lt;/p&gt;
&lt;p&gt;After the user selects an image and insert it, into the post, the image code along with its licensing data is pasted into the post body and the user can continue writing the blog post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/05.png&quot; alt=&quot;Plugin screenshot 5&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;some-technical-details&quot;&gt;Some technical details&lt;/h4&gt;&lt;p&gt;The plugin uses AJAX requests to communicate with &lt;a href=&quot;https://api.creativecommons.engineering&quot;&gt;https://api.creativecommons.engineering&lt;/a&gt; and get responses in JSON format.&lt;/p&gt;
&lt;p&gt;Only 2 AJAX requests are sent to &lt;a href=&quot;https://api.creativecommons.engineering&quot;&gt;https://api.creativecommons.engineering&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://api.creativecommons.engineering/statistics/image?format=json&quot;&gt;https://api.creativecommons.engineering/statistics/image?format=json&lt;/a&gt;, for getting the providers list. Then the JSON response is used as select options, for the provider’s dropdown menu.&lt;/li&gt;
&lt;li&gt;A call to &lt;a href=&quot;https://api.creativecommons.engineering/image/search&quot;&gt;https://api.creativecommons.engineering/image/search&lt;/a&gt; with the necessary parameters for searching for images based on the given words and the selected provided.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The JSON results, are then transformed via jQuery to images and show up into the popup window. When the user selects an image, jQuery creates a complete HTML &lt;div&gt; tag with all the image info and auto add it into the post editor area or executed the WordPress code to use in as featured image.&lt;/p&gt;
&lt;h4 id=&quot;still-to-do&quot;&gt;Still to do&lt;/h4&gt;&lt;p&gt;There are still some things that we want to add/change into the plugin and any help on building them is welcome.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a different plugin name :-). We believe that the plugin’s name should change since it is not an “official” CC commons plugin.&lt;/li&gt;
&lt;li&gt;Currently, the plugin needs the Classic Editor plugin in order to work for WP 5+. A main goal is to make it Gutenberg compatible. &lt;/li&gt;
&lt;li&gt;Add Multiple images select support&lt;/li&gt;
&lt;li&gt;Add Multi-select options for filtering: providers&lt;/li&gt;
&lt;li&gt;Add select options for filtering: licenses, creator&lt;/li&gt;
&lt;li&gt;Find an icon for the 'Image via CC Search' editor button&lt;/li&gt;
&lt;li&gt;Add plugin’s Info page&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;code-and-test-site&quot;&gt;Code and test site&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;You can find and fork the plugin’s code at: &lt;a href=&quot;https://github.com/lenasterg/wp_ccsearch&quot;&gt;https://github.com/lenasterg/wp_ccsearch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can test the plugin functionality at &lt;a href=&quot;http://users.sch.gr/stergatu/wordpress/&quot;&gt;http://users.sch.gr/stergatu/wordpress/&lt;/a&gt; by login via &lt;a href=&quot;http://users.sch.gr/stergatu/wordpress/wp-login.php&quot;&gt;http://users.sch.gr/stergatu/wordpress/wp-login.php&lt;/a&gt; as username: &lt;code&gt;testuser&lt;/code&gt; password: &lt;code&gt;testuser&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;credits&quot;&gt;Credits&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;The plugin is inspired and based on the &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;https://search.creativecommons.org/&lt;/a&gt; and it couldn’t be possible without the Creative Commons Catalog API &lt;a href=&quot;https://api.creativecommons.engineering/#tag/image&quot;&gt;https://api.creativecommons.engineering/#tag/image&lt;/a&gt; which is the engine.&lt;/li&gt;
&lt;li&gt;Most of the plugin's code is based on the WP Pexels &lt;a href=&quot;https://wordpress.org/plugins/wp-pexels/&quot;&gt;https://wordpress.org/plugins/wp-pexels/&lt;/a&gt; code by WPclever.net&lt;/li&gt;
&lt;li&gt;Pointer's code is based on &lt;a href=&quot;https://code.tutsplus.com/articles/integrating-with-wordpress-ui-admin-pointers--wp-26853&quot;&gt;https://code.tutsplus.com/articles/integrating-with-wordpress-ui-admin-pointers--wp-26853&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;more-about-us&quot;&gt;More about us&lt;/h4&gt;&lt;p&gt;&lt;span id=&quot;footnote-1&quot;&gt;&lt;/span&gt;&lt;strong&gt;[1] CTI - Greek School Network and Networking Technologies Directorate&lt;/strong&gt;&lt;br&gt;
Our main activities in Greek School Network and Networking Technologies Directorate (GSN-NTS) (&lt;a href=&quot;http://nts.cti.gr&quot;&gt;http://nts.cti.gr&lt;/a&gt;) of Computer Technology Institute and Press “Diophantus” (CTI) are the design, implementation, and support of network infrastructures and Internet services. Through its involvement in pioneer National and European research and development projects, GSN-NTS has a major role in the development of network infrastructures and services, and Internet services as well in Greece, especially those concerning school networks and ICT infrastructures at schools.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;footnote-2&quot;&gt;&lt;/span&gt;&lt;strong&gt;[2] Greek School Network (&lt;a href=&quot;https://www.sch.gr/&quot;&gt;https://www.sch.gr/&lt;/a&gt;)&lt;/strong&gt;&lt;br&gt;
&lt;a href=&quot;https://www.sch.gr/&quot;&gt;https://www.sch.gr/&lt;/a&gt; is the national network of the Ministry of Education and Religious Affairs which safely interconnects all schools of Primary and Secondary education, including educational units abroad, services and entities supervised by the Ministry of Education and Religious Affairs at central and regional level, service providers of lifelong learning, students, teaching staff, other educators and other entities of Ministry of Education and Religious Affairs (&lt;a href=&quot;https://www.minedu.gov.gr/&quot;&gt;www.minedu.gov.gr&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;footnote-3&quot;&gt;&lt;/span&gt;&lt;strong&gt;[3] &lt;a href=&quot;https://blogs.sch.gr&quot;&gt;https://blogs.sch.gr&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
The plugin was originally developed for &lt;a href=&quot;https://blogs.sch.gr&quot;&gt;https://blogs.sch.gr&lt;/a&gt;, which is the free blogging platform for all Greek teachers, students, and school units. The blogs.sch.gr is a service of Greek School Network&lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;#footnote-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; (&lt;a href=&quot;https://www.sch.gr/en&quot;&gt;https://www.sch.gr/en&lt;/a&gt;). It hosts more than 50.000 blogs and users. It is built and maintained by the Greek School Network and Networking Technologies Directorate of CTI.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-second-phase/">
    <title type="text">Creative Commons WordPress Plugin Second Phase</title>
    <id>urn:uuid:515b418c-a3a9-33d3-8f03-54a5b317c2b6</id>
    <updated>2019-07-20T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-second-phase/" />
    <author>
      <name>ahmadbilaldev</name>
    </author>
    <content type="html">&lt;p&gt;For the context, I am working with my mentor &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid Robot&lt;/a&gt; on Creative Commons WordPress Plugin in GSoC 2019. It is basically an attribution tool, allowing users to attribute their content and include a CC license on their WordPress website. The second phase of the project is now ending, and the plugin has a stable version ready. Following is a summary of the work accomplished during this phase.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Week 5:&lt;/strong&gt; Added customization settings for Gutenberg blocks for backend and front end.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 6:&lt;/strong&gt; Fixed and closed 17 existing issues to pave way for a stable release.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 7-8:&lt;/strong&gt; Prepped the plugin for the release to WordPress.org directory. Started working on the support to use the new license chooser. For now, removing the integrated chooser (old Partner Interface) and linking to the new chooser is our strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;release-of-v2019.7.1&quot;&gt;Release of v2019.7.1&lt;/h3&gt;&lt;p&gt;We have released the latest stable version of the plugin. &lt;code&gt;v2019.7.1&lt;/code&gt; is out and tagged in the &lt;a href=&quot;https://github.com/creativecommons/wp-plugin-creativecommons/releases&quot;&gt;wp-plugin-creativecommons repository&lt;/a&gt;. Given that a stable release is available, we have submitted it to &lt;a href=&quot;https://en-nz.wordpress.org/plugins/&quot;&gt;WordPress.org plugin directory&lt;/a&gt;. As soon as their team approves it, the plugin will be available to install for all WordPress users, which is substantial.&lt;/p&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;What's next&lt;/h3&gt;&lt;p&gt;Although the current implentation does the job, but we want it to use new &lt;a href=&quot;https://creativecommons.org/choose/&quot;&gt;CC License Chooser&lt;/a&gt; in the future. The existing approach uses an integrated modal of &lt;a href=&quot;https://creativecommons.org/choose/?partner={partner}&quot;&gt;Partner Interface&lt;/a&gt; from 2014. So, currently I am re-writing and re-designing the plugin settings to use the new and improved chooser without integrating it. Other upcoming additions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a button to copy license and author information for content sharing.&lt;/li&gt;
&lt;li&gt;CC Search integration.&lt;/li&gt;
&lt;li&gt;Changes in design and features.&lt;/li&gt;
&lt;li&gt;Improve the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more, see the &lt;a href=&quot;https://github.com/creativecommons/wp-plugin-creativecommons&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any feedback or suggestions, let us know in the discussion on &lt;code&gt;#cc-dev-wordpress&lt;/code&gt; Slack channel. Looking forward!&lt;/p&gt;
</content>
  </entry>
</feed>
